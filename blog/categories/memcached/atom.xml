<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类目录：memcached | 草帽工作室]]></title>
  <link href="http://cmback.github.io/blog/categories/memcached/atom.xml" rel="self"/>
  <link href="http://cmback.github.io/"/>
  <updated>2015-11-11T17:27:12+08:00</updated>
  <id>http://cmback.github.io/</id>
  <author>
    <name><![CDATA[草帽三人]]></name>
    <email><![CDATA[cmback3@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用xmemcached客户端]]></title>
    <link href="http://cmback.github.io/blog/20150619/xmemecached.html"/>
    <updated>2015-06-19T16:36:41+08:00</updated>
    <id>http://cmback.github.io/blog/20150619/xmemecached</id>
    <content type="html"><![CDATA[<p>Xmemcached是基于java nio实现的高性能可扩展的memcached客户端。它的主要特点：</p>

<ol>
  <li>高性能，稳定可靠，已经在众多公司的众多项目里得到应用。</li>
  <li>功能完备：客户端分布式、权重、最新最完整的协议支持。</li>
  <li>可扩展，易于集成</li>
  <li>可动态增删memached节点</li>
  <li>客户端操作统计</li>
  <li>NIO连接池</li>
</ol>

<p>等等，更多信息请见wiki文档。废话不多讲，先上代码：<!--more-->
&#8220;` java
package xmemcache;</p>

<p>import java.io.IOException;
import java.util.concurrent.TimeoutException;</p>

<p>import net.rubyeye.xmemcached.Counter;
import net.rubyeye.xmemcached.GetsResponse;
import net.rubyeye.xmemcached.MemcachedClient;
import net.rubyeye.xmemcached.MemcachedClientBuilder;
import net.rubyeye.xmemcached.XMemcachedClientBuilder;
import net.rubyeye.xmemcached.auth.AuthInfo;
import net.rubyeye.xmemcached.command.BinaryCommandFactory;
import net.rubyeye.xmemcached.exception.MemcachedException;
import net.rubyeye.xmemcached.transcoders.StringTranscoder;
import net.rubyeye.xmemcached.utils.AddrUtil;</p>

<p>/**
 * Description of this file.
 *
 * @author XiongNeng
 * @version 1.0
 * @since 13-7-13
 */
public class SimpleCache {
    private String addresses = “192.168.0.5:11211”;
    public void test1() throws IOException {
        MemcachedClientBuilder builder = new XMemcachedClientBuilder(
                AddrUtil.getAddresses(addresses));
        // AddrUtil.getAddresses(“server1:11211 server2:11211”)
        // 宕机报警
        builder.setFailureMode(true);
        // 使用二进制文件
        builder.setCommandFactory(new BinaryCommandFactory());
        /**
         * 设置连接池大小，即客户端个数
         * In a high concurrent enviroment,you may want to pool memcached clients.
         * But a xmemcached client has to start a reactor thread and some thread pools,
         * if you create too many clients,the cost is very large.
         * Xmemcached supports connection pool instreadof client pool.
         * you can create more connections to one or more memcached servers,
         * and these connections share the same reactor and thread pools,
         * it will reduce the cost of system.
         *  默认的pool size是1。设置这一数值不一定能提高性能，请依据你的项目的测试结果为准。
         *  初步的测试表明只有在大并发下才有提升。
         *  设置连接池的一个不良后果就是，同一个memcached的连接之间的数据更新并非同步的
         *  因此你的应用需要自己保证数据更新的原子性（采用CAS或者数据之间毫无关联）。
         */
        builder.setConnectionPoolSize(10);
        MemcachedClient client = builder.build();
        try {
            /**
             * 第一个是存储的key名称，
             * 第二个是expire时间（单位秒），超过这个时间,memcached将这个数据替换出去，0表示永久存储（默认是一个月)
             * 第三个参数就是实际存储的数据
             */
            client.set(“hello”, 0, “Hello,xmemcached”);
            String value = client.get(“hello”);
            System.out.println(“hello=” + value);
            client.delete(“hello”);
            value = client.get(“hello”);
            System.out.println(“hello=” + value);</p>

<pre><code>        // value=client.get(“hello”,3000);
 
        /**
         * Memcached是通过cas协议实现原子更新，所谓原子更新就是compare and set，
         * 原理类似乐观锁，每次请求存储某个数据同时要附带一个cas值， memcached比对这个cas值与当前存储数据的cas值是否相等，
         * 如果相等就让新的数据覆盖老的数据，如果不相等就认为更新失败， 这在并发环境下特别有用
         */
        GetsResponse&lt;Integer&gt; result = client.gets("a");
        if (result == null) {
            client.add("a", 0, 12);
        }
        result = client.gets("a");
        long cas = result.getCas();
        // 尝试将a的值更新为2
        if (!client.cas("a", 0, 2, cas)) {
            System.err.println("cas error");
        }
    } catch (MemcachedException e) {
        System.err.println("MemcachedClient operation fail");
        e.printStackTrace();
    } catch (TimeoutException e) {
        System.err.println("MemcachedClient operation timeout");
        e.printStackTrace();
    } catch (InterruptedException e) {
        // ignore
    }
    try {
        // close memcached client
        client.shutdown();
    } catch (IOException e) {
        System.err.println("Shutdown MemcachedClient fail");
        e.printStackTrace();
    }
 
}
 
public void test2() throws TimeoutException, InterruptedException,
        MemcachedException, IOException {
    MemcachedClientBuilder builder = new XMemcachedClientBuilder(
            AddrUtil.getAddresses(addresses));
    MemcachedClient client = builder.build();
    client.flushAll();
    if (!client.set("hello", 0, "world")) {
        System.err.println("set error");
    }
    if (client.add("hello", 0, "dennis")) {
        System.err.println("Add error,key is existed");
    }
    if (!client.replace("hello", 0, "dennis")) {
        System.err.println("replace error");
    }
    client.append("hello", " good");
    client.prepend("hello", "hello ");
    String name = client.get("hello", new StringTranscoder());
    System.out.println(name);
 
    /**
     * 而删除数据则是通过deleteWithNoReply方法，这个方法删除数据并且告诉memcached
     * 不用返回应答，因此这个方法不会等待应答直接返回，特别适合于批量处理
     */
    client.deleteWithNoReply("hello");
}
 
public void incrDecr() throws IOException, TimeoutException,
        InterruptedException, MemcachedException {
    MemcachedClientBuilder builder = new XMemcachedClientBuilder(
            AddrUtil.getAddresses(addresses));
    MemcachedClient client = builder.build();
    /**
     * 第一个参数指定递增的key名称， 第二个参数指定递增的幅度大小， 第三个参数指定当key不存在的情况下的初始值。
     * 两个参数的重载方法省略了第三个参数，默认指定为0。
     */
    assert (1 == client.incr("a", 5, 1));
    assert (6 == client.incr("a", 5));
    assert (10 == client.incr("a", 4));
    assert (9 == client.decr("a", 1));
    assert (7 == client.decr("a", 2));
}
 
public void counter() throws Exception {
    MemcachedClientBuilder builder = new XMemcachedClientBuilder(
            AddrUtil.getAddresses(addresses));
    MemcachedClient client = builder.build();
    Counter counter = client.getCounter("counter", 0);
    counter.incrementAndGet();
    counter.decrementAndGet();
    counter.addAndGet(-10);
}
 
public void auth() throws Exception {
    MemcachedClientBuilder builder = new XMemcachedClientBuilder(
            AddrUtil.getAddresses(addresses));
    builder.addAuthInfo(AddrUtil.getOneAddress(addresses),
            AuthInfo.typical("cacheuser", "123456"));
    // Must use binary protocol
    builder.setCommandFactory(new BinaryCommandFactory());
    MemcachedClient client = builder.build();
}
 
public void nioPool() throws Exception {
    MemcachedClientBuilder builder = new XMemcachedClientBuilder(
            AddrUtil.getAddresses("localhost:11211"));
    builder.setConnectionPoolSize(5);
} } ```
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux上安装memcached]]></title>
    <link href="http://cmback.github.io/blog/20150416/memcached-install.html"/>
    <updated>2015-04-16T15:52:35+08:00</updated>
    <id>http://cmback.github.io/blog/20150416/memcached-install</id>
    <content type="html"><![CDATA[<p><strong>一 准备安装文件</strong></p>

<p>下载memcached与libevent的安装文件：</p>

<p>memcached下载地址：<a href="http://memcached.googlecode.com/files/memcached-1.4.15.tar.gz">memcached-1.4.15.tar.gz</a></p>

<p>libevent下载地址：<a href="https://github.com/downloads/libevent/libevent/libevent-2.0.21-stable.tar.gz">libevent-2.0.21-stable.tar.gz</a></p>

<p><strong>二 具体安装步骤</strong></p>

<ol>
  <li>由于memcached依赖于libevent，因此需要安装libevent。由于linux系统可能默认已经安装libevent，执行命令：
<code>
rpm -qa|grep libevent 
</code></li>
  <li>查看系统是否带有该安装软件，如果有执行命令:
<code>
# 由于系统自带的版本旧，忽略依赖删除
rpm -e libevent-1.4.13-4.el6.x86_64 –nodeps
</code></li>
  <li>
    <p>安装libevent命令：<!--more-->
<code>
tar zxvf libevent-2.0.21-stable.tar.gz
cd libevent-2.0.21-stable
./configure --prefix=/usr/local/libevent
make
make install
</code>
至此libevent安装完毕；</p>
  </li>
  <li>
    <p>安装memcached命令：
<code>
tar zxvf memcached-1.4.2.tar.gz
cd memcached-memcached-1.4.2
./configure --prefix=/usr/local/memcached --with-libevent=
/usr/local/libevent/
make
make install
</code>
至此memcached安装完毕；</p>
  </li>
  <li>可能存在的错误以及解决方案</li>
</ol>

<p>如果出现客户端连接不上memcached的情况，请将防火墙关闭或将防火墙中的memcached端口（11211端口）打开。</p>

<ol>
  <li>启动memcached</li>
</ol>

<p>打开一个终端，输入以下命令：
<code>
/usr/local/memcached/bin/memcached -d -m 256 -u root -p 11211 -c 1024 –P /tmp/memcached.pid
</code>
启动参数说明：</p>

<pre><code>-d 选项是启动一个守护进程。
-u root 表示启动memcached的用户为root。
-m 是分配给Memcache使用的内存数量，单位是MB，默认64MB。
-M return error on memory exhausted (rather than removing items)。
-u 是运行Memcache的用户，如果当前为root 的话，需要使用此参数指定用户。
-p 是设置Memcache的TCP监听的端口，最好是1024以上的端口。
-c 选项是最大运行的并发连接数，默认是1024。
-P 是设置保存Memcache的pid文件。
</code></pre>

<p>另外还有个更详细的参数说明：</p>

<pre><code>memcached 1.4.2
-p &lt;num监听的TCP端口(默认: 11211)
-U &lt;num监听的UDP端口(默认: 11211, 0表示不监听)
-s &lt;file用于监听的UNIX套接字路径（禁用网络支持）
-a &lt;maskUNIX套接字访问掩码，八进制数字（默认：0700）
-l &lt;ip_addr监听的IP地址。（默认：INADDR_ANY，所有地址）
-d 作为守护进程来运行。
-r 最大核心文件限制。
-u &lt;username设定进程所属用户。（只有root用户可以使用这个参数）
-m &lt;num单个数据项的最大可用内存，以MB为单位。（默认：64MB）
-M 内存用光时报错。（不会删除数据）
-c &lt;num最大并发连接数。（默认：1024）
-k 锁定所有内存页。注意你可以锁定的内存上限。
试图分配更多内存会失败的，所以留意启动守护进程时所用的用户可分配的内存上限。
（不是前面的 -u &lt;username参数；在sh下，使用命令"ulimit -S -l NUM_KB"来设置。）
-v 提示信息（在事件循环中打印错误/警告信息。）
-vv 详细信息（还打印客户端命令/响应）
-vvv 超详细信息（还打印内部状态的变化）
-h 打印这个帮助信息并退出。
-i 打印memcached和libevent的许可。
-P &lt;file保存进程ID到指定文件，只有在使用 -d 选项的时候才有意义。
-f &lt;factor块大小增长因子。（默认：1.25）
-n &lt;bytes分配给key+value+flags的最小空间（默认：48）
-L 尝试使用大内存页（如果可用的话）。提高内存页尺寸可以减少"页表缓冲（TLB）"丢失次数，提高运行效率。
为了从操作系统获得大内存页，memcached会把全部数据项分配到一个大区块。
-D &lt;char使用 &lt;char作为前缀和ID的分隔符。
这个用于按前缀获得状态报告。默认是":"（冒号）。
如果指定了这个参数，则状态收集会自动开启；如果没指定，则需要用命令"stats detail on"来开启。
-t &lt;num使用的线程数（默认：4）
-R 每个连接可处理的最大请求数。
-C 禁用CAS。
-b 设置后台日志队列的长度（默认：1024）
-B 绑定协议 - 可能值：ascii,binary,auto（默认）
-I 重写每个数据页尺寸。调整数据项最大尺寸。
</code></pre>

<p>也可以启动多个守护进程，但是端口不能重复</p>

<p>查看memcached启动命令：
<code>
ps aux|grep memcached
</code>
1. 停止memcached</p>

<p>打开一个终端，输入以下命令：
<code>
ps -ef | grep memcached或者上面的ps命令也行，第二个字段为PID，比如10068
</code>
输入一下命令终止memcached服务：
<code>
kill -9 10068
</code></p>
]]></content>
  </entry>
  
</feed>
