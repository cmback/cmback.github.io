<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类目录：fastjson | 草帽工作室]]></title>
  <link href="http://cmback.github.io/blog/categories/fastjson/atom.xml" rel="self"/>
  <link href="http://cmback.github.io/"/>
  <updated>2015-11-11T17:22:09+08:00</updated>
  <id>http://cmback.github.io/</id>
  <author>
    <name><![CDATA[草帽三人]]></name>
    <email><![CDATA[cmback3@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[fastjson对Date的处理]]></title>
    <link href="http://cmback.github.io/blog/20150722/fastjson-date.html"/>
    <updated>2015-07-22T13:45:15+08:00</updated>
    <id>http://cmback.github.io/blog/20150722/fastjson-date</id>
    <content type="html"><![CDATA[<p><strong>fastjson对日期的序列化方式：</strong></p>

<p>一种方法是通过注解
<code>java
@JSONField (format="yyyy-MM-dd HH:mm:ss")
public Date birthday;
</code></p>

<p>另一种是通过SerializeConfig：
<code>java
private static SerializeConfig mapping = new SerializeConfig();
private static String dateFormat;
static {
    dateFormat = "yyyy-MM-dd HH:mm:ss";
    mapping.put(Date.class, new SimpleDateFormatSerializer(dateFormat));
}
</code></p>

<p>json字符串中使用单引号：
<code>java
String text = JSON.toJSONString(object, SerializerFeature.UseSingleQuotes);
</code>
<!--more-->
字段显示不同的key：
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@JSONField</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="err">”</span><span class="n">ID</span><span class="err">”</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span> <span class="err">…</span> <span class="o">}</span>
</span><span class='line'><span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="err">…</span><span class="o">;</span>
</span><span class='line'><span class="n">JSON</span><span class="o">.</span><span class="na">toJSONString</span><span class="o">(</span><span class="n">user</span><span class="o">);</span> <span class="c1">// {“ID”:001}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>类的反序列化 JavaBean：
<code>java
String text = ...; // {"r":255,"g":0,"b":0,"alpha":255}
Color color = JSON.parseObject(text, Color.class);
</code></p>

<p>数组：
<code>java
String text = ...; // [{ ... }, { ... }]
List&lt;User&gt; users = JSON.parseArray(text, User.class);
</code></p>

<p>泛型：
<code>java
String text = ...; // {"name":{"name":"ljw",age:18}}
Map&lt;String, User&gt; userMap = JSON.parseObject(text, new TypeReference&lt;Map&lt;String, User&gt;&gt;() {});
</code></p>

<p><strong>自定义序列化代码示例:</strong></p>

<p>&#8220;` java
public class JsonUtil {
    private static SerializeConfig mapping = new SerializeConfig();
    private static String dateFormat;
    static {
        dateFormat = “yyyy-MM-dd HH:mm:ss”;
    }</p>

<pre><code>/**
 * 默认的处理时间
 *
 * @param jsonText
 * @return
 */
public static String toJSON(Object jsonText) {
    return JSON.toJSONString(jsonText,
            SerializerFeature.WriteDateUseDateFormat);
}

/**
 * 自定义时间格式
 *
 * @param jsonText
 * @return
 */
public static String toJSON(String dateFormat, String jsonText) {
    mapping.put(Date.class, new SimpleDateFormatSerializer(dateFormat));
    return JSON.toJSONString(jsonText, mapping);
} } ```
</code></pre>

<p><strong>自定义日期格式反序列化示例</strong></p>

<p>先自定义一个日期解析类：
&#8220;` java
public class MyDateFormatDeserializer extends DateFormatDeserializer {</p>

<pre><code>    private String myFormat;

    public MyDateFormatDeserializer(String myFormat) {
        super();
        this.myFormat = myFormat;
    }

    @Override
    protected &lt;Date&gt; Date cast(DefaultJSONParser parser, Type clazz, Object fieldName, Object val) {
        if (myFormat == null) {
            return null;
        }
        if (val instanceof String) {
            String strVal = (String) val;
            if (strVal.length() == 0) {
                return null;
            }

            try {
                return (Date) new SimpleDateFormat(myFormat).parse((String)val);
            } catch (ParseException e) {
                throw new JSONException("parse error");
            }
        }
        throw new JSONException("parse error");
    }
} ``` User类 ``` java public class User {

public String name;
public int height;

@JSONField(name = "com-google-com")
public void setName(String name) {
    this.name = name;
}

@JSONField(format = "yyyy-MM/dd HH:mm:ss")
public Date birthday; } ``` 测试下： ``` java /**  * @param args  * @throws IOException  */ public static void main(String[] args) throws IOException, ParseException {

String json = "{\"name\":\"22323\", \"age\": 1234," +
        " \"birthday\": \"2012-12/12 12:12:12\"}";
Test t = JSON.parseObject(json, Test.class, mapping,
        JSON.DEFAULT_PARSER_FEATURE, new Feature[0]);
System.out.println(t.name);
System.out.println(t.height);
System.out.println(t.birthday);
System.out.println(
        new SimpleDateFormat("yyyy-MM/dd HH:mm:ss").parse("2012-12/12 12:12:12")); } ```
</code></pre>

<p><strong>总结：</strong></p>

<p>对于JSONField注解，好像只对序列号的格式有影响，反序列化不管这个，不知道为什么，
只能自己写个解析类了，不过这样就更灵活了，可以在里面写很多处理逻辑，
比如json字符串里面日期格式并不是标准格式的时候，就可以先转成标准格式再去解析了。</p>

]]></content>
  </entry>
  
</feed>
