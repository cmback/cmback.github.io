<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[草帽工作室]]></title>
  <link href="http://cmback.github.io/atom.xml" rel="self"/>
  <link href="http://cmback.github.io/"/>
  <updated>2015-11-11T17:27:12+08:00</updated>
  <id>http://cmback.github.io/</id>
  <author>
    <name><![CDATA[草帽三人]]></name>
    <email><![CDATA[cmback3@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[利用httpd对Tomcat进行负载均衡]]></title>
    <link href="http://cmback.github.io/blog/20151013/httpd-tomcat.html"/>
    <updated>2015-10-13T10:59:15+08:00</updated>
    <id>http://cmback.github.io/blog/20151013/httpd-tomcat</id>
    <content type="html"><![CDATA[<h3 id="section">环境说明</h3>
<p>操作系统：CentOS 6.5_x86_64</p>

<p>前提：提前准备好编译环境，防火墙和selinux都关闭</p>

<p>主机IP：两台机器，192.168.203.103、192.168.203.104</p>

<p>安装软件：jdk-8u51-linux-x64, apache-tomcat-8.0.24, tomcat-connectors-1.2.41, httpd-2.2.15, httpd-devel-2.2.15</p>

<h4 id="java8">一、两台机器都安装JAVA8</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">sudo rpm -qa <span class="p">|</span> grep jdk
</span><span class="line">jdk-1.7.0_45-fcs.x86_64
</span><span class="line">sudo rpm -e jdk-1.7.0_45
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>下载JDK8的包</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">wget --no-cookies --no-check-certificate --header <span class="s2">&quot;Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie&quot;</span> <span class="s2">&quot;http://download.oracle.com/otn-pub/java/jdk/8u60-b27/jdk-8u60-linux-x64.tar.gz&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果上述链接失效，请去官网下载最新的源码包。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">cd</span> /opt/
</span><span class="line">tar xzf jdk-8u51-linux-x64.tar.gz
</span><span class="line"><span class="nb">cd</span> /opt/jdk1.8.0_51/
</span><span class="line">sudo chown -R root:root /opt/jdk1.8.0_51/
</span><span class="line">sudo alternatives --install /usr/bin/java java /opt/jdk1.8.0_51/bin/java 2
</span><span class="line">sudo alternatives --config java
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>得到以下输出，选择刚刚安装的jdk8即可：<!--more--></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">There are <span class="m">3</span> programs which provide <span class="s1">&#39;java&#39;</span>.
</span><span class="line">
</span><span class="line">  Selection    Command
</span><span class="line">-----------------------------------------------
</span><span class="line">*  <span class="m">1</span>           /opt/jdk1.7.0_71/bin/java
</span><span class="line"> + <span class="m">2</span>           /opt/jdk1.8.0_25/bin/java
</span><span class="line">   <span class="m">3</span>           /opt/jdk1.8.0_51/bin/java
</span><span class="line">
</span><span class="line">Enter to keep the current selection<span class="o">[</span>+<span class="o">]</span>, or <span class="nb">type </span>selection number: 3
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后再配置下javac和jar</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">sudo alternatives --install /usr/bin/jar jar /opt/jdk1.8.0_51/bin/jar 2
</span><span class="line">sudo alternatives --install /usr/bin/javac javac /opt/jdk1.8.0_51/bin/javac 2
</span><span class="line">sudo alternatives --set jar /opt/jdk1.8.0_51/bin/jar
</span><span class="line">sudo alternatives --set javac /opt/jdk1.8.0_51/bin/javac
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>查看下JDK版本 <code>java -version</code></p>

<p>修改环境变量 <code>sudo vim /etc/profile</code></p>

<p>输入以下内容</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">export </span><span class="nv">JAVA_HOME</span><span class="o">=</span>/opt/jdk1.8.0_51
</span><span class="line"><span class="nb">export </span><span class="nv">JRE_HOME</span><span class="o">=</span>/opt/jdk1.8.0_51/jre
</span><span class="line"><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:<span class="nv">$JAVA_HOME</span>/bin
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>执行 <code>source /etc/profile</code></p>

<h3 id="tomcat">二、两台机器安装tomcat</h3>

<p>1.下载安装tomcat</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">wget http://mirrors.cnnic.cn/apache/tomcat/tomcat-8/v8.0.24/bin/apache-tomcat-8.0.24.tar.gz
</span><span class="line">tar xf apache-tomcat-8.0.24.tar.gz -C /usr/local/
</span><span class="line"><span class="nb">cd</span> /usr/local/
</span><span class="line">ln -sv apache-tomcat-8.0.24 tomcat
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>2.配置环境变量</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">vim /etc/profile.d/tomcat.sh
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">CATALINA_BASE</span><span class="o">=</span>/usr/local/tomcat
</span><span class="line"><span class="nv">PATH</span><span class="o">=</span><span class="nv">$CATALINA_BASE</span>/bin:<span class="nv">$PATH</span>
</span><span class="line"><span class="nb">export </span>PATH CATALINA_BASE
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>执行：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">. /etc/profile.d/tomcat.sh
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>3.查看状态：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">catalina.sh version
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>4.提供启动脚本</p>

<p>sudo vim /etc/init.d/tomcat</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c">#!/bin/sh</span>
</span><span class="line"><span class="c"># Tomcat init script for linux</span>
</span><span class="line"><span class="c"># chkconfig: 2345 96 14</span>
</span><span class="line"><span class="c"># description: The Apache Tomcat servlet/JSP container</span>
</span><span class="line"><span class="c"># JAVA_OPTS=&#39;-Xms64m -Xmx128m&#39;</span>
</span><span class="line"><span class="nv">JAVA_HOME</span><span class="o">=</span>/opt/jdk
</span><span class="line"><span class="nv">CATALINA_HOME</span><span class="o">=</span>/usr/local/tomcat
</span><span class="line"><span class="nb">export </span>JAVA_HOME CATALINA_HOME
</span><span class="line">
</span><span class="line"><span class="k">case</span> <span class="nv">$1</span> in
</span><span class="line">start<span class="o">)</span>
</span><span class="line">  <span class="nb">exec</span> <span class="nv">$CATALINA_HOME</span>/bin/catalina.sh start <span class="p">;;</span>
</span><span class="line">stop<span class="o">)</span>
</span><span class="line">  <span class="nb">exec</span> <span class="nv">$CATALINA_HOME</span>/bin/catalina.sh stop <span class="p">;;</span>
</span><span class="line">restart<span class="o">)</span>
</span><span class="line">  <span class="nb">echo</span> <span class="s2">&quot;stoping tomcat ...&quot;</span>
</span><span class="line">  ps aux <span class="p">|</span>grep tomcat/bin <span class="p">|</span>grep -v <span class="s2">&quot;grep tomcat/bin&quot;</span> <span class="p">|</span><span class="k">while</span> <span class="nb">read </span>line
</span><span class="line">  <span class="k">do</span>
</span><span class="line">    <span class="nv">linewords</span><span class="o">=(</span><span class="nv">$line</span><span class="o">)</span>
</span><span class="line">    <span class="nv">pid</span><span class="o">=</span><span class="s2">&quot;${linewords[1]}&quot;</span>
</span><span class="line">    <span class="nb">kill</span> -9 <span class="nv">$pid</span>
</span><span class="line">  <span class="k">done</span>
</span><span class="line">  <span class="c"># $CATALINA_HOME/bin/catalina.sh stop</span>
</span><span class="line">  sleep 2
</span><span class="line">  <span class="nb">echo</span> <span class="s2">&quot;starting tomcat ...&quot;</span>
</span><span class="line">  <span class="nb">exec</span> <span class="nv">$CATALINA_HOME</span>/bin/catalina.sh start <span class="p">;;</span>
</span><span class="line">*<span class="o">)</span>
</span><span class="line">  <span class="nb">echo</span> <span class="s2">&quot;Usage: $0 {start|stop|restart}&quot;</span>
</span><span class="line">  <span class="nb">exit </span>1
</span><span class="line">  <span class="p">;;</span>
</span><span class="line"><span class="k">esac</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>执行：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">sudo chmod +x /etc/init.d/tomcat
</span><span class="line">sudo chkconfig --add tomcat
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>5.编辑tomcat配置文件，只添加jvmRoute参数：</p>

<p>在第一台机子上面：</p>

<p><code>sudo vim /usr/local/tomcat/conf/server.xml</code></p>

<p>修改下面这句：</p>

<pre><code>&lt;Engine name="Catalina" defaultHost="localhost" jvmRoute="TomcatA"&gt;
</code></pre>

<p>在第二台机子上面：</p>

<p><code>sudo vim /usr/local/tomcat/conf/server.xml</code></p>

<p>修改下面这句：</p>

<pre><code>&lt;Engine name="Catalina" defaultHost="localhost" jvmRoute="TomcatB"&gt;
</code></pre>

<p>6.提供测试页面</p>

<p>第一台机器上：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">sudo mkdir -pv /usr/local/tomcat/webapps/test/WEB-INF/<span class="o">{</span>classes,lib<span class="o">}</span>
</span><span class="line">sudo vim /usr/local/tomcat/webapps/test/index.jsp
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>写一个简单的JSP页面：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="err">&lt;</span>%@ page language=&quot;java&quot; %&gt;
</span><span class="line"><span class="err">&lt;</span>%@ page import=&quot;java.util.*&quot; %&gt;
</span><span class="line"><span class="nt">&lt;html&gt;</span>
</span><span class="line">    <span class="nt">&lt;head&gt;</span>
</span><span class="line">        <span class="nt">&lt;title&gt;</span>test<span class="nt">&lt;/title&gt;</span>
</span><span class="line">    <span class="nt">&lt;/head&gt;</span>
</span><span class="line">    <span class="nt">&lt;body&gt;</span>
</span><span class="line">        <span class="err">&lt;</span>%
</span><span class="line">            out.println(&quot;This is TomcatA&quot;);
</span><span class="line">        %&gt;
</span><span class="line">    <span class="nt">&lt;/body&gt;</span>
</span><span class="line"><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后启动tomcat</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">sudo service tomcat start
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>这时候可以通过访问 <code>http://192.168.203.103:8080/test</code> 访问到这个页面</p>

<p>第二台机器上：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">sudo mkdir -pv /usr/local/tomcat/webapps/test/WEB-INF/<span class="o">{</span>classes,lib<span class="o">}</span>
</span><span class="line">sudo vim /usr/local/tomcat/webapps/test/index.jsp
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>写一个简单的JSP页面：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="err">&lt;</span>%@ page language=&quot;java&quot; %&gt;
</span><span class="line"><span class="err">&lt;</span>%@ page import=&quot;java.util.*&quot; %&gt;
</span><span class="line"><span class="nt">&lt;html&gt;</span>
</span><span class="line">    <span class="nt">&lt;head&gt;</span>
</span><span class="line">        <span class="nt">&lt;title&gt;</span>test<span class="nt">&lt;/title&gt;</span>
</span><span class="line">    <span class="nt">&lt;/head&gt;</span>
</span><span class="line">    <span class="nt">&lt;body&gt;</span>
</span><span class="line">        <span class="err">&lt;</span>%
</span><span class="line">            out.println(&quot;This is TomcatB&quot;);
</span><span class="line">        %&gt;
</span><span class="line">    <span class="nt">&lt;/body&gt;</span>
</span><span class="line"><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后启动tomcat</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">sudo service tomcat start
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>这时候可以通过访问<code>http://192.168.203.104:8080/test</code>访问到这个页面</p>

<h3 id="modjktomcat">三、利用mod_jk模块对tomcat进行负载均衡</h3>

<p>利用httpd反向代理tomcat时有两种方法，分别要用到mod_proxy和mod_jk这两个模块。
mod_jk需要额外编译安装，不过它功能更强大，所以推荐mod_jk。
此模块只需要在一台机器上安装，我们这里在第一台机器（103）上安装。</p>

<p>1.安装httpd：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="html"><span class="line">yum -y install httpd httpd-devel
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>2.安装mod_jk.so模块：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">wget http://mirrors.cnnic.cn/apache/tomcat/tomcat-connectors/jk/tomcat-connectors-1.2.41-src.tar.gz
</span><span class="line">tar xf tomcat-connectors-1.2.41-src.tar.gz
</span><span class="line"><span class="nb">cd </span>tomcat-connectors-1.2.41-src/native/
</span><span class="line">./configure --with-apxs<span class="o">=</span>/usr/sbin/apxs
</span><span class="line">sudo make <span class="o">&amp;&amp;</span> sudo make install
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>3.提供额外的httpd模块配置文件：</p>

<p><code>vim /etc/httpd/conf.d/httpd-jk.conf</code></p>

<pre><code># Load the mod_jk
LoadModule  jk_module  modules/mod_jk.so
JkWorkersFile  /etc/httpd/conf.d/workers.properties
JkLogFile  logs/mod_jk.log
JkLogLevel  debug
JkMount  /*  lb1
JkMount  /status/  stat1
</code></pre>

<p>4.配置mod_jk模块的配置文件workers.properties：</p>

<p><code>vim /etc/httpd/conf.d/workers.properties</code></p>

<pre><code>worker.list = lb1,stat1
worker.TomcatA.type = ajp13
worker.TomcatA.host = 192.168.203.103
worker.TomcatA.port = 8009
worker.TomcatA.lbfactor = 1
worker.TomcatB.type = ajp13
worker.TomcatB.host = 192.168.203.104
worker.TomcatB.port = 8009
worker.TomcatB.lbfactor = 1
worker.lb1.type = lb
worker.lb1.sticky_session = 0
worker.lb1.balance_workers = TomcatA, TomcatB
worker.stat1.type = status
</code></pre>

<p>5.启动httpd测试：
我们先去修改下hostname，还有httpd的domainname，<code>sudo vim /etc/hosts</code></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">127.0.0.1	localhost centos03
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>然后修改httpd的配置文件，<code>sudo vim /etc/httpd/conf/httpd.conf</code>
修改这一行：</p>

<pre><code>ServerName localhost:80
</code></pre>

<p>最后我们启动httpd服务：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">sudo service httpd start
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>用浏览器打开<code>http://192.168.203.103/test</code>，我们不断刷新，可以看到效果。</p>

<p>6.修改httpd默认端口号方法</p>

<p><code>sudo vim /etc/httpd/conf/httpd.conf</code></p>

<p>修改两个地方</p>

<pre><code>#Listen 12.34.56.78:80
Listen 80
#把80改为你设置的端口，我设置端口为8088

Listen 8088

NameVirtualHost *:80
#把80改为你设置的端口，我设置端口为8088
NameVirtualHost *:8088
</code></pre>

<p>保存修改，退出，重启httpd服务。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS6.5上LVS和KeepAlived搭建高可用负载均衡集群]]></title>
    <link href="http://cmback.github.io/blog/20150925/lvs-keepalived.html"/>
    <updated>2015-09-25T16:40:04+08:00</updated>
    <id>http://cmback.github.io/blog/20150925/lvs-keepalived</id>
    <content type="html"><![CDATA[<h2 id="section">一、理论知识（原理）</h2>
<p>我们不仅要知其然，而且要知其所以然，所以先给大家准备一些理论知识课，这样对以后的应用将会事半功倍。</p>

<p><strong>1、什么是LVS？</strong></p>

<p>请阅读作者章文嵩博士自己的研究报告，共计4部分，看完后对集群和LVS就有了初步的了解，不懂时可以翻翻。</p>

<ul>
  <li>LVS项目介绍：<a href="http://www.linuxvirtualserver.org/zh/lvs1.html">http://www.linuxvirtualserver.org/zh/lvs1.html</a></li>
  <li>LVS集群的体系结构：<a href="http://www.linuxvirtualserver.org/zh/lvs2.html">http://www.linuxvirtualserver.org/zh/lvs2.html</a></li>
  <li>LVS集群中的IP负载均衡技术：<a href="http://www.linuxvirtualserver.org/zh/lvs3.html">http://www.linuxvirtualserver.org/zh/lvs3.html</a></li>
  <li>LVS集群的负载调度：<a href="http://www.linuxvirtualserver.org/zh/lvs4.html">http://www.linuxvirtualserver.org/zh/lvs4.html</a></li>
</ul>

<p><strong>2、什么是KeepAlived?</strong></p>

<p>Keepalived原理与实战精讲： <a href="http://zhumeng8337797.blog.163.com/blog/static/100768914201191762253640/">http://zhumeng8337797.blog.163.com/blog/static/100768914201191762253640/</a></p>

<p><strong>3、什么是CentOS?</strong></p>

<p>百度百科给出的答案：<a href="http://baike.baidu.com/link?url=X3SzN3bJWjW_PkWC6GB2MTs5KhVmxBAxnCRjs9W7-IARDiHloZ_oRWj17BEz0kY3">什么是CentOS</a></p>

<p><strong>4、小结</strong></p>

<p>相信读了以上的理论知识后，已经对集群的实现原理有了大概的了解，那接下来我们就开始动手吧。<!--more--></p>

<p>系统架构图：</p>

<p><img src="http://yidaospace.qiniudn.com/0002.png" alt="" /></p>

<h2 id="section-1">二、服务器的安装</h2>
<p>我们会用到4个服务器，横向分2层：</p>

<p>第1层是LVS服务器（1个主，1个从；从可以多个）用来转发请求，需要安装ipvsadm和keepAlived；
第2层是提供具体服务的服务器（表中用了2个；当然也可以是多个，现实的应用会上百台。），
安装的是具体的服务，这里我们安装的是TOMCAT。</p>

<p>主机环境如下：</p>

<pre><code>192.168.203.107　 LVS_VIP（VIP：Virtual IP）
192.168.203.103　 LVS_Master　　
192.168.203.104　 LVS_Backup
192.168.203.93　  WEB1_RealServer
192.168.203.94　  WEB2_RealServer
</code></pre>

<p>克隆：我们先安装配置好一层的一个服务器，其他服务器使用克隆方式。</p>

<h3 id="virtualbox4212">1. 安装虚拟机VirtualBox4.2.12</h3>

<h3 id="centos-65">2. 安装CentOS 6.5</h3>

<p>这一步先安装一台虚拟机，然后其他的通过克隆方式安装，不过注意的是，
克隆之后需要修改相应的IP地址已经eth0等配置。具体方法是：</p>

<h4 id="etcudevrulesd70-persistent-netrules">1) 修改/etc/udev/rules.d/70-persistent-net.rules</h4>

<p>拷贝eth1的硬件地址到eth0，删除eth1信息</p>

<h4 id="etcsysconfignetwork-scriptsifcfg-eth0">2) 配置/etc/sysconfig/network-scripts/ifcfg-eth0</h4>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class=""><span class="line">DEVICE="eth0"
</span><span class="line">BOOTPROTO="static"
</span><span class="line">HWADDR="00:0C:29:91:42:2C"
</span><span class="line">MTU="1500"
</span><span class="line">NM_CONTROLLED="yes"
</span><span class="line">ONBOOT="yes"
</span><span class="line">IPADDR=192.168.203.94
</span><span class="line">NETMASK=255.255.255.0
</span><span class="line">GATEWAY=192.168.203.254</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="reboot">3) reboot</h4>

<p>这样可以保证所有的机器网卡都是eth0接口</p>

<h3 id="lvslvskeepalived">3. LVS层安装LVS和KeepAlived</h3>

<p>首先是LVS_MASTER机器的安装配置，打开LVS_Master服务器；</p>

<p>先安装lvs_master的服务，lvs_backup使用克隆虚拟机的方式，然后在配置文件修改三个参数即可，下面会讲到。</p>

<h4 id="ipvsadm">1) 安装IPVSADM</h4>

<p>知识点：IPVSADM理解为IPVS管理工具；LVS（Linux Virtual Server）的核心为IPVS（IP Virtual Server），
从Linux内核版本2.6起，IPVS模块已经编译进了Linux内核。</p>

<p>使用yum命令进行安装，系统会选择最适合内核版本的ipvsadm</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">yum -y install ipvsadm</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-2">2) 防火墙</h4>

<p>为了测试方便，我们直接关闭防火墙，在实际使用中开启需要的端口即可。</p>

<p>具体配置可参考：<a href="http://www.cnblogs.com/rockee/archive/2012/05/17/2506671.html">http://www.cnblogs.com/rockee/archive/2012/05/17/2506671.html</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">service iptables stop</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="keepalived-">3) KeepAlived 的安装</h4>

<p>知识点：KeepAlived是一个路由软件，它主要的目的是让我们通过简单的配置，实现高可用负载均衡，
当然负载均衡依赖于Linux虚拟服务器（IPVS）的内核模块，其高可用性使用VRRP协议来实现，
KeepAlived不仅会检测负载均衡服务器池中每台机器的健康状况并通知IPVS将非健康的机器从池中移除掉；
同时它还能对负载均衡调度器本身实现健康状态检查，当主负载均衡调度器出现问题时，备用负载均衡调度器顶替主进行工作。
逐条执行如下命令，执行的原因暂不解释，实际就是需要这些组件，安装即可。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cd /usr/src
</span><span class="line">yum -y install openssl-devel
</span><span class="line">wget http://www.keepalived.org/software/keepalived-1.2.7.tar.gz
</span><span class="line">wget http://mirror.centos.org/centos/6/os/x86_64/Packages/popt-static-1.13-7.el6.x86_64.rpm
</span><span class="line">yum -y install popt-static-1.13-7.el6.x86_64.rpm
</span><span class="line">yum -y install kernel-devel make gcc openssl-devel libnl* popt*
</span><span class="line">ln -s /usr/src/kernels/2.6.32-220.13.1.el6.x86_64/ /usr/src/linux
</span><span class="line">tar zxvf keepalived-1.2.7.tar.gz
</span><span class="line">cd keepalived-1.2.7
</span><span class="line">./configure --with-kernel-dir=/usr/src/kernels/2.6.32-358.2.1.el6.x86_64/
</span><span class="line">make &amp;&amp; make install
</span><span class="line">cp /usr/local/etc/rc.d/init.d/keepalived /etc/rc.d/init.d/
</span><span class="line">cp /usr/local/etc/sysconfig/keepalived /etc/sysconfig/
</span><span class="line">mkdir /etc/keepalived
</span><span class="line">cp /usr/local/etc/keepalived/keepalived.conf /etc/keepalived/
</span><span class="line">cp /usr/local/sbin/keepalived /usr/sbin/</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>注：上面的kernel路径自己去用tab键弄出来
OK，KeepAlived安装完毕，然后进行配置。</p>

<h4 id="keepalivde">4) KeepAlivde的配置</h4>

<p><strong>一步：打开IP Forward 功能</strong></p>

<p>（LVS现有三种负载均衡规则都需要打开此功能，如果不打开此功能，下面的配置配得再好都无济于事）</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">vim /etc/sysctl.conf</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>打开后修改里面“net.ipv4.ip_forward = 1”，修改好后保存退出，执行如下命令使设置立即生效</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sysctl -p</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>第二步：KeepAlivde的配置</strong></p>

<p>配置文件在这个位置： /etc/keepalived/keepalived.conf</p>

<p>启动KeepAlived时，它默认会去/etc/keepalived下面找它的配置文件，
所以上面命令中我们已经将这个配置文件复制过来了。现在进行修改：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
</pre></td><td class="code"><pre><code class=""><span class="line">! Configuration File for keepalived
</span><span class="line">
</span><span class="line">global_defs {
</span><span class="line">   notification_email {
</span><span class="line">     test@sina.com
</span><span class="line">   }
</span><span class="line">   notification_email_from admin@test.com
</span><span class="line">   smtp_server 127.0.0.1
</span><span class="line">   smtp_connect_timeout 30
</span><span class="line">   router_id LVS_MASTER
</span><span class="line">}
</span><span class="line">
</span><span class="line">vrrp_instance VI_1 {
</span><span class="line">    state MASTER
</span><span class="line">    interface eth0
</span><span class="line">    virtual_router_id 60
</span><span class="line">    priority 100
</span><span class="line">    advert_int 1
</span><span class="line">    authentication {
</span><span class="line">        auth_type PASS
</span><span class="line">        auth_pass 1111
</span><span class="line">    }
</span><span class="line">    virtual_ipaddress {
</span><span class="line">        192.168.203.107
</span><span class="line">    }
</span><span class="line">}
</span><span class="line">
</span><span class="line">virtual_server 192.168.203.107 8080 {
</span><span class="line">    delay_loop 6
</span><span class="line">    lb_algo rr
</span><span class="line">    lb_kind DR
</span><span class="line">    nat_mask 255.255.255.0
</span><span class="line">    persistence_timeout 50
</span><span class="line">    protocol TCP
</span><span class="line">
</span><span class="line">    real_server 192.168.203.93 8080 {
</span><span class="line">        weight 1
</span><span class="line">        TCP_CHECK {
</span><span class="line">            connect_timeout 3
</span><span class="line">            nb_get_retry 3
</span><span class="line">            delay_before_retry 3
</span><span class="line">        }
</span><span class="line">    }
</span><span class="line">
</span><span class="line">    real_server 192.168.203.94 8080 {
</span><span class="line">        weight 1
</span><span class="line">        TCP_CHECK {
</span><span class="line">            connect_timeout 3
</span><span class="line">            nb_get_retry 3
</span><span class="line">            delay_before_retry 3
</span><span class="line">
</span><span class="line">    }
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>以上就完成了keepAlived的配置，下面进行启动</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">chkconfig keepalived on
</span><span class="line">service keepalived start</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>查看进程</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ps aux | grep keepalived</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Keepalived正常运行时，共启动3个进程，其中一个进程是父进程，负责监控其子进程；
一个是vrrp子进程；另外一个是checkers子进程。</p>

<p>查看下虚拟IP是否已经加上（重要）</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line">[root@centos03 keepalived-1.2.7]# ip a
</span><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 16436 qdisc noqueue state UNKNOWN
</span><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
</span><span class="line">    inet 127.0.0.1/8 scope host lo
</span><span class="line">    inet6 ::1/128 scope host
</span><span class="line">       valid_lft forever preferred_lft forever
</span><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000
</span><span class="line">    link/ether 08:00:27:81:29:7d brd ff:ff:ff:ff:ff:ff
</span><span class="line">    inet 192.168.203.103/24 brd 192.168.203.255 scope global eth0
</span><span class="line">    inet 192.168.203.107/32 scope global eth0
</span><span class="line">    inet6 fe80::a00:27ff:fe81:297d/64 scope link
</span><span class="line">       valid_lft forever preferred_lft forever</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>说明虚拟IP已经自动配置上了。</p>

<p>还有3个命令在先列示下，并不用执行</p>

<ul>
  <li>显示集群中服务器ip信息：<code>ipvsadm -ln</code></li>
  <li>查看日志：<code>tail -f /var/log/messages</code></li>
  <li>查看请求转发情况：<code>ipvsadm -lcn | grep 虚拟IP</code></li>
</ul>

<p>至此，LVS_MASTER服务器已经配置好并启动了，接下来我们配置web服务器。</p>

<h4 id="webweb1realserver">5) WEB服务器WEB1_RealServer的配置</h4>

<p>1. 克隆虚拟机WEB1_RealServer(192.168.203.93)；
2. 配置虚拟IP启动脚本</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">vim /etc/init.d/realserver.sh</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>在文件中输入如下脚本：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c">#!/bin/bash</span>
</span><span class="line"><span class="nv">SNS_VIP</span><span class="o">=</span>192.168.203.107
</span><span class="line">. /etc/rc.d/init.d/functions
</span><span class="line"><span class="k">case</span> <span class="s2">&quot;$1&quot;</span> in
</span><span class="line">start<span class="o">)</span>
</span><span class="line"> ifconfig lo:0 <span class="nv">$SNS_VIP</span> netmask 255.255.255.255 broadcast <span class="nv">$SNS_VIP</span>
</span><span class="line"> /sbin/route add -host <span class="nv">$SNS_VIP</span> dev lo:0
</span><span class="line"> <span class="nb">echo</span> <span class="s2">&quot;1&quot;</span> &gt;/proc/sys/net/ipv4/conf/lo/arp_ignore
</span><span class="line"> <span class="nb">echo</span> <span class="s2">&quot;2&quot;</span> &gt;/proc/sys/net/ipv4/conf/lo/arp_announce
</span><span class="line"> <span class="nb">echo</span> <span class="s2">&quot;1&quot;</span> &gt;/proc/sys/net/ipv4/conf/all/arp_ignore
</span><span class="line"> <span class="nb">echo</span> <span class="s2">&quot;2&quot;</span> &gt;/proc/sys/net/ipv4/conf/all/arp_announce
</span><span class="line"> sysctl -p &gt;/dev/null 2&gt;<span class="p">&amp;</span>1
</span><span class="line"> <span class="nb">echo</span> <span class="s2">&quot;RealServer Start OK&quot;</span>
</span><span class="line"> <span class="p">;;</span>
</span><span class="line">stop<span class="o">)</span>
</span><span class="line"> ifconfig lo:0 down
</span><span class="line"> route del <span class="nv">$SNS_VIP</span> &gt;/dev/null 2&gt;<span class="p">&amp;</span>1
</span><span class="line"> <span class="nb">echo</span> <span class="s2">&quot;0&quot;</span> &gt;/proc/sys/net/ipv4/conf/lo/arp_ignore
</span><span class="line"> <span class="nb">echo</span> <span class="s2">&quot;0&quot;</span> &gt;/proc/sys/net/ipv4/conf/lo/arp_announce
</span><span class="line"> <span class="nb">echo</span> <span class="s2">&quot;0&quot;</span> &gt;/proc/sys/net/ipv4/conf/all/arp_ignore
</span><span class="line"> <span class="nb">echo</span> <span class="s2">&quot;0&quot;</span> &gt;/proc/sys/net/ipv4/conf/all/arp_announce
</span><span class="line"> <span class="nb">echo</span> <span class="s2">&quot;RealServer Stoped&quot;</span>
</span><span class="line"> <span class="p">;;</span>
</span><span class="line"> *<span class="o">)</span>
</span><span class="line"> <span class="nb">echo</span> <span class="s2">&quot;Usage: $0 {start|stop}&quot;</span>
</span><span class="line"> <span class="nb">exit </span>1
</span><span class="line"><span class="k">esac</span>
</span><span class="line"><span class="nb">exit </span>0
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>3. 安装配置TOMCAT</p>

<p>我测试用的是TOMCAT6</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">yum -y install tomcat6 tomcat6-webapps tomcat6-admin-webapps
</span><span class="line">service tomcat6 start
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>关闭防火墙：service iptables stop</p>

<p>打开浏览器：http://192.168.203.93:8080</p>

<p>会看到TOMCAT的熟悉页面了。</p>

<p>为了测试负载均衡，我们将这个页面改下，以更好的标识这个网页是本服务器的</p>

<p>Tomcat6安装目录位于/usr/share/tomcat6，所以我们要编辑tomcat下的webapps/ROOT/index.html这个文件。</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">cd</span> /usr/share/tomcat6/webapps/ROOT/
</span><span class="line">cat /dev/null &gt; index.html
</span><span class="line">vim index.html
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>将如下文本写入index.html，然后打开浏览器：http://192.168.203.93:8080，已经改变：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">web1 192.168.203.93
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>启动虚拟IP的脚本</li>
</ul>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">sh /etc/init.d/realserver.sh start
</span><span class="line">ifconfig
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>运行后会看到网络有一个虚拟IP：</p>

<pre><code>[root@centos01 ROOT]# ifconfig
eth0      Link encap:Ethernet  HWaddr 08:00:27:59:AB:1D
          inet addr:192.168.203.93  Bcast:192.168.203.255  Mask:255.255.255.0
          inet6 addr: fe80::a00:27ff:fe59:ab1d/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:81006 errors:0 dropped:0 overruns:0 frame:0
          TX packets:12305 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:83023415 (79.1 MiB)  TX bytes:1645604 (1.5 MiB)

lo        Link encap:Local Loopback
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:16436  Metric:1
          RX packets:46 errors:0 dropped:0 overruns:0 frame:0
          TX packets:46 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:3559 (3.4 KiB)  TX bytes:3559 (3.4 KiB)

lo:0      Link encap:Local Loopback
          inet addr:192.168.203.107  Mask:255.255.255.255
          UP LOOPBACK RUNNING  MTU:16436  Metric:1
</code></pre>

<p>4. 去LVS_MASTER服务器的终端查看下ipvsadm，查看已经连接上了WEB1服务器，运行命令</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">ipvsadm -ln
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>结果如下：</p>

<pre><code>[root@centos03 keepalived-1.2.7]# ipvsadm -ln
IP Virtual Server version 1.2.1 (size=4096)
Prot LocalAddress:Port Scheduler Flags
  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn
TCP  192.168.203.107:8080 rr persistent 50
  -&gt; 192.168.203.93:8080          Route   1      0          0
</code></pre>

<p>已经可以看到有服务器加入进来了。
此时我们访问网页http://192.168.203.107:8080，出现界面显示web1 192.168.203.93；
OK，至此已经能实现负载均衡了，接下来我们通过克隆实现多个主机的试验。</p>

<p>5. 服务器克隆</p>

<p>1) 从LVS_MASTER克隆一个LVS_BACKUP服务器，然后修改其中的参数，
MASTER与BACKUP配置仅三处不同：global_defs中的router_id、vrrp_instance中的state、priority
（注意keepAlived的配置文件中有一个网卡设备，虚拟机的网卡设备可能是不一样的，
有的是eth0，有的是eth1，所以也是要改动的，否则从服务器的服务器很有可能服务不正常）</p>

<p>配置好的如下文：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">! Configuration File <span class="k">for</span> keepalived
</span><span class="line">
</span><span class="line">global_defs <span class="o">{</span>
</span><span class="line">   notification_email <span class="o">{</span>
</span><span class="line">     <span class="nb">test</span>@sina.com
</span><span class="line">   <span class="o">}</span>
</span><span class="line">   notification_email_from admin@test.com
</span><span class="line">   smtp_server 127.0.0.1
</span><span class="line">   smtp_connect_timeout 30
</span><span class="line">   router_id LVS_BACKUP
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line">vrrp_instance VI_1 <span class="o">{</span>
</span><span class="line">    state BACKUP
</span><span class="line">    interface eth0
</span><span class="line">    virtual_router_id 60
</span><span class="line">    priority 90
</span><span class="line">    advert_int 1
</span><span class="line">    authentication <span class="o">{</span>
</span><span class="line">        auth_type PASS
</span><span class="line">        auth_pass 1111
</span><span class="line">    <span class="o">}</span>
</span><span class="line">    virtual_ipaddress <span class="o">{</span>
</span><span class="line">        192.168.203.107
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line">virtual_server 192.168.203.107 <span class="m">8080</span> <span class="o">{</span>
</span><span class="line">    delay_loop 6
</span><span class="line">    lb_algo rr
</span><span class="line">    lb_kind DR
</span><span class="line">    nat_mask 255.255.255.0
</span><span class="line">    persistence_timeout 50
</span><span class="line">    protocol TCP
</span><span class="line">
</span><span class="line">    real_server 192.168.203.93 <span class="m">8080</span> <span class="o">{</span>
</span><span class="line">        weight 1
</span><span class="line">        TCP_CHECK <span class="o">{</span>
</span><span class="line">            connect_timeout 3
</span><span class="line">            nb_get_retry 3
</span><span class="line">            delay_before_retry 3
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    real_server 192.168.203.94 <span class="m">8080</span> <span class="o">{</span>
</span><span class="line">        weight 1
</span><span class="line">        TCP_CHECK <span class="o">{</span>
</span><span class="line">            connect_timeout 3
</span><span class="line">            nb_get_retry 3
</span><span class="line">            delay_before_retry 3
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>2) 从WEB1_RealServer克隆一个WEB2_RealServer，将tomcat的index.html文件改为web2 192.168.203.94。
（这里的IP是我测试的，您的可以自定义）启动realserver.sh脚本。</p>

<p>3) OK，至此我们已经虚拟出2个LVS服务器，一对主从；2个WEB服务器，web1和web2。
接下来我们进行测试，看能否满足我们的初始需求。</p>

<h2 id="section-3">三、负载和可用性测试</h2>

<p>开启每个服务器的相关服务，关闭防火墙，我们开始进行测试。</p>

<p>测试LVS层</p>

<p>1）首先执行ip a命令，主服务器会存在一个虚拟IP，从服务器不会存在这个虚拟IP。现在浏览网页显示正常。虚拟IP如图所示：</p>

<pre><code>显示集群中服务器ip信息：ipvsadm -ln
查看日志：tail -f /var/log/messages
查看请求转发情况：ipvsadm -lcn | grep 虚拟IP
</code></pre>

<p>2）现在停掉LVS_MASTER的keepAlived服务，看LVS_BACKUP是否可以自动加上虚拟IP地址，并且开始转发请求。</p>

<p>（注意keepAlived的配置文件中有一个网卡设备，虚拟机的网卡设备可能是不一样的，有的是eth0，
有的是eth1，所以也是要改动的，否则从服务器的服务器很有可能服务不正常）
之后你通过命令：ip a去分别查看LVS_MASTER和LVS_BACKUP机器，结果正如预料一样，BACKUP立即接管了MASTER的工作。
切换很快，访问网页：http://192.168.203.107:8080也能正常显示。</p>

<p>3）恢复主服务器的keepAlived服务后，主服务器立刻接替了从服务器的工作，就不做截图了。和第1）个正常效果是一样的。</p>

<p>4）测试WEB服务器，看能否正常提供服务。先断掉WEB1，看下效果。</p>

<p>ipvsadm中的服务器列表，已经去掉了WEB1服务器，访问网页也只能访问到WEB2服务器了。</p>

<p>5）开启WEB1，关掉WEB2。测试正常。</p>

<h2 id="section-4">四、总结</h2>

<p>经过不断的测试，终于完成了这篇稿子，望大家能够指正。还有一点就是很多时候都是配置文件中的一些小毛病造成的，比如：</p>

<ol>
  <li>keepAlived中的通知邮箱好像必须要写，否则不正确；</li>
  <li>keepAlived中的网卡设备要注意，按照服务器的实际情况填写；</li>
  <li>使用时，必要的端口要打开，或者关掉防火墙。否则有事不提供服务；</li>
  <li>一些命令行的执行，少一些参数执行就可能会有一些问题。</li>
  <li>LINUX系统的目录结构也头疼，要不断的熟悉，否则也让你故意弄混了。</li>
</ol>

<p>—————————————————全文完——————————————–</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java8中的lambda表达式]]></title>
    <link href="http://cmback.github.io/blog/20150916/java8-lambda.html"/>
    <updated>2015-09-16T15:42:11+08:00</updated>
    <id>http://cmback.github.io/blog/20150916/java8-lambda</id>
    <content type="html"><![CDATA[<p>2014年3月18日，Oracle终于发布Java8正式版。在新的版本里面加入了很多特性，
总共增加了55个新特性，其中最最吸引人的就是Lambdas表达式和Stream函数式编程，本文详细讲解这两个特性。</p>

<p>其他特性比如日期API，泛型，反射，注解，集合框架，并发，Nashorn引擎等等这里暂时就不详细介绍了。
具体可以参考：<a href="http://openjdk.java.net/projects/jdk8/features">http://openjdk.java.net/projects/jdk8/features</a></p>

<p>昨天参加了Oracle的Java8宣讲活动，有幸目睹了Simon Ritter的风采，写个总结来分享下。</p>

<p><strong>Java并发编程演变：</strong></p>
<style type="text/css">
.mytable {
    border-collapse: collapse;
    border: none;
}
.mytable td {
    border: solid #000 1px;
    padding: 5px;
}
</style>

<table class="mytable">
    <tbody>
    <tr>
    <td>版本</td>
    <td>发布年份</td>
    <td>并发技术</td>
    </tr>
    <tr>
    <td>1.4</td>
    <td>2002</td>
    <td>java.lang.Thread</td>
    </tr>
    <tr>
    <td>5</td>
    <td>2004</td>
    <td>java.util.concurrent(jsr166)</td>
    </tr>
    <tr>
    <td>6</td>
    <td>2006</td>
    <td>Phasers, etc(jsr166)</td>
    </tr>
    <tr>
    <td>7</td>
    <td>2011</td>
    <td>Fork/Join Framework(jsr166y)</td>
    </tr>
    <tr>
    <td>8</td>
    <td>2014</td>
    <td>Project Lambda</td>
    </tr>
    </tbody>
</table>

<p>先来一个小例子见识下Java8的威力！<!--more--></p>

<p><strong>一，传统的外部迭代处理代码：</strong></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">List</span><span class="o">&lt;</span><span class="n">Student</span><span class="o">&gt;</span> <span class="n">students</span> <span class="o">=</span> <span class="o">...</span>
</span><span class="line"><span class="kt">double</span> <span class="n">highestScore</span> <span class="o">=</span> <span class="mf">0.0</span><span class="o">;</span>
</span><span class="line"><span class="k">for</span> <span class="o">(</span><span class="n">Student</span> <span class="n">s</span> <span class="o">:</span> <span class="n">students</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">gradYear</span> <span class="o">==</span> <span class="mi">2011</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">score</span> <span class="o">&gt;</span> <span class="n">highestScore</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">highestScore</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">score</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>传统的外部迭代主要问题：</p>

<ul>
  <li>程序员自己控制迭代，容易出问题！</li>
  <li>顺序执行：迭代从开始到结束一个一个的顺序迭代元素</li>
  <li>线程不安全，由于业务逻辑依靠可修改变量，容易产生竞态问题</li>
</ul>

<p><strong>二，基于Inner Classes的内部迭代：</strong></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">List</span><span class="o">&lt;</span><span class="n">Student</span><span class="o">&gt;</span> <span class="n">students</span> <span class="o">=</span> <span class="o">...</span>
</span><span class="line"><span class="kt">double</span> <span class="n">highestScore</span> <span class="o">=</span> <span class="n">students</span><span class="o">.</span>
</span><span class="line">        <span class="nf">filter</span><span class="o">(</span><span class="k">new</span> <span class="n">Predicate</span><span class="o">&lt;</span><span class="n">Student</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class="line">            <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">op</span><span class="o">(</span><span class="n">Student</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">getGradYear</span><span class="o">()</span> <span class="o">==</span> <span class="mi">2011</span><span class="o">;</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}).</span>
</span><span class="line">        <span class="n">map</span><span class="o">(</span><span class="k">new</span> <span class="n">Mapper</span><span class="o">&lt;</span><span class="n">Student</span><span class="o">,</span><span class="n">Double</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class="line">            <span class="kd">public</span> <span class="n">Double</span> <span class="nf">extract</span><span class="o">(</span><span class="n">Student</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">getScore</span><span class="o">();</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}).</span>
</span><span class="line">        <span class="n">max</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>这种迭代形式已经具备了函数式特征。</p>

<p>优点：</p>

<ul>
  <li>迭代，过滤和累加器由核心库完成</li>
  <li>遍历操作可以并行执行</li>
  <li>遍历可以延迟执行</li>
  <li>线程安全 – 因为客户端的逻辑是无状态的</li>
</ul>

<p>缺点：</p>

<p>代码写的有点难看</p>

<p><strong>三，基于Lambdas的内部迭代：</strong></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">SomeList</span><span class="o">&lt;</span><span class="n">Student</span><span class="o">&gt;</span> <span class="n">students</span> <span class="o">=</span> <span class="o">...</span>
</span><span class="line"><span class="kt">double</span> <span class="n">highestScore</span> <span class="o">=</span> <span class="n">students</span><span class="o">.</span>
</span><span class="line">        <span class="nf">filter</span><span class="o">(</span><span class="n">Student</span> <span class="n">s</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">getGradYear</span><span class="o">()</span> <span class="o">==</span> <span class="mi">2011</span><span class="o">).</span>
</span><span class="line">        <span class="n">map</span><span class="o">(</span><span class="n">Student</span> <span class="n">s</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">getScore</span><span class="o">()).</span>
</span><span class="line">        <span class="n">max</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这种写法可以算是完美了：^_^</p>

<ul>
  <li>可读性很好</li>
  <li>更加抽象化</li>
  <li>简单化后，自然就不容易出现bug了</li>
  <li>不再依赖可变变量</li>
  <li>很容易实现并行化</li>
</ul>

<p>进入正题 ~~</p>

<h3 id="lambda">Lambda篇</h3>

<p>Lambda表达式简单来讲就是匿名函数</p>

<ul>
  <li>就像一个方法一样，它又参数列表，一个返回类型，抛出的异常集和一个执行体</li>
  <li>但是跟方法不同的是，它不跟任何Class关联。</li>
</ul>

<p>也就是说，现在我们在Java的方法调用中不仅仅可以传值，还可以传动作(也就是函数)，这个有点类似于C语言的函数指针的概念了。</p>

<p>Lambda表达式的类型：</p>

<p>在Java中，到处都可以看到只有一个方法的接口，这种接口现在定义为函数式接口，
而Lambda表达式类型就是函数式接口，也就是只有一个方法的接口。</p>

<p>几个函数式接口的例子：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">interface</span> <span class="nc">Comparator</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span> <span class="kt">boolean</span> <span class="nf">compare</span><span class="o">(</span><span class="n">T</span> <span class="n">x</span><span class="o">,</span> <span class="n">T</span> <span class="n">y</span><span class="o">);</span> <span class="o">}</span>
</span><span class="line"><span class="kd">interface</span> <span class="nc">FileFilter</span> <span class="o">{</span> <span class="kt">boolean</span> <span class="nf">accept</span><span class="o">(</span><span class="n">File</span> <span class="n">x</span><span class="o">);</span> <span class="o">}</span>
</span><span class="line"><span class="kd">interface</span> <span class="nc">Runnable</span> <span class="o">{</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">();</span> <span class="o">}</span>
</span><span class="line"><span class="kd">interface</span> <span class="nc">ActionListener</span> <span class="o">{</span> <span class="kt">void</span> <span class="nf">actionPerformed</span><span class="o">(</span><span class="err">…</span><span class="o">);</span> <span class="o">}</span>
</span><span class="line"><span class="kd">interface</span> <span class="nc">Callable</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span> <span class="n">T</span> <span class="nf">call</span><span class="o">();</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>局部变量捕获：</strong></p>

<p>Lambda表达式可以引用上下文中的final等效局部变量。</p>

<p>final等效指的是变量的用法是final的，而不必声明为final，比如变量只赋值一次，那么它就是final等效的。</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kt">void</span> <span class="nf">expire</span><span class="o">(</span><span class="n">File</span> <span class="n">root</span><span class="o">,</span> <span class="kt">long</span> <span class="n">before</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="n">root</span><span class="o">.</span><span class="na">listFiles</span><span class="o">(</span><span class="n">File</span> <span class="n">p</span> <span class="o">-&gt;</span> <span class="n">p</span><span class="o">.</span><span class="na">lastModified</span><span class="o">()</span> <span class="o">&lt;=</span> <span class="n">before</span><span class="o">);</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>this关键字：</strong></p>

<p>Lambda表达式中的this指的是包含这个Lambda的外部对象，而不是Lambda本身。
永远记住，Lambda表达式类型其实就是一个函数式接口。</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">class</span> <span class="nc">SessionManager</span> <span class="o">{</span>
</span><span class="line">    <span class="kt">long</span> <span class="n">before</span> <span class="o">=</span> <span class="o">...;</span>
</span><span class="line">    <span class="kt">void</span> <span class="nf">expire</span><span class="o">(</span><span class="n">File</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="c1">// refers to &#39;this.before&#39;, just like outside the lambda</span>
</span><span class="line">        <span class="n">root</span><span class="o">.</span><span class="na">listFiles</span><span class="o">(</span><span class="n">File</span> <span class="n">p</span> <span class="o">-&gt;</span> <span class="n">checkExpiry</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">lastModified</span><span class="o">(),</span> <span class="k">this</span><span class="o">.</span><span class="na">before</span><span class="o">));</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">    <span class="kt">boolean</span> <span class="nf">checkExpiry</span><span class="o">(</span><span class="kt">long</span> <span class="n">time</span><span class="o">,</span> <span class="kt">long</span> <span class="n">expiry</span><span class="o">)</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><strong>类型推断：</strong></p>

<p>很多情况下，编译器都可以根据目标函数式接口的方法签名来推断参数类型。
在Collections接口中有个sort接口：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">static</span> <span class="n">T</span> <span class="kt">void</span> <span class="nf">sort</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">l</span><span class="o">,</span> <span class="n">Comparator</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="n">T</span><span class="o">&gt;</span> <span class="n">c</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>正常来讲，应该这么写：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">getList</span><span class="o">();</span>
</span><span class="line"><span class="n">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">list</span><span class="o">,</span> <span class="o">(</span><span class="n">String</span> <span class="n">x</span><span class="o">,</span> <span class="n">String</span> <span class="n">y</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">x</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="n">y</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>借助类型推断，可以简化为：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">getList</span><span class="o">();</span>
</span><span class="line"><span class="n">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">list</span><span class="o">,</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">x</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="n">y</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><strong>方法引用：</strong></p>

<p>方法引用可以让我们将一个方法作为一个Lambda表达式重复利用。</p>

<p>比如，java.io.FileFilter作为一个函数式接口，仅有一个方法：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kt">boolean</span> <span class="nf">accept</span><span class="o">(</span><span class="n">File</span> <span class="n">pathname</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>正常的Lambda表达式用法：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">FileFilter</span> <span class="n">x</span> <span class="o">=</span> <span class="n">File</span> <span class="n">f</span> <span class="o">-&gt;</span> <span class="n">f</span><span class="o">.</span><span class="na">canRead</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>通过方法引用，可以简化为：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">FileFilter</span> <span class="n">x</span> <span class="o">=</span> <span class="nl">File:</span><span class="o">:</span><span class="n">canRead</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>方法引用语法格式有以下三种：</p>

<pre><code>objectName::instanceMethod
ClassName::staticMethod
ClassName::instanceMethod
</code></pre>

<p>前两种方式类似，等同于把lambda表达式的参数直接当成instanceMethod|staticMethod的参数来调用。</p>

<p>比如 <code>System.out::println</code> 等同于 <code>x-&gt;System.out.println(x);</code>
<code>Math::max</code>等同于<code>(x, y)-&gt;Math.max(x,y)</code>。</p>

<p>最后一种方式，等同于把lambda表达式的第一个参数当成instanceMethod的目标对象，
其他剩余参数当成该方法的参数。比如<code>String::toLowerCase</code>等同于<code>x-&gt;x.toLowerCase()</code>。</p>

<p><strong>构造器引用：</strong></p>

<p>构造器引用语法如下：<code>ClassName::new</code>，把lambda表达式的参数当成ClassName构造器的参数 。
例如<code>BigDecimal::new</code>等同于<code>x-&gt;new BigDecimal(x)</code>。</p>

<p>和方法引用类似，构造器引用示例：</p>

<p>正常的Lambda表达式的构造器示例：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Factory</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">f</span> <span class="o">=</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="k">return</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>通过构造器引用，可以简化为：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Factory</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">f</span> <span class="o">=</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;::</span><span class="k">new</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>接口扩展：</strong></p>

<p>在Java中，接口是不能随便新增方法的，因为接口中一旦增加方法，那么所以实现类都必须重写。
可以在Interface中使用default关键字来增加一个新的接口方法，并提供一个默认实现。
接口的实现类可以不用管，也可以覆盖这个方法。</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">interface</span> <span class="nc">Collection</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class="line">    <span class="k">default</span> <span class="n">Stream</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span> <span class="nf">stream</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">StreamSupport</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">spliterator</span><span class="o">());</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>还可以使用@FunctionalInterface这个注解来注解函数式接口，如果接口中多于一个抽象方法，编译器肯定报错。</p>

<p>更甚至，在Java8中，在接口中也可以增加静态方法了。</p>

<h3 id="stream">Stream篇</h3>

<p>许多的业务逻辑都需要聚集操作，比如按地区分类获取最优价值产品，按币种分类获取交易量。
之前版本的Java都是通过外部循环来完成这些操作，前面也说过了这种做法的很多弊端。</p>

<p>Java8给出完美解决方案：Lambda表达式+Stream API</p>

<p>Java中对Stream的定义：</p>

<pre><code>A sequence of elements supporting sequential and parallel aggregate operations.
</code></pre>

<p>我们来解读一下上面的那句话：</p>

<pre><code>- Stream是元素的集合，这点让Stream看起来用些类似Iterator；
– 可以支持顺序和并行的对原Stream进行汇聚的操作；
</code></pre>

<p>大家可以把Stream当成一个高级版本的Iterator。原始版本的Iterator，
用户只能一个一个的遍历元素并对其执行某些操作；高级版本的Stream，
用户只要给出需要对其包含的元素执行什么操作，
比如“过滤掉长度大于10的字符串”、“获取每个字符串的首字母”等，
具体这些操作如何应用到每个元素上，就给Stream就好了！（这个秘籍，一般人我不告诉他：））
大家看完这些可能对Stream还没有一个直观的认识，莫急，容我慢慢道来！</p>

<p>先解释下Stream管道：</p>

<p>Stream管道包含三部分，缺一不可：</p>

<ol>
  <li>stream源
    <ul>
      <li>零个或多个中间操作</li>
      <li>一个终止操作，产生一个结果或者一个副作用</li>
    </ul>
  </li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">transactions</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span>
</span><span class="line">        <span class="n">filter</span><span class="o">(</span><span class="n">t</span> <span class="o">-&gt;</span> <span class="n">t</span><span class="o">.</span><span class="na">getBuyer</span><span class="o">().</span><span class="na">getCity</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="err">“</span><span class="n">London</span><span class="err">”</span><span class="o">)).</span>
</span><span class="line">        <span class="n">mapToInt</span><span class="o">(</span><span class="nl">Transaction:</span><span class="o">:</span><span class="n">getPrice</span><span class="o">).</span>
</span><span class="line">        <span class="n">sum</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>transactions.stream() -&gt; stream源</p>

<p>filter/mapToInt -&gt; 中间操作</p>

<p>sum() -&gt; 产生结果</p>

<p>剖析Stream通用语法，再来看一个例子：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="c1">//Lists是Guava中的一个工具类</span>
</span><span class="line"><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">nums</span> <span class="o">=</span> <span class="n">Lists</span><span class="o">.</span><span class="na">newArrayList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="kc">null</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="kc">null</span><span class="o">,</span><span class="mi">6</span><span class="o">);</span>
</span><span class="line"><span class="n">nums</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">filter</span><span class="o">(</span><span class="n">num</span> <span class="o">-&gt;</span> <span class="n">num</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">).</span><span class="na">count</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><img src="http://yidaospace.qiniudn.com/0001.jpg" alt="" /></p>

<p>图片就是对于Stream例子的一个解析，可以很清楚的看见：原本一条语句被三种颜色的框分割成了三个部分。
红色框中的语句是一个Stream的生命开始的地方，负责创建一个Stream实例；
绿色框中的语句是赋予Stream灵魂的地方，把一个Stream转换成另外一个Stream，
红框的语句生成的是一个包含所有nums变量的Stream，进过绿框的filter方法以后，
重新生成了一个过滤掉原nums列表所有null以后的Stream；
蓝色框中的语句是丰收的地方，把Stream的里面包含的内容按照某种算法来汇聚成一个值，
例子中是获取Stream中包含的元素个数。</p>

<p>在此我们总结一下使用Stream的基本步骤：</p>

<ol>
  <li>创建Stream；</li>
  <li>转换Stream，每次转换原有Stream对象不改变，返回一个新的Stream对象（<strong>可以有多次转换</strong>）；</li>
  <li>对Stream进行聚合（Reduce）操作，获取想要的结果；</li>
</ol>

<p><strong>stream源</strong></p>

<p>有很多方式可以产生stream源：</p>

<p>1. 从集合和数组产生：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Collection</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>  <span class="c1">//接口default方法</span>
</span><span class="line"><span class="n">Collection</span><span class="o">.</span><span class="na">parallelStream</span><span class="o">()</span>  <span class="c1">//接口default方法</span>
</span><span class="line"><span class="n">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">T</span> <span class="n">array</span><span class="o">)</span> <span class="n">or</span> <span class="n">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">()</span>  <span class="c1">// 接口default方法或者是静态方法</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>2. 静态工厂方法：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">IntStream</span><span class="o">.</span><span class="na">range</span><span class="o">()</span>
</span><span class="line"><span class="n">Files</span><span class="o">.</span><span class="na">walk</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>3. 使用Stream静态方法来创建Stream源</p>

<p>1) of方法：有两个overload方法，一个接受变长参数，一个接口单一值</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Stream</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">integerStream</span> <span class="o">=</span> <span class="n">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>
</span><span class="line"><span class="n">Stream</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">stringStream</span> <span class="o">=</span> <span class="n">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">&quot;taobao&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>2) generator方法：生成一个无限长度的Stream，
其元素的生成是通过给定的Supplier（这个接口可以看成一个对象的工厂，每次调用返回一个给定类型的对象）</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Stream</span><span class="o">.</span><span class="na">generate</span><span class="o">(</span><span class="k">new</span> <span class="n">Supplier</span><span class="o">&lt;</span><span class="n">Double</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="n">Double</span> <span class="nf">get</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">Math</span><span class="o">.</span><span class="na">random</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">});</span>
</span><span class="line"><span class="n">Stream</span><span class="o">.</span><span class="na">generate</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="n">Math</span><span class="o">.</span><span class="na">random</span><span class="o">());</span>
</span><span class="line"><span class="n">Stream</span><span class="o">.</span><span class="na">generate</span><span class="o">(</span><span class="nl">Math:</span><span class="o">:</span><span class="n">random</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>三条语句的作用都是一样的，只是使用了lambda表达式和方法引用的语法来简化代码。
每条语句其实都是生成一个无限长度的Stream，其中值是随机的。
这个无限长度Stream是懒加载，一般这种无限长度的Stream都会配合Stream的limit()方法来用。</p>

<p>4. iterate方法：也是生成无限长度的Stream</p>

<p>和generator不同的是，其元素的生成是重复对给定的种子值(seed)调用用户指定函数来生成的。
其中包含的元素可以认为是：seed，f(seed),f(f(seed))无限循环</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Stream</span><span class="o">.</span><span class="na">iterate</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">item</span> <span class="o">-&gt;</span> <span class="n">item</span> <span class="o">+</span> <span class="mi">1</span><span class="o">).</span><span class="na">limit</span><span class="o">(</span><span class="mi">10</span><span class="o">).</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>这段代码就是先获取一个无限长度的正整数集合的Stream，然后取出前10个打印。千万记住使用limit方法，不然会无限打印下去。</p>

<p><strong>转换Stream：</strong></p>

<p>转换Stream其实就是把一个Stream通过某些行为转换成一个新的Stream。Stream接口中定义了几个常用的转换方法，下面我们挑选几个常用的转换方法来解释。</p>

<ol>
  <li>distinct: 对于Stream中包含的元素进行去重操作（去重逻辑依赖元素的equals方法），新生成的Stream中没有重复的元素；</li>
  <li>filter: 对于Stream中包含的元素使用给定的过滤函数进行过滤操作，新生成的Stream只包含符合条件的元素；</li>
  <li>map: 对于Stream中包含的元素使用给定的转换函数进行转换操作，新生成的Stream只包含转换生成的元素。
这个方法有三个对于原始类型的变种方法，分别是：mapToInt，mapToLong和mapToDouble。
这三个方法也比较好理解，比如mapToInt就是把原始Stream转换成一个新的Stream，
这个新生成的Stream中的元素都是int类型。之所以会有这样三个变种方法，可以免除自动装箱/拆箱的额外消耗；</li>
  <li>flatMap：和map类似，不同的是其每个元素转换得到的是Stream对象，会把子Stream中的元素压缩到父集合中；</li>
  <li>peek: 生成一个包含原Stream的所有元素的新Stream，同时会提供一个消费函数（Consumer实例），新Stream每个元素被消费的时候都会执行给定的消费函数；</li>
  <li>limit: 对一个Stream进行截断操作，获取其前N个元素，如果原Stream中包含的元素个数小于N，那就获取其所有的元素；</li>
  <li>skip: 返回一个丢弃原Stream的前N个元素后剩下元素组成的新Stream，如果原Stream中包含的元素个数小于N，那么返回空Stream；</li>
</ol>

<p><strong>性能问题</strong></p>

<p>有些细心的同学可能会有这样的疑问：在对于一个Stream进行多次转换操作，每次都对Stream的每个元素进行转换，
而且是执行多次，这样时间复杂度就是一个for循环里把所有操作都做掉的N（转换的次数）倍啊。其实不是这样的，
转换操作都是lazy的，多个转换操作只会在汇聚操作的时候融合起来，一次循环完成。我们可以这样简单的理解，
Stream里有个操作函数的集合，每次转换操作就是把转换函数放入这个集合中，
在汇聚操作的时候循环Stream对应的集合，然后对每个元素执行所有的函数。</p>

<p><strong>聚集（Reduce）Stream</strong></p>

<p>可变汇聚</p>

<p>可变汇聚对应的只有一个方法：collect，正如其名字显示的，它可以把Stream中的要有元素收集到一个结果容器中（比如Collection）。</p>

<p>通用的collect方法的定义（还有其他override方法）：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="o">&lt;</span><span class="n">R</span><span class="o">&gt;</span> <span class="n">R</span> <span class="nf">collect</span><span class="o">(</span><span class="n">Supplier</span><span class="o">&lt;</span><span class="n">R</span><span class="o">&gt;</span> <span class="n">supplier</span><span class="o">,</span>
</span><span class="line">        <span class="n">BiConsumer</span><span class="o">&lt;</span><span class="n">R</span><span class="o">,</span> <span class="o">?</span> <span class="kd">super</span> <span class="n">T</span><span class="o">&gt;</span> <span class="n">accumulator</span><span class="o">,</span>
</span><span class="line">        <span class="n">BiConsumer</span><span class="o">&lt;</span><span class="n">R</span><span class="o">,</span> <span class="n">R</span><span class="o">&gt;</span> <span class="n">combiner</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>先来看看这三个参数的含义：Supplier supplier是一个工厂函数，用来生成一个新的容器；
BiConsumer accumulator也是一个函数，用来把Stream中的元素添加到结果容器中；
BiConsumer combiner还是一个函数，用来把中间状态的多个结果容器合并成为一个（并发的时候会用到）</p>

<p>还有好消息，Java8还给我们提供了Collector的工具类–[Collectors]</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">numsWithoutNull</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">filter</span><span class="o">(</span><span class="n">num</span> <span class="o">-&gt;</span> <span class="n">num</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">).</span>
</span><span class="line">       <span class="n">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>其他汇聚</strong></p>

<p>reduce方法：reduce方法非常的通用，后面介绍的count，sum等都可以使用其实现。
reduce方法有三个override的方法，本文介绍两个最常用的，
先来看reduce方法的第一种形式，其方法定义如下：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Optional</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="nf">reduce</span><span class="o">(</span><span class="n">BinaryOperator</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">accumulator</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>接受一个BinaryOperator类型的参数，在使用的时候我们可以用lambda表达式来。</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">ints</span> <span class="o">=</span> <span class="n">Lists</span><span class="o">.</span><span class="na">newArrayList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="mi">6</span><span class="o">,</span><span class="mi">7</span><span class="o">,</span><span class="mi">8</span><span class="o">,</span><span class="mi">9</span><span class="o">,</span><span class="mi">10</span><span class="o">);</span>
</span><span class="line"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;ints sum is:&quot;</span> <span class="o">+</span> <span class="n">ints</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">reduce</span><span class="o">((</span><span class="n">sum</span><span class="o">,</span> <span class="n">item</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">item</span><span class="o">).</span><span class="na">get</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>可以看到reduce方法接受一个函数，这个函数有两个参数，第一个参数是上次函数执行的返回值（也称为中间结果），
第二个参数是stream中的元素，这个函数把这两个值相加，得到的和会被赋值给下次执行这个函数的第一个参数。</p>

<p>reduce方法还有一个很常用的变种：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">T</span> <span class="nf">reduce</span><span class="o">(</span><span class="n">T</span> <span class="n">identity</span><span class="o">,</span> <span class="n">BinaryOperator</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">accumulator</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>这个定义了初值，不是默认的第一个位初值。</p>

<p>其他参数:</p>

<ul>
  <li>allMatch：是不是Stream中的所有元素都满足给定的匹配条件</li>
  <li>anyMatch：Stream中是否存在任何一个元素满足匹配条件</li>
  <li>findFirst: 返回Stream中的第一个元素，如果Stream为空，返回空Optional</li>
  <li>noneMatch：是不是Stream中的所有元素都不满足给定的匹配条件</li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>max和min：使用给定的比较器（Operator），返回Stream中的最大</td>
          <td>最小值</td>
        </tr>
      </tbody>
    </table>
  </li>
</ul>

<p>其他Tips：</p>

<p>Optional防止空指针异常，考虑一个常见的嵌套调用：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">String</span> <span class="n">version</span> <span class="o">=</span> <span class="n">computer</span><span class="o">.</span><span class="na">getSoundcard</span><span class="o">().</span><span class="na">getUSB</span><span class="o">().</span><span class="na">getVersion</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>在之前的Java中，我们对于空指针需要这么做：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">String</span> <span class="n">version</span> <span class="o">=</span> <span class="s">&quot;UNKNOWN&quot;</span><span class="o">;</span>
</span><span class="line"><span class="k">if</span><span class="o">(</span><span class="n">computer</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
</span><span class="line">    <span class="n">Soundcard</span> <span class="n">soundcard</span> <span class="o">=</span> <span class="n">computer</span><span class="o">.</span><span class="na">getSoundcard</span><span class="o">();</span>
</span><span class="line">    <span class="k">if</span><span class="o">(</span><span class="n">soundcard</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
</span><span class="line">        <span class="n">USB</span> <span class="n">usb</span> <span class="o">=</span> <span class="n">soundcard</span><span class="o">.</span><span class="na">getUSB</span><span class="o">();</span>
</span><span class="line">        <span class="k">if</span><span class="o">(</span><span class="n">usb</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
</span><span class="line">            <span class="n">version</span> <span class="o">=</span> <span class="n">usb</span><span class="o">.</span><span class="na">getVersion</span><span class="o">();</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>很显然，这个种做法太挫了！
Groovy语言里面有个?.的语法可以非常优雅的解决这个问题：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="groovy"><span class="line"><span class="n">String</span> <span class="n">version</span> <span class="o">=</span> <span class="n">computer</span><span class="o">?.</span><span class="na">getSoundcard</span><span class="o">()?.</span><span class="na">getUSB</span><span class="o">()?.</span><span class="na">getVersion</span><span class="o">()</span> <span class="o">?:</span> <span class="s2">&quot;UNKNOWN&quot;</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>当然了，Java8不能示弱啊，所以就有了Optional：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Optional</span> <span class="n">computer</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="n">computer</span><span class="o">);</span>
</span><span class="line"><span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">computer</span><span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">Computer:</span><span class="o">:</span><span class="n">getSoundcard</span><span class="o">)</span>
</span><span class="line">        <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">Soundcard:</span><span class="o">:</span><span class="n">getUSB</span><span class="o">)</span>
</span><span class="line">        <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">USB:</span><span class="o">:</span><span class="n">getVersion</span><span class="o">)</span>
</span><span class="line">        <span class="o">.</span><span class="na">orElse</span><span class="o">(</span><span class="s">&quot;UNKNOWN&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>关于Opational的更多信息，请参考<a href="http://www.oracle.com/technetwork/articles/java/java8-optional-2175753.html">Oracle官网</a></p>

<h3 id="section">结束语</h3>

<ol>
  <li>Java需要lambda表达式和Stream API，充分发挥多核并行的优势，大大提高核心库的运行速度。</li>
  <li>通过default关键字扩展接口来进行接口演变，同时保持向后兼容。</li>
  <li>通过lambda表达式，大大简化了集合类的操作</li>
  <li>Java8同时在语言、虚拟机、核心库方面做了大幅度的改进和优化，使得编程更简单，更快速。</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[centos6上安装Hadoop和HBase]]></title>
    <link href="http://cmback.github.io/blog/20150908/hadoop-hbase.html"/>
    <updated>2015-09-08T14:01:57+08:00</updated>
    <id>http://cmback.github.io/blog/20150908/hadoop-hbase</id>
    <content type="html"><![CDATA[<h3 id="section">安装前的准备</h3>
<p>操作系统：CentOS 6.5 64位</p>

<p>在linux环境安装Hadoop之前，我们需要使用到ssh，所以要先安装ssh，并且创建一个hadoop用户</p>

<p><strong>备注：</strong> 下面所有的命令中，以#开头的表示是root用户，以$开头的是普通用户</p>

<h4 id="ssh">安装SSH</h4>
<p>先切换到root用户，执行下列步骤</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rpm -qa |grep ssh  #检查是否装了SSH包
</span><span class="line">yum install openssh-server  #安装ssh
</span><span class="line">chkconfig --list sshd #检查SSHD是否设置为开机启动
</span><span class="line">chkconfig --level 2345 sshd on  #如果没设置启动就设置下.
</span><span class="line">service sshd restart  #重新启动</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="hadoop--more--">创建hadoop用户<!--more--></h4>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ su
</span><span class="line">password:
</span><span class="line"># useradd hadoop
</span><span class="line"># passwd hadoop
</span><span class="line">New passwd:
</span><span class="line">Retype new passwd</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="pub-key">生成pub-key</h4>
<p>切换到hadoop用户后，执行</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ ssh-keygen -t rsa
</span><span class="line">$ cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys
</span><span class="line">$ chmod 0600 ~/.ssh/authorized_keys</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>然后确认下是否能正常使用ssh连接</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ssh localhost</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="jdk17">安装JDK1.7</h3>

<p>进入oracle官网<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html">http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html</a></p>

<p>下载jdk-7u79-linux-x64.gz，然后执行：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ tar zxf jdk-7u79-linux-x64.gz
</span><span class="line">$ ls
</span><span class="line">jdk1.7.0_79 jdk-7u79-linux-x64.gz
</span><span class="line">$ su
</span><span class="line">password:
</span><span class="line"># mv jdk1.7.0_79 /usr/local/
</span><span class="line"># exit</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>打开~/.bashrc文件，写入JAVA_HOME环境变量</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">export JAVA_HOME=/usr/local/jdk1.7.0_79
</span><span class="line">export PATH= $PATH:$JAVA_HOME/bin</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>保存刷新下：<code>$ source ~/.bashrc</code></p>

<p>切换到root用户，然后执行下面的语句确保JDK版本更改完成</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># alternatives --install /usr/bin/java java /usr/local/jdk1.7.0_79/bin/java 2
</span><span class="line"># alternatives --install /usr/bin/javac javac /usr/local/jdk1.7.0_79/bin/javac 2
</span><span class="line"># alternatives --install /usr/bin/jar jar /usr/local/jdk1.7.0_79/bin/jar 2
</span><span class="line"># alternatives --set java /usr/local/jdk1.7.0_79/bin/java
</span><span class="line"># alternatives --set javac /usr/local/jdk1.7.0_79/bin/javac
</span><span class="line"># alternatives --set jar /usr/local/jdk1.7.0_79/bin/jar</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>最后执行下：<code>java -version</code>看看是不是已经成功安装了JDK7</p>

<h3 id="hadoop">安装配置Hadoop</h3>

<h4 id="hadoophadoop260httpapachefayeacomhadoopcommonstablehadoop-260targz">下载Hadoophadoop2.6.0下载地址：<a href="http://apache.fayea.com/hadoop/common/stable/hadoop-2.6.0.tar.gz">http://apache.fayea.com/hadoop/common/stable/hadoop-2.6.0.tar.gz</a></h4>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ su
</span><span class="line">password:
</span><span class="line"># cd /usr/local
</span><span class="line"># wget http://apache.fayea.com/hadoop/common/stable/hadoop-2.6.0.tar.gz
</span><span class="line"># tar xzf hadoop-2.6.0.tar.gz
</span><span class="line"># mv hadoop-2.6.0 hadoop
</span><span class="line"># exit</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>hadoop有很多种模式，本篇我们演示的是伪分布式模式，包括后面的HBase也选择这种模式。</p>

<h4 id="hadoop-1">配置Hadoop环境</h4>
<p>第一步，配置环境变量</p>

<p>打开~/.bashrc文件，写入如下内容</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">export HADOOP_HOME=/usr/local/hadoop
</span><span class="line">export HADOOP_MAPRED_HOME=$HADOOP_HOME
</span><span class="line">export HADOOP_COMMON_HOME=$HADOOP_HOME
</span><span class="line">export HADOOP_HDFS_HOME=$HADOOP_HOME
</span><span class="line">export YARN_HOME=$HADOOP_HOME
</span><span class="line">export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native
</span><span class="line">export PATH=$PATH:$HADOOP_HOME/sbin:$HADOOP_HOME/bin
</span><span class="line">export HADOOP_INSTALL=$HADOOP_HOME</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>然后应用设置</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ source ~/.bashrc</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>第二步，hadoop配置文件</p>

<p>hadoop的配置文件都放在”$HADOOP_HOME/etc/hadoop”目录中，
你可以根据自己的需要来修改它们。</p>

<p>在此之前，还需要修改下hadoop-env.sh，更改其中的JAVA_HOME变量</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">vim /usr/local/hadoop/etc/hadoop/hadoop-env.sh</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>然后修改JAVA_HOME为真实的目录</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">export JAVA_HOME=/usr/local/jdk1.7.0_79</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>接下来我们去到hadoop的配置文件目录</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ cd $HADOOP_HOME/etc/hadoop</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>1. 首先打开core-site.xml，写入如下配置</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"><span class="nt">&lt;configuration&gt;</span>
</span><span class="line">    <span class="nt">&lt;property&gt;</span>
</span><span class="line">        <span class="nt">&lt;name&gt;</span>hadoop.tmp.dir<span class="nt">&lt;/name&gt;</span>
</span><span class="line">        <span class="nt">&lt;value&gt;</span>/usr/local/hadoop/tmp<span class="nt">&lt;/value&gt;</span>
</span><span class="line">    <span class="nt">&lt;/property&gt;</span>
</span><span class="line">    <span class="nt">&lt;property&gt;</span>
</span><span class="line">        <span class="nt">&lt;name&gt;</span>fs.defaultFS<span class="nt">&lt;/name&gt;</span>
</span><span class="line">        <span class="nt">&lt;value&gt;</span>hdfs://localhost:9000<span class="nt">&lt;/value&gt;</span>
</span><span class="line">    <span class="nt">&lt;/property&gt;</span>
</span><span class="line"><span class="nt">&lt;/configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>2. 然后打开hdfs-site.xml，写入如下配置</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"><span class="nt">&lt;configuration&gt;</span>
</span><span class="line">    <span class="nt">&lt;property&gt;</span>
</span><span class="line">        <span class="nt">&lt;name&gt;</span>dfs.replication<span class="nt">&lt;/name&gt;</span>
</span><span class="line">        <span class="nt">&lt;value&gt;</span>1<span class="nt">&lt;/value&gt;</span>
</span><span class="line">    <span class="nt">&lt;/property&gt;</span>
</span><span class="line">    <span class="nt">&lt;property&gt;</span>
</span><span class="line">        <span class="nt">&lt;name&gt;</span>dfs.name.dir<span class="nt">&lt;/name&gt;</span>
</span><span class="line">        <span class="nt">&lt;value&gt;</span>file:///home/hadoop/hadoopinfra/hdfs/namenode<span class="nt">&lt;/value&gt;</span>
</span><span class="line">    <span class="nt">&lt;/property&gt;</span>
</span><span class="line">    <span class="nt">&lt;property&gt;</span>
</span><span class="line">        <span class="nt">&lt;name&gt;</span>dfs.data.dir<span class="nt">&lt;/name&gt;</span>
</span><span class="line">        <span class="nt">&lt;value&gt;</span>file:///home/hadoop/hadoopinfra/hdfs/datanode<span class="nt">&lt;/value&gt;</span>
</span><span class="line">    <span class="nt">&lt;/property&gt;</span>
</span><span class="line">    <span class="nt">&lt;property&gt;</span>
</span><span class="line">        <span class="nt">&lt;name&gt;</span>dfs.permissions<span class="nt">&lt;/name&gt;</span>
</span><span class="line">        <span class="nt">&lt;value&gt;</span>false<span class="nt">&lt;/value&gt;</span>
</span><span class="line">    <span class="nt">&lt;/property&gt;</span>
</span><span class="line"><span class="nt">&lt;/configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上面的文件夹需要我们手动来创建，那么我们创建下就行了</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line">$ mkdir -p /home/hadoop/hadoopinfra/hdfs/namenode
</span><span class="line">$ mkdir -p /home/hadoop/hadoopinfra/hdfs/datanode
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>3. 然后打开yarn-site.xml文件，写入如下配置</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"><span class="nt">&lt;configuration&gt;</span>
</span><span class="line">    <span class="nt">&lt;property&gt;</span>
</span><span class="line">        <span class="nt">&lt;name&gt;</span>yarn.nodemanager.aux-services<span class="nt">&lt;/name&gt;</span>
</span><span class="line">        <span class="nt">&lt;value&gt;</span>mapreduce_shuffle<span class="nt">&lt;/value&gt;</span>
</span><span class="line">    <span class="nt">&lt;/property&gt;</span>
</span><span class="line">    <span class="nt">&lt;property&gt;</span>
</span><span class="line">        <span class="nt">&lt;name&gt;</span>yarn.resourcemanager.scheduler.address<span class="nt">&lt;/name&gt;</span>
</span><span class="line">        <span class="nt">&lt;value&gt;</span>localhost:54313<span class="nt">&lt;/value&gt;</span>
</span><span class="line">    <span class="nt">&lt;/property&gt;</span>
</span><span class="line"><span class="nt">&lt;/configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>4. 配置mapred-site.xml，先重命名</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line">$ cp mapred-site.xml.template mapred-site.xml
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>打开mapred-site.xml文件，写入如下配置</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"><span class="nt">&lt;configuration&gt;</span>
</span><span class="line">    <span class="nt">&lt;property&gt;</span>
</span><span class="line">        <span class="nt">&lt;name&gt;</span>yarn.nodemanager.aux-services<span class="nt">&lt;/name&gt;</span>
</span><span class="line">        <span class="nt">&lt;value&gt;</span>mapreduce_shuffle<span class="nt">&lt;/value&gt;</span>
</span><span class="line">    <span class="nt">&lt;/property&gt;</span>
</span><span class="line"><span class="nt">&lt;/configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="hadoop-2">确认Hadoop的安装</h4>
<p>1. NameNode确认</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line">$ cd ~
</span><span class="line">$ hdfs namenode -format
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>结果应该类似下面</p>

<pre><code>STARTUP_MSG: Starting NameNode
STARTUP_MSG:   host = centos00/127.0.0.1
STARTUP_MSG:   args = [-format]
STARTUP_MSG:   version = 2.6.0
...
/************************************************************
SHUTDOWN_MSG: Shutting down NameNode at centos00/127.0.0.1
************************************************************/
</code></pre>

<p>2. Hadoop dfs确认</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line">$ start-dfs.sh
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>结果应该类似下面</p>

<pre><code>Starting namenodes on [localhost]
localhost: starting namenode, logging to ....out
localhost: starting datanode, logging to ....out
Starting secondary namenodes [0.0.0.0]
The authenticity of host '0.0.0.0 (0.0.0.0)' can't be established.
RSA key fingerprint is fd:01:fc:f2:53:a0:58:8e:96:9c:5f:f2:6e:5b:69:1a.
Are you sure you want to continue connecting (yes/no)? yes
0.0.0.0: Warning: Permanently added '0.0.0.0' (RSA) to the list of known hosts.
0.0.0.0: starting secondarynamenode, logging to ...
</code></pre>

<p>3. Yarn Srcipt确认</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line">$ start-yarn.sh
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>结果应该类似下面这样</p>

<pre><code>starting yarn daemons
starting resourcemanager, logging to ....out
localhost: starting nodemanager, logging to ....out
</code></pre>

<p>4. 浏览器访问Hadoop</p>

<p>默认访问Hadoop的端口是50070，在浏览器中打开链接<a href="http://localhost:50070">http://localhost:50070</a>来访问Hadoop服务。</p>

<p>5. 浏览器确认应用集群</p>

<p>默认访问应用集群的端口号是8088，在浏览器中打开链接<a href="http://localhost:8088">http://localhost:8088</a>来确认下。</p>

<h3 id="hbase">安装HBase</h3>
<p>你可以在三种模式下安装HBase：单机模式、伪分布式模式、全分布式模式。
下面我们演示在伪分布式模式下HBase的安装和配置。</p>

<h4 id="hbase-1">下载HBase</h4>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line">$ su
</span><span class="line"># cd /usr/local/
</span><span class="line"># wget http://apache.fayea.com/hbase/hbase-0.98.12/hbase-0.98.12-hadoop2-bin.tar.gz
</span><span class="line"># tar -zxvf hbase-0.98.12-hadoop2-bin.tar.gz
</span><span class="line"># mv hbase-0.98.12-hadoop2 hbase
</span><span class="line"># chown -R hadoop:hadoop /usr/local/hbase
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="hbase-sitexml">配置hbase-site.xml</h4>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line">su hadoop
</span><span class="line">$ cd /usr/local/hbase/conf
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>然后打开hbase-env.sh文件，修改如下</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line">export JAVA_HOME=/usr/local/jdk1.7.0_79
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>修改hbase-site.xml文件，如下</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"><span class="nt">&lt;property&gt;</span>
</span><span class="line">    <span class="nt">&lt;name&gt;</span>hbase.rootdir<span class="nt">&lt;/name&gt;</span>
</span><span class="line">    <span class="nt">&lt;value&gt;</span>hdfs://localhost:9000/hbase<span class="nt">&lt;/value&gt;</span>
</span><span class="line"><span class="nt">&lt;/property&gt;</span>
</span><span class="line">
</span><span class="line"><span class="nt">&lt;property&gt;</span>
</span><span class="line">    <span class="nt">&lt;name&gt;</span>hbase.zookeeper.property.dataDir<span class="nt">&lt;/name&gt;</span>
</span><span class="line">    <span class="nt">&lt;value&gt;</span>/home/hadoop/zookeeper<span class="nt">&lt;/value&gt;</span>
</span><span class="line"><span class="nt">&lt;/property&gt;</span>
</span><span class="line">
</span><span class="line"><span class="nt">&lt;property&gt;</span>
</span><span class="line">    <span class="nt">&lt;name&gt;</span>hbase.cluster.distributed<span class="nt">&lt;/name&gt;</span>
</span><span class="line">    <span class="nt">&lt;value&gt;</span>true<span class="nt">&lt;/value&gt;</span>
</span><span class="line"><span class="nt">&lt;/property&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>编辑/etc/profile，增加HBASE_HOME环境变量</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line">export HBASE_HOME=/usr/local/hbase
</span><span class="line">export PATH=$PATH:$HBASE_HOME/bin
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>应用更改。</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line">source /etc/profile
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>OK，现在为止，HBase的安装和配置都已经完成了。</p>

<p>现在你可以通过执行start-hbase.sh来启动HBase</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line">$ cd /usr/local/hbase/bin
</span><span class="line">$ ./start-hbase.sh
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>然后执行<code>jps</code>命令应该可以看到HMaster和HRegionServer这两个进程。类似下面</p>

<pre><code>10941 DataNode
13744 HQuorumPeer
14207 Jps
11126 SecondaryNameNode
11276 ResourceManager
10840 NameNode
13843 HMaster
10016 HRegionServer
11378 NodeManager
</code></pre>

<p>如果没有看到，可以查看日志<code>/usr/local/hbase/logs/hbase-hadoop-master-xx.log</code></p>

<h4 id="hdfshbase">在HDFS中检查HBase目录</h4>
<p>HBase会在HDFS中创建自己的目录，在hadoop目录下面执行：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line">$ ./bin/hadoop fs -ls /hbase
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>显示如下</p>

<pre><code>drwxr-xr-x   - hadoop supergroup          0 2015-04-24 16:06 /hbase/.tmp
drwxr-xr-x   - hadoop supergroup          0 2015-04-24 16:06 /hbase/WALs
drwxr-xr-x   - hadoop supergroup          0 2015-04-24 16:06 /hbase/data
-rw-r--r--   1 hadoop supergroup         42 2015-04-24 16:06 /hbase/hbase.id
-rw-r--r--   1 hadoop supergroup          7 2015-04-24 16:06 /hbase/hbase.version
drwxr-xr-x   - hadoop supergroup          0 2015-04-24 16:06 /hbase/oldWALs
</code></pre>

<p>那么恭喜你，配置成功了！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mqtt消息中间件mosquitto的安装和配置]]></title>
    <link href="http://cmback.github.io/blog/20150817/mosquitto-install.html"/>
    <updated>2015-08-17T16:33:07+08:00</updated>
    <id>http://cmback.github.io/blog/20150817/mosquitto-install</id>
    <content type="html"><![CDATA[<h3 id="wiki">Wiki</h3>
<p>Mosquitto是一个开源(BSD许可证)的消息代理，实现MQTT(消息队列遥测传输)协议版本3.1.1。</p>

<p>MQTT（MQ Telemetry Transport），消息队列遥测传输协议，轻量级的发布/订阅协议，
适用于一些条件比较苛刻的环境，进行低带宽、不可靠或间歇性的通信。目前已经是物联网消息通信事实上的标准协议了。</p>

<p>值得一提的是mqtt提供三种不同质量的消息服务：</p>

<ul>
  <li>“至多一次”：消息发布完全依赖底层 TCP/IP 网络。会发生消息丢失或重复。这一级别可用于如下情况，环境传感器数据，丢失一次读记录无所谓，因为不久后还会有第二次发送。</li>
  <li>“至少一次”：确保消息到达，但消息重复可能会发生。</li>
  <li>“只有一次”：确保消息到达一次。这一级别可用于如下情况，在计费系统中，消息重复或丢失会导致不正确的结果。</li>
</ul>

<h3 id="httpmosquittoorgdownload">安装：(参考官网 <a href="http://mosquitto.org/download/">http://mosquitto.org/download/</a>)</h3>

<p>服务器操作系统为CentOS6.4，使用最简单的yum安装</p>

<p>1，先加入yum源：</p>

<p>在<code>/etc/yum.repos.d/</code>目录中新建一个<code>mosquitto.repo</code>文件，里面写入：<!--more--></p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">[home_oojah_mqtt]
</span><span class="line">name=mqtt (CentOS_CentOS-6)
</span><span class="line">type=rpm-md
</span><span class="line">baseurl=http://download.opensuse.org/repositories/home:/oojah:/mqtt/CentOS_CentOS-6/
</span><span class="line">gpgcheck=1
</span><span class="line">gpgkey=http://download.opensuse.org/repositories/home:/oojah:/mqtt/CentOS_CentOS-6/repodata/repomd.xml.key
</span><span class="line">enabled=1</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>2，开始安装</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">sudo yum search all mosquitto
</span><span class="line">sudo yum install mosquitto mosquitto-clients libmosquitto-devel libmosquittopp-devel python-mosquitto
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>3，配置</p>

<p>安装完成之后，所有配置文件会被放置于/etc/mosquitto/目录下，
其中最重要的就是Mosquitto的配置文件，即mosquitto.conf，以下是详细的配置参数说明。</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
<span class="line-number">115</span>
<span class="line-number">116</span>
<span class="line-number">117</span>
<span class="line-number">118</span>
<span class="line-number">119</span>
<span class="line-number">120</span>
<span class="line-number">121</span>
<span class="line-number">122</span>
<span class="line-number">123</span>
<span class="line-number">124</span>
<span class="line-number">125</span>
<span class="line-number">126</span>
<span class="line-number">127</span>
<span class="line-number">128</span>
<span class="line-number">129</span>
<span class="line-number">130</span>
<span class="line-number">131</span>
<span class="line-number">132</span>
<span class="line-number">133</span>
<span class="line-number">134</span>
<span class="line-number">135</span>
<span class="line-number">136</span>
<span class="line-number">137</span>
<span class="line-number">138</span>
<span class="line-number">139</span>
<span class="line-number">140</span>
<span class="line-number">141</span>
<span class="line-number">142</span>
<span class="line-number">143</span>
<span class="line-number">144</span>
<span class="line-number">145</span>
<span class="line-number">146</span>
<span class="line-number">147</span>
<span class="line-number">148</span>
<span class="line-number">149</span>
<span class="line-number">150</span>
<span class="line-number">151</span>
<span class="line-number">152</span>
<span class="line-number">153</span>
<span class="line-number">154</span>
<span class="line-number">155</span>
<span class="line-number">156</span>
<span class="line-number">157</span>
<span class="line-number">158</span>
<span class="line-number">159</span>
<span class="line-number">160</span>
<span class="line-number">161</span>
<span class="line-number">162</span>
<span class="line-number">163</span>
<span class="line-number">164</span>
<span class="line-number">165</span>
<span class="line-number">166</span>
<span class="line-number">167</span>
<span class="line-number">168</span>
<span class="line-number">169</span>
<span class="line-number">170</span>
<span class="line-number">171</span>
<span class="line-number">172</span>
<span class="line-number">173</span>
<span class="line-number">174</span>
<span class="line-number">175</span>
<span class="line-number">176</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># =================================================================</span>
</span><span class="line"><span class="c"># General configuration</span>
</span><span class="line"><span class="c"># =================================================================</span>
</span><span class="line">
</span><span class="line"><span class="c"># 客户端心跳的间隔时间</span>
</span><span class="line"><span class="c">#retry_interval 20</span>
</span><span class="line">
</span><span class="line"><span class="c"># 系统状态的刷新时间</span>
</span><span class="line"><span class="c">#sys_interval 10</span>
</span><span class="line">
</span><span class="line"><span class="c"># 系统资源的回收时间，0表示尽快处理</span>
</span><span class="line"><span class="c">#store_clean_interval 10</span>
</span><span class="line">
</span><span class="line"><span class="c"># 服务进程的PID</span>
</span><span class="line"><span class="c">#pid_file /var/run/mosquitto.pid</span>
</span><span class="line">
</span><span class="line"><span class="c"># 服务进程的系统用户</span>
</span><span class="line"><span class="c">#user mosquitto</span>
</span><span class="line">
</span><span class="line"><span class="c"># 客户端心跳消息的最大并发数</span>
</span><span class="line"><span class="c">#max_inflight_messages 10</span>
</span><span class="line">
</span><span class="line"><span class="c"># 客户端心跳消息缓存队列</span>
</span><span class="line"><span class="c">#max_queued_messages 100</span>
</span><span class="line">
</span><span class="line"><span class="c"># 用于设置客户端长连接的过期时间，默认永不过期</span>
</span><span class="line"><span class="c">#persistent_client_expiration</span>
</span><span class="line">
</span><span class="line"><span class="c"># =================================================================</span>
</span><span class="line"><span class="c"># Default listener</span>
</span><span class="line"><span class="c"># =================================================================</span>
</span><span class="line">
</span><span class="line"><span class="c"># 服务绑定的IP地址</span>
</span><span class="line"><span class="c">#bind_address</span>
</span><span class="line">
</span><span class="line"><span class="c"># 服务绑定的端口号</span>
</span><span class="line"><span class="c">#port 1883</span>
</span><span class="line">
</span><span class="line"><span class="c"># 允许的最大连接数，-1表示没有限制</span>
</span><span class="line"><span class="c">#max_connections -1</span>
</span><span class="line">
</span><span class="line"><span class="c"># cafile：CA证书文件</span>
</span><span class="line"><span class="c"># capath：CA证书目录</span>
</span><span class="line"><span class="c"># certfile：PEM证书文件</span>
</span><span class="line"><span class="c"># keyfile：PEM密钥文件</span>
</span><span class="line"><span class="c">#cafile</span>
</span><span class="line"><span class="c">#capath</span>
</span><span class="line"><span class="c">#certfile</span>
</span><span class="line"><span class="c">#keyfile</span>
</span><span class="line">
</span><span class="line"><span class="c"># 必须提供证书以保证数据安全性</span>
</span><span class="line"><span class="c">#require_certificate false</span>
</span><span class="line">
</span><span class="line"><span class="c"># 若require_certificate值为true，use_identity_as_username也必须为true</span>
</span><span class="line"><span class="c">#use_identity_as_username false</span>
</span><span class="line">
</span><span class="line"><span class="c"># 启用PSK（Pre-shared-key）支持</span>
</span><span class="line"><span class="c">#psk_hint</span>
</span><span class="line">
</span><span class="line"><span class="c"># SSL/TSL加密算法，可以使用“openssl ciphers”命令获取</span>
</span><span class="line"><span class="c"># as the output of that command.</span>
</span><span class="line"><span class="c">#ciphers</span>
</span><span class="line">
</span><span class="line"><span class="c"># =================================================================</span>
</span><span class="line"><span class="c"># Persistence</span>
</span><span class="line"><span class="c"># =================================================================</span>
</span><span class="line">
</span><span class="line"><span class="c"># 消息自动保存的间隔时间</span>
</span><span class="line"><span class="c">#autosave_interval 1800</span>
</span><span class="line">
</span><span class="line"><span class="c"># 消息自动保存功能的开关</span>
</span><span class="line"><span class="c">#autosave_on_changes false</span>
</span><span class="line">
</span><span class="line"><span class="c"># 持久化功能的开关</span>
</span><span class="line">persistence <span class="nb">true</span>
</span><span class="line">
</span><span class="line"><span class="c"># 持久化DB文件</span>
</span><span class="line"><span class="c">#persistence_file mosquitto.db</span>
</span><span class="line">
</span><span class="line"><span class="c"># 持久化DB文件目录</span>
</span><span class="line"><span class="c">#persistence_location /var/lib/mosquitto/</span>
</span><span class="line">
</span><span class="line"><span class="c"># =================================================================</span>
</span><span class="line"><span class="c"># Logging</span>
</span><span class="line"><span class="c"># =================================================================</span>
</span><span class="line">
</span><span class="line"><span class="c"># 4种日志模式：stdout、stderr、syslog、topic</span>
</span><span class="line"><span class="c"># none 则表示不记日志，此配置可以提升些许性能</span>
</span><span class="line">log_dest none
</span><span class="line">
</span><span class="line"><span class="c"># 选择日志的级别（可设置多项）</span>
</span><span class="line"><span class="c">#log_type error</span>
</span><span class="line"><span class="c">#log_type warning</span>
</span><span class="line"><span class="c">#log_type notice</span>
</span><span class="line"><span class="c">#log_type information</span>
</span><span class="line">
</span><span class="line"><span class="c"># 是否记录客户端连接信息</span>
</span><span class="line"><span class="c">#connection_messages true</span>
</span><span class="line">
</span><span class="line"><span class="c"># 是否记录日志时间</span>
</span><span class="line"><span class="c">#log_timestamp true</span>
</span><span class="line">
</span><span class="line"><span class="c"># =================================================================</span>
</span><span class="line"><span class="c"># Security</span>
</span><span class="line"><span class="c"># =================================================================</span>
</span><span class="line">
</span><span class="line"><span class="c"># 客户端ID的前缀限制，可用于保证安全性</span>
</span><span class="line"><span class="c">#clientid_prefixes</span>
</span><span class="line">
</span><span class="line"><span class="c"># 允许匿名用户</span>
</span><span class="line"><span class="c">#allow_anonymous true</span>
</span><span class="line">
</span><span class="line"><span class="c"># 用户/密码文件，默认格式：username:password</span>
</span><span class="line"><span class="c">#password_file</span>
</span><span class="line">
</span><span class="line"><span class="c"># PSK格式密码文件，默认格式：identity:key</span>
</span><span class="line"><span class="c">#psk_file</span>
</span><span class="line">
</span><span class="line"><span class="c"># pattern write sensor/%u/data</span>
</span><span class="line"><span class="c"># ACL权限配置，常用语法如下：</span>
</span><span class="line"><span class="c"># 用户限制：user &lt;username&gt;</span>
</span><span class="line"><span class="c"># 话题限制：topic [read|write] &lt;topic&gt;</span>
</span><span class="line"><span class="c"># 正则限制：pattern write sensor/%u/data</span>
</span><span class="line"><span class="c">#acl_file</span>
</span><span class="line">
</span><span class="line"><span class="c"># =================================================================</span>
</span><span class="line"><span class="c"># Bridges</span>
</span><span class="line"><span class="c"># =================================================================</span>
</span><span class="line">
</span><span class="line"><span class="c"># 允许服务之间使用“桥接”模式（可用于分布式部署）</span>
</span><span class="line"><span class="c">#connection &lt;name&gt;</span>
</span><span class="line"><span class="c">#address &lt;host&gt;[:&lt;port&gt;]</span>
</span><span class="line"><span class="c">#topic &lt;topic&gt; [[[out | in | both] qos-level] local-prefix remote-prefix]</span>
</span><span class="line">
</span><span class="line"><span class="c"># 设置桥接的客户端ID</span>
</span><span class="line"><span class="c">#clientid</span>
</span><span class="line">
</span><span class="line"><span class="c"># 桥接断开时，是否清除远程服务器中的消息</span>
</span><span class="line"><span class="c">#cleansession false</span>
</span><span class="line">
</span><span class="line"><span class="c"># 是否发布桥接的状态信息</span>
</span><span class="line"><span class="c">#notifications true</span>
</span><span class="line">
</span><span class="line"><span class="c"># 设置桥接模式下，消息将会发布到的话题地址</span>
</span><span class="line"><span class="c"># $SYS/broker/connection/&lt;clientid&gt;/state</span>
</span><span class="line"><span class="c">#notification_topic</span>
</span><span class="line">
</span><span class="line"><span class="c"># 设置桥接的keepalive数值</span>
</span><span class="line"><span class="c">#keepalive_interval 60</span>
</span><span class="line">
</span><span class="line"><span class="c"># 桥接模式，目前有三种：automatic、lazy、once</span>
</span><span class="line"><span class="c">#start_type automatic</span>
</span><span class="line">
</span><span class="line"><span class="c"># 桥接模式automatic的超时时间</span>
</span><span class="line"><span class="c">#restart_timeout 30</span>
</span><span class="line">
</span><span class="line"><span class="c"># 桥接模式lazy的超时时间</span>
</span><span class="line"><span class="c">#idle_timeout 60</span>
</span><span class="line">
</span><span class="line"><span class="c"># 桥接客户端的用户名</span>
</span><span class="line"><span class="c">#username</span>
</span><span class="line">
</span><span class="line"><span class="c"># 桥接客户端的密码</span>
</span><span class="line"><span class="c">#password</span>
</span><span class="line">
</span><span class="line"><span class="c"># bridge_cafile：桥接客户端的CA证书文件</span>
</span><span class="line"><span class="c"># bridge_capath：桥接客户端的CA证书目录</span>
</span><span class="line"><span class="c"># bridge_certfile：桥接客户端的PEM证书文件</span>
</span><span class="line"><span class="c"># bridge_keyfile：桥接客户端的PEM密钥文件</span>
</span><span class="line"><span class="c">#bridge_cafile</span>
</span><span class="line"><span class="c">#bridge_capath</span>
</span><span class="line"><span class="c">#bridge_certfile</span>
</span><span class="line"><span class="c">#bridge_keyfile</span>
</span><span class="line">
</span><span class="line"><span class="c"># 自己的配置可以放到以下目录中</span>
</span><span class="line">include_dir /etc/mosquitto/conf.d
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>4，启动服务，两种方式</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">mosquitto -c /etc/mosquitto/mosquitto.conf -d
</span><span class="line">sudo /etc/init.d/mosquitto start
</span></code></pre></td></tr></table></div></figure></notextile></div>

<hr />

<h3 id="section">演示部分：</h3>
<p>前面已经开启了服务，如果没有请参考前面步骤。</p>

<p>一、开启另一个终端窗口，运行订阅程序mosquitto_sub:</p>

<p><em>注意</em>：</p>

<p>消息推送的发布和订阅要有主题，选项[-t] 主题，即：mosquitto -t 主题</p>

<p>如需指定用户名称则加选项[-i] 用户名，即：mosquitto_sub -t 主题 -i 订阅端</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">mosquitto_sub -t mqtt
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>二、开启另一个终端窗口，运行发布程序mosquitto_pub:</p>

<p>指定消息推送的主题，发布端用户名和消息：</p>

<p><code>mosquitto_pub -t 主题 -i 发布端 -h 主机 -m 你好</code></p>

<p>*注意：如果消息中间有空格则消息要用引号括起来。</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">mosquitto_pub -t 主题 -i 发布端 -h host -m <span class="s1">&#39;我是发布端，你好。&#39;</span>
</span><span class="line">mosquitto_pub -h localhost -t mqtt -m <span class="s2">&quot;hello world.&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这时候前面那个订阅窗口就可以收到”hello world”的消息了。</p>

<p>演示成功！！！</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[yaml入门笔记]]></title>
    <link href="http://cmback.github.io/blog/20150810/yaml-introduce.html"/>
    <updated>2015-08-10T13:53:45+08:00</updated>
    <id>http://cmback.github.io/blog/20150810/yaml-introduce</id>
    <content type="html"><![CDATA[<p><strong>Wiki：</strong></p>

<p>YAML（IPA: /ˈjæməl/，尾音类似camel骆驼）是一个可读性高，用来表达资料序列的格式。
YAML参考了其他多种语言，包括：XML、C语言、Python、Perl以及电子邮件格式RFC2822。
Clark Evans在2001年在首次发表了这种语言[1] ，
另外Ingy döt Net与Oren Ben-Kiki也是这语言的共同设计者。
目前已经有数种编程语言或脚本语言支援（或者说解析）这种语言。</p>

<p>YAML是”YAML Ain’t a Markup Language”（YAML不是一种置标语言）的递回缩写。
在开发的这种语言时，YAML 的意思其实是：”Yet Another Markup Language”（仍是一种置标语言），
但为了强调这种语言以数据做为中心，而不是以置标语言为重点，而用返璞词重新命名。</p>

<p>最新版本为1.2，官方说明地址： <a href="http://www.yaml.org/spec/1.2/spec.html">http://www.yaml.org/spec/1.2/spec.html</a></p>

<p>使用方式：作为配置文件，数据交换格式，序列化对象存储，测试数据文件，</p>

<p>一个简单的示例：<!--more--></p>

<pre><code>---
receipt:     Oz-Ware Purchase Invoice
date:        2007-08-06
customer:
    given:   Dorothy
    family:  Gale

items:
    - part_no:   A4786
      descrip:   Water Bucket (Filled)
      price:     1.47
      quantity:  4

    - part_no:   E1628
      descrip:   High Heeled "Ruby" Slippers
      price:     100.27
      quantity:  1

bill-to:  &amp;id001
    street: |
            123 Tornado Alley
            Suite 16
    city:   East Westville
    state:  KS

ship-to:  *id001

specialDelivery:  &gt;
    Follow the Yellow Brick
    Road to the Emerald City.
    Pay no attention to the
    man behind the curtain.
...
</code></pre>

<p><strong>基本技巧：</strong></p>

<p>1，列表</p>

<p>使用- 表示，也就是用短杠+空白字符作为起始。</p>

<p>另外还有一种内置格式（inline format）可以选择──用方括号围住，并用逗号+空白区隔（类似JSON的语法）。
比如：shopping: [milk, pumpkin pie, eggs, juice]</p>

<p>2，映射</p>

<pre><code>— # 區塊形式
person:
name: John Smith
age: 33
— # 內置形式
person: {name: John Smith, age: 33}
</code></pre>

<p>3，重复元素</p>

<p>使用&amp;id001先标记，然后后面用*id001指针引用</p>

<pre><code># &amp; 的作用，它表示一个“锚点标记”，其它节点可以使用“*”或“&lt;&lt;: *”来引用它的值
node3: &amp;node3
  a: 001
  b: 002

# * 的作用，指node4的内容与node3完全一致
node4:
  *node3

# &lt;&lt;: * 的作用，指node5的内容包含但不完全相同于node3的值。
node5:
  &lt;&lt;: *node3
  c: 003

#眼部雷射手術之標準程序
---
- step:  &amp;amp;id001                    #定義錨點標籤 &amp;amp;id001
    instrument:      Lasik 2000
    pulseEnergy:     5.4
    pulseDuration:   12
    repetition:      1000
    spotSize:        1mm

- step:
     &amp;lt;&amp;lt;: *id001                  # 合併鍵值：使用在錨點標籤定義的內容
     spotSize:       2mm               # 覆寫"spotSize"鍵值

- step:
     &amp;lt;&amp;lt;: *id001                  # 合併鍵值：使用在錨點標籤定義的內容
     pulseEnergy:    500.0             # 覆寫鍵值
     alert: &amp;gt;                       # 加入其他鍵值
           warn patient of
           audible pop
</code></pre>

<p>4，需要换行书写的字符串，两种方式：</p>

<p>再次强调，字串不需要包在引号之内。</p>

<p>保存新行(Newlines preserved)</p>

<pre><code>poetry: |                                  #譯者注：這是一首著名的五行民謠
  There once was a man from Darjeeling     #這裡曾有一個人來自大吉嶺
  Who got on a bus bound for Ealing        #他搭上一班往伊靈的公車
      It said on the door                  #門上這麼說的
      "Please don't spit on the floor"     #"請勿在地上吐痰"
  So he carefully spat on the ceiling      #所以他小心翼翼的吐在天花板上
</code></pre>

<p>根据设定，前方的引领空白符号（leading white space）必须对齐，以便和其他资料或是行为（如范例中的缩排）明显区分。</p>

<p>折叠新行(Newlines folded)</p>

<pre><code>Wrapped text         #摺疊的文字
will be folded       #將會被收
into a single        #進單一一個
paragraph            #段落

Blank lines denote   #空白的行代表
paragraph breaks     #段落之間的區隔
</code></pre>

<p>和保存新行不同的是，换行字元会被转换成空白字符，空行被转换成换行，而前导空白字符则会被自动消去。上面会变成两行。</p>

<p>5，混合使用：</p>

<p>在列表中使用映射</p>

<pre><code>- {name: John Smith, age: 33}
- name: Mary Smith
  age: 27
</code></pre>

<p>在映射中使用列表</p>

<pre><code>men: [John Smith, Bill Jones]
women:
  - Mary Smith
  - Susan Williams
</code></pre>

<p><strong>更多资源：</strong></p>

<p><a href="http://www.yaml.org/">http://www.yaml.org/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用PyInstaller打包Python程序]]></title>
    <link href="http://cmback.github.io/blog/20150723/pyinstaller.html"/>
    <updated>2015-07-23T10:22:26+08:00</updated>
    <id>http://cmback.github.io/blog/20150723/pyinstaller</id>
    <content type="html"><![CDATA[<h3 id="pyinstaller">PyInstaller介绍：</h3>
<p>PyInstaller是一个能将Python程序转换成单个可执行文件的程序，
操作系统支持Windows, Linux, Mac OS X, Solaris和AIX。并且很多包都支持开箱即用，不依赖环境。</p>

<p>环境为windows7操作系统，python2.7.8 virtual environment</p>

<p>官网：<a href="https://github.com/pyinstaller/pyinstaller">https://github.com/pyinstaller/pyinstaller</a></p>

<h3 id="section">详细步骤：</h3>
<p>1. win7下面先安装这个依赖：pywin32，下载下来后切换到venv2.7，然后使用easy_install xxx.exe安装</p>

<p>2. pip安装PyInstaller：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">pip install pyinstaller</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>3. 打包过程中可能会出现msvcp90.dll找不到的问题，
去<a href="http://cn.dll-files.com/msvcp90.dll.html">http://cn.dll-files.com/msvcp90.dll.html</a>下载第三个zip文件，
解压后放到C:\Windows\System32，如果是64位的还要放到C:\Windows\SysWOW64目录下。<!--more--></p>

<p>4. 再次运行报MSVCR90.dll找不到，同理去<a href="http://cn.dll-files.com/MSVCR90.dll.html">http://cn.dll-files.com/MSVCR90.dll.html</a>下载MSVCR90.dll，
放到C:\Windows\System32和C:\Windows\SysWOW64中。</p>

<p>5. 将你的整个程序先复制到某个临时文件夹下面，比如D:\tmp\core-wxpython，此目录下有个main.py是执行入口</p>

<p>6. 执行build命令，并添加必要的搜索路径，外加执行文件的图标：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cd D:\tmp\core-wxpython
</span><span class="line">pyinstaller -F -w -i d:\tmp\main.ico main.py</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>如果还想添加自定义的依赖库，就要加上-p参数：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">pyinstaller -F -w -p D:\tmp\core-python\libs -i d:\tmp\main.ico main.py</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>参数说明：</p>

<pre><code>-F 表示生成单个可执行文件
-w 表示去掉控制台窗口，这在GUI界面时非常有用。不过如果是命令行程序的话那就把这个选项删除吧！
-p 表示你自己自定义需要加载的类路径，一般情况下用不到
-i 表示可执行文件的图标
</code></pre>

<p><em>注意的事情</em></p>

<p>1). 检查生成的\XXX\build\pyi.win32\XXX\warnXXX.txt(XXX是你的项目名）中，
是否缺少了必要的模块。如果有缺少的，那么去如上所述，添加必要的搜素路径，
使得pyinstaller在运行时，可以找到对应的模块并集成进来。</p>

<p>2). 此处我这里没有UPX，暂时没去折腾。估计是用UPX去压缩，压缩后所生成的exe文件的大小，会小得多。</p>

<p>7. 如果发现报错：pywintypes.error: (193, ‘LoadLibraryEx’… )
原因是添加图标后缀必须是xxx.ico才行，重新去网上下载一个ico格式的图片，再次运行就好了。</p>

<p>8. 我测试了一个使用wxpython写的gui程序，源码里面引用了一张图片，
使用wx.Image(os.path.abspath(<strong>file</strong>/me.jpg), wx.BITMAP_TYPE_JPEG)来加载，
然后打包成exe后发现找不到图片了，报错。</p>

<p>解决办法：</p>

<p>第一步，在程序中将资源文件都放到一个单独的文件夹中，比如项目根目录下面的resources</p>

<p>第二步，修改程序中引用这些资源文件比如图片的代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">resource_path</span><span class="p">(</span><span class="n">relative_path</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot;定义一个读取相对路径的函数&quot;&quot;&quot;</span>
</span><span class="line">    <span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">sys</span><span class="p">,</span> <span class="s">&quot;_MEIPASS&quot;</span><span class="p">):</span>
</span><span class="line">        <span class="n">base_path</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">_MEIPASS</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span>
</span><span class="line">        <span class="n">base_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">abspath</span><span class="p">(</span><span class="s">&quot;.&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">base_path</span><span class="p">,</span> <span class="n">relative_path</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>然后每次在获取图片的时候，这么引用它的目录：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">img</span> <span class="o">=</span> <span class="n">wx</span><span class="o">.</span><span class="n">Image</span><span class="p">(</span><span class="n">resource_path</span><span class="p">(</span><span class="s">&#39;resources/me.jpg&#39;</span><span class="p">),</span> <span class="n">wx</span><span class="o">.</span><span class="n">BITMAP_TYPE_JPEG</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>第三步，先运行第6步生成一个main.spec文件</p>

<p>第四步，修改main.spec文件：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># -*- mode: python -*-</span>
</span><span class="line"><span class="n">a</span> <span class="o">=</span> <span class="n">Analysis</span><span class="p">([</span><span class="s">&#39;main.py&#39;</span><span class="p">],</span>
</span><span class="line">             <span class="n">pathex</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;d:</span><span class="se">\\</span><span class="s">tmp</span><span class="se">\\</span><span class="s">core-wxpython&#39;</span><span class="p">],</span>
</span><span class="line">             <span class="n">hiddenimports</span><span class="o">=</span><span class="p">[],</span>
</span><span class="line">             <span class="n">hookspath</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
</span><span class="line">             <span class="n">runtime_hooks</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>
</span><span class="line"><span class="n">pyz</span> <span class="o">=</span> <span class="n">PYZ</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">pure</span><span class="p">)</span>
</span><span class="line"><span class="n">exe</span> <span class="o">=</span> <span class="n">EXE</span><span class="p">(</span><span class="n">pyz</span><span class="p">,</span>
</span><span class="line">          <span class="n">a</span><span class="o">.</span><span class="n">scripts</span><span class="p">,</span>
</span><span class="line">          <span class="n">a</span><span class="o">.</span><span class="n">binaries</span><span class="p">,</span>
</span><span class="line">          <span class="n">a</span><span class="o">.</span><span class="n">zipfiles</span><span class="p">,</span>
</span><span class="line">          <span class="n">a</span><span class="o">.</span><span class="n">datas</span><span class="p">,</span>
</span><span class="line">          <span class="p">[(</span><span class="s">&#39;</span><span class="se">\\</span><span class="s">resources</span><span class="se">\\</span><span class="s">me.jpg&#39;</span><span class="p">,</span><span class="s">&#39;D:</span><span class="se">\\</span><span class="s">tmp</span><span class="se">\\</span><span class="s">core-wxpython</span><span class="se">\\</span><span class="s">resources</span><span class="se">\\</span><span class="s">me.jpg&#39;</span><span class="p">,</span><span class="s">&#39;DATA&#39;</span><span class="p">)],</span>
</span><span class="line">          <span class="n">name</span><span class="o">=</span><span class="s">&#39;main.exe&#39;</span><span class="p">,</span>
</span><span class="line">          <span class="n">debug</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
</span><span class="line">          <span class="n">strip</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
</span><span class="line">          <span class="n">upx</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
</span><span class="line">          <span class="n">console</span><span class="o">=</span><span class="bp">True</span> <span class="p">,</span> <span class="n">icon</span><span class="o">=</span><span class="s">&#39;d:</span><span class="se">\\</span><span class="s">tmp</span><span class="se">\\</span><span class="s">main.ico&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>注意：我在a.datas下面添加了那行配置，具体的路径自己去修改下。</p>

<p>上面是添加单个文件，如果有多个文件，可以一个个的添加。不过如果文件多了话，那么就使用下面的方法：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># -*- mode: python -*-</span>
</span><span class="line"><span class="n">a</span> <span class="o">=</span> <span class="n">Analysis</span><span class="p">([</span><span class="s">&#39;main.py&#39;</span><span class="p">],</span>
</span><span class="line">             <span class="n">pathex</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;d:</span><span class="se">\\</span><span class="s">tmp</span><span class="se">\\</span><span class="s">core-wxpython&#39;</span><span class="p">],</span>
</span><span class="line">             <span class="n">hiddenimports</span><span class="o">=</span><span class="p">[],</span>
</span><span class="line">             <span class="n">hookspath</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
</span><span class="line">             <span class="n">runtime_hooks</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">extra_datas</span><span class="p">(</span><span class="n">mydir</span><span class="p">):</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">rec_glob</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">files</span><span class="p">):</span>
</span><span class="line">        <span class="kn">import</span> <span class="nn">os</span>
</span><span class="line">        <span class="kn">import</span> <span class="nn">glob</span>
</span><span class="line">        <span class="k">for</span> <span class="n">d</span> <span class="ow">in</span> <span class="n">glob</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
</span><span class="line">            <span class="k">if</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">isfile</span><span class="p">(</span><span class="n">d</span><span class="p">):</span>
</span><span class="line">                <span class="n">files</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
</span><span class="line">            <span class="n">rec_glob</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%s</span><span class="s">/*&quot;</span> <span class="o">%</span> <span class="n">d</span><span class="p">,</span> <span class="n">files</span><span class="p">)</span>
</span><span class="line">    <span class="n">files</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">    <span class="n">rec_glob</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%s</span><span class="s">/*&quot;</span> <span class="o">%</span> <span class="n">mydir</span><span class="p">,</span> <span class="n">files</span><span class="p">)</span>
</span><span class="line">    <span class="n">extra_datas</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">    <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
</span><span class="line">        <span class="n">extra_datas</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">f</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="s">&#39;DATA&#39;</span><span class="p">))</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="n">extra_datas</span>
</span><span class="line">
</span><span class="line"><span class="c"># append the &#39;resources&#39; dir</span>
</span><span class="line"><span class="n">a</span><span class="o">.</span><span class="n">datas</span> <span class="o">+=</span> <span class="n">extra_datas</span><span class="p">(</span><span class="s">&#39;resources&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">pyz</span> <span class="o">=</span> <span class="n">PYZ</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">pure</span><span class="p">)</span>
</span><span class="line"><span class="n">exe</span> <span class="o">=</span> <span class="n">EXE</span><span class="p">(</span><span class="n">pyz</span><span class="p">,</span>
</span><span class="line">          <span class="n">a</span><span class="o">.</span><span class="n">scripts</span><span class="p">,</span>
</span><span class="line">          <span class="n">a</span><span class="o">.</span><span class="n">binaries</span><span class="p">,</span>
</span><span class="line">          <span class="n">a</span><span class="o">.</span><span class="n">zipfiles</span><span class="p">,</span>
</span><span class="line">          <span class="n">a</span><span class="o">.</span><span class="n">datas</span><span class="p">,</span>
</span><span class="line">          <span class="n">name</span><span class="o">=</span><span class="s">&#39;main.exe&#39;</span><span class="p">,</span>
</span><span class="line">          <span class="n">debug</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
</span><span class="line">          <span class="n">strip</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
</span><span class="line">          <span class="n">upx</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
</span><span class="line">          <span class="n">console</span><span class="o">=</span><span class="bp">True</span> <span class="p">,</span> <span class="n">icon</span><span class="o">=</span><span class="s">&#39;d:</span><span class="se">\\</span><span class="s">tmp</span><span class="se">\\</span><span class="s">main.ico&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>它会把某个指定的文件下的所有文件递归的添加到最终的包中。省去很多事情！</p>

<p>第五步，执行：pyinstaller D:\tmp\core-wxpython\main.spec</p>

<p>然后就大功告成了！！！在dist目录下面有个main.exe单独的可执行文件，打开它吧。^_^</p>

<p>如果在执行过程中出错，或者双击打开没任何反应。
可以先去掉-w参数后，在控制台窗口打开这个可执行文件，会输出详细出错信息去调试。</p>

<h3 id="section-1">其他问题记录</h3>
<p>1. 找不到pkg_resources</p>

<pre><code>ImportError: No module named pkg_resources
</code></pre>

<p>解决办法是在安装pycrypto之前，先安装distribute库</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">curl</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">svn</span><span class="o">.</span><span class="n">apache</span><span class="o">.</span><span class="n">org</span><span class="o">/</span><span class="n">repos</span><span class="o">/</span><span class="n">asf</span><span class="o">/</span><span class="n">oodt</span><span class="o">/</span><span class="n">tools</span><span class="o">/</span><span class="n">oodtsite</span><span class="o">.</span><span class="n">publisher</span><span class="o">/</span><span class="n">trunk</span><span class="o">/</span><span class="n">distribute_setup</span><span class="o">.</span><span class="n">py</span> <span class="o">|</span> <span class="n">python</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>然后再安装windows下面对应的pycrypto库</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># http://www.voidspace.org.uk/python/modules.shtml#pycrypto</span>
</span><span class="line"><span class="n">easy_install</span> <span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">www</span><span class="o">.</span><span class="n">voidspace</span><span class="o">.</span><span class="n">org</span><span class="o">.</span><span class="n">uk</span><span class="o">/</span><span class="n">downloads</span><span class="o">/</span><span class="n">pycrypto26</span><span class="o">/</span><span class="n">pycrypto</span><span class="o">-</span><span class="mf">2.6</span><span class="o">.</span><span class="n">win</span><span class="o">-</span><span class="n">amd64</span><span class="o">-</span><span class="n">py2</span><span class="o">.</span><span class="mf">7.</span><span class="n">exe</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>2. 打包时加上-w选项去掉console时出错</p>

<p>不要在程序中使用任何print语句，或者是你将stdout重定向到一个日志、文件或任何其他非控制台地方。</p>

<p>最好的方法是利用日志功能，将输出定向到日志文件中去，在main函数开头添加如下代码：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">import</span> <span class="nn">logging</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">tempfile</span>
</span><span class="line"><span class="n">logging</span><span class="o">.</span><span class="n">basicConfig</span><span class="p">(</span><span class="n">level</span><span class="o">=</span><span class="n">logging</span><span class="o">.</span><span class="n">INFO</span><span class="p">,</span>
</span><span class="line">                    <span class="n">filename</span><span class="o">=</span><span class="n">tempfile</span><span class="o">.</span><span class="n">TemporaryFile</span><span class="p">()</span><span class="o">.</span><span class="n">name</span><span class="p">,</span>
</span><span class="line">                    <span class="n">format</span><span class="o">=</span><span class="s">&#39;</span><span class="si">%(asctime)s</span><span class="s"> </span><span class="si">%(message)s</span><span class="s">&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>用到logging的时候，需要配置日志到文件中，而不是console：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">import</span> <span class="nn">logging</span>
</span><span class="line"><span class="n">_LOGGING</span> <span class="o">=</span> <span class="n">logging</span><span class="o">.</span><span class="n">getLogger</span><span class="p">(</span><span class="n">__file__</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>3. pyinstaller用one file方式打包的程式如果有用到subprocess.Popen會有問題</p>

<p>问题参考：<a href="http://www.pyinstaller.org/ticket/597">http://www.pyinstaller.org/ticket/597</a></p>

<p>最後找到的方法是
<a href="http://code.activestate.com/recipes/578300-python-subprocess-hide-console-on-windows/">http://code.activestate.com/recipes/578300-python-subprocess-hide-console-on-windows/</a></p>

<p>建立一個隐藏窗口，就正常了~</p>

<p>最后用pyinstaller設one folder &amp; no console打包都不跳出小窗口了</p>

<p>解决办法就是自定义一个subprocess_call函数来代替subprocess的call调用，不适用Popen了：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">subprocess_call</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class="line">    <span class="c"># also works for Popen. It creates a new *hidden* window,</span>
</span><span class="line">    <span class="c"># so it will work in frozen apps (.exe).</span>
</span><span class="line">    <span class="k">if</span> <span class="n">IS_WIN32</span><span class="p">:</span>
</span><span class="line">        <span class="n">_LOGGING</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s">&#39;subprocess_call==IS_WIN32&#39;</span><span class="p">)</span>
</span><span class="line">        <span class="n">startupinfo</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">STARTUPINFO</span><span class="p">()</span>
</span><span class="line">        <span class="n">startupinfo</span><span class="o">.</span><span class="n">dwFlags</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">CREATE_NEW_CONSOLE</span> <span class="o">|</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">STARTF_USESHOWWINDOW</span>
</span><span class="line">        <span class="n">startupinfo</span><span class="o">.</span><span class="n">wShowWindow</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">SW_HIDE</span>
</span><span class="line">        <span class="n">kwargs</span><span class="p">[</span><span class="s">&#39;startupinfo&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">startupinfo</span>
</span><span class="line">    <span class="n">retcode</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="n">retcode</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>调用方法：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">exresult</span> <span class="o">=</span> <span class="n">subprocess_call</span><span class="p">(</span><span class="n">exe_command</span><span class="p">,</span> <span class="n">shell</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>这个方法会等命令执行完成，返回值为0表示正常结束！</p>

<p>4. 打包后不能放到中文路径下执行
解决办法是下载安装PyInstaller的中文支持库，安装后再重新执行pyinstaller打包命令：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">git</span> <span class="n">clone</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">dkw72n</span><span class="o">/</span><span class="n">pyinstaller</span><span class="o">.</span><span class="n">git</span>
</span><span class="line"><span class="n">python</span> <span class="n">setup</span><span class="o">.</span><span class="n">py</span> <span class="n">install</span>
</span><span class="line"><span class="n">pyinstaller</span> <span class="o">-</span><span class="n">F</span> <span class="o">-</span><span class="n">w</span> <span class="o">-</span><span class="n">i</span> <span class="n">d</span><span class="p">:</span>\<span class="n">tmp</span>\<span class="n">main</span><span class="o">.</span><span class="n">ico</span> <span class="n">main</span><span class="o">.</span><span class="n">py</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fastjson对Date的处理]]></title>
    <link href="http://cmback.github.io/blog/20150722/fastjson-date.html"/>
    <updated>2015-07-22T13:45:15+08:00</updated>
    <id>http://cmback.github.io/blog/20150722/fastjson-date</id>
    <content type="html"><![CDATA[<p><strong>fastjson对日期的序列化方式：</strong></p>

<p>一种方法是通过注解</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="nd">@JSONField</span> <span class="o">(</span><span class="n">format</span><span class="o">=</span><span class="s">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="o">)</span>
</span><span class="line"><span class="kd">public</span> <span class="n">Date</span> <span class="n">birthday</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>另一种是通过SerializeConfig：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">private</span> <span class="kd">static</span> <span class="n">SerializeConfig</span> <span class="n">mapping</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">SerializeConfig</span><span class="o">();</span>
</span><span class="line"><span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">dateFormat</span><span class="o">;</span>
</span><span class="line"><span class="kd">static</span> <span class="o">{</span>
</span><span class="line">    <span class="n">dateFormat</span> <span class="o">=</span> <span class="s">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="o">;</span>
</span><span class="line">    <span class="n">mapping</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">Date</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="nf">SimpleDateFormatSerializer</span><span class="o">(</span><span class="n">dateFormat</span><span class="o">));</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>json字符串中使用单引号：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">String</span> <span class="n">text</span> <span class="o">=</span> <span class="n">JSON</span><span class="o">.</span><span class="na">toJSONString</span><span class="o">(</span><span class="n">object</span><span class="o">,</span> <span class="n">SerializerFeature</span><span class="o">.</span><span class="na">UseSingleQuotes</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<!--more-->
<p>字段显示不同的key：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
</span><span class="line">    <span class="nd">@JSONField</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;ID&quot;</span><span class="o">)</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="o">...;</span>
</span><span class="line"><span class="n">JSON</span><span class="o">.</span><span class="na">toJSONString</span><span class="o">(</span><span class="n">user</span><span class="o">);</span> <span class="c1">// {&quot;ID&quot;:001}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>类的反序列化 JavaBean：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">String</span> <span class="n">text</span> <span class="o">=</span> <span class="o">...;</span> <span class="c1">// {&quot;r&quot;:255,&quot;g&quot;:0,&quot;b&quot;:0,&quot;alpha&quot;:255}</span>
</span><span class="line"><span class="n">Color</span> <span class="n">color</span> <span class="o">=</span> <span class="n">JSON</span><span class="o">.</span><span class="na">parseObject</span><span class="o">(</span><span class="n">text</span><span class="o">,</span> <span class="n">Color</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>数组：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">String</span> <span class="n">text</span> <span class="o">=</span> <span class="o">...;</span> <span class="c1">// [{ ... }, { ... }]</span>
</span><span class="line"><span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="n">users</span> <span class="o">=</span> <span class="n">JSON</span><span class="o">.</span><span class="na">parseArray</span><span class="o">(</span><span class="n">text</span><span class="o">,</span> <span class="n">User</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>泛型：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">String</span> <span class="n">text</span> <span class="o">=</span> <span class="o">...;</span> <span class="c1">// {&quot;name&quot;:{&quot;name&quot;:&quot;ljw&quot;,age:18}}</span>
</span><span class="line"><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">User</span><span class="o">&gt;</span> <span class="n">userMap</span> <span class="o">=</span> <span class="n">JSON</span><span class="o">.</span><span class="na">parseObject</span><span class="o">(</span><span class="n">text</span><span class="o">,</span> <span class="k">new</span> <span class="n">TypeReference</span><span class="o">&lt;</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">User</span><span class="o">&gt;&gt;()</span> <span class="o">{});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>自定义序列化代码示例:</strong></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JsonUtil</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">SerializeConfig</span> <span class="n">mapping</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">SerializeConfig</span><span class="o">();</span>
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">dateFormat</span><span class="o">;</span>
</span><span class="line">    <span class="kd">static</span> <span class="o">{</span>
</span><span class="line">        <span class="n">dateFormat</span> <span class="o">=</span> <span class="s">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * 默认的处理时间</span>
</span><span class="line"><span class="cm">     *</span>
</span><span class="line"><span class="cm">     * @param jsonText</span>
</span><span class="line"><span class="cm">     * @return</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">toJSON</span><span class="o">(</span><span class="n">Object</span> <span class="n">jsonText</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">JSON</span><span class="o">.</span><span class="na">toJSONString</span><span class="o">(</span><span class="n">jsonText</span><span class="o">,</span>
</span><span class="line">                <span class="n">SerializerFeature</span><span class="o">.</span><span class="na">WriteDateUseDateFormat</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * 自定义时间格式</span>
</span><span class="line"><span class="cm">     *</span>
</span><span class="line"><span class="cm">     * @param jsonText</span>
</span><span class="line"><span class="cm">     * @return</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">toJSON</span><span class="o">(</span><span class="n">String</span> <span class="n">dateFormat</span><span class="o">,</span> <span class="n">String</span> <span class="n">jsonText</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">mapping</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">Date</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="k">new</span> <span class="nf">SimpleDateFormatSerializer</span><span class="o">(</span><span class="n">dateFormat</span><span class="o">));</span>
</span><span class="line">        <span class="k">return</span> <span class="n">JSON</span><span class="o">.</span><span class="na">toJSONString</span><span class="o">(</span><span class="n">jsonText</span><span class="o">,</span> <span class="n">mapping</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>自定义日期格式反序列化示例</strong></p>

<p>先自定义一个日期解析类：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyDateFormatDeserializer</span> <span class="kd">extends</span> <span class="n">DateFormatDeserializer</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">        <span class="kd">private</span> <span class="n">String</span> <span class="n">myFormat</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">        <span class="kd">public</span> <span class="nf">MyDateFormatDeserializer</span><span class="o">(</span><span class="n">String</span> <span class="n">myFormat</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="kd">super</span><span class="o">();</span>
</span><span class="line">            <span class="k">this</span><span class="o">.</span><span class="na">myFormat</span> <span class="o">=</span> <span class="n">myFormat</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="nd">@Override</span>
</span><span class="line">        <span class="kd">protected</span> <span class="o">&lt;</span><span class="n">Date</span><span class="o">&gt;</span> <span class="n">Date</span> <span class="nf">cast</span><span class="o">(</span><span class="n">DefaultJSONParser</span> <span class="n">parser</span><span class="o">,</span> <span class="n">Type</span> <span class="n">clazz</span><span class="o">,</span> <span class="n">Object</span> <span class="n">fieldName</span><span class="o">,</span> <span class="n">Object</span> <span class="n">val</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">myFormat</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">val</span> <span class="k">instanceof</span> <span class="n">String</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="n">String</span> <span class="n">strVal</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">val</span><span class="o">;</span>
</span><span class="line">                <span class="k">if</span> <span class="o">(</span><span class="n">strVal</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">
</span><span class="line">                <span class="k">try</span> <span class="o">{</span>
</span><span class="line">                    <span class="k">return</span> <span class="o">(</span><span class="n">Date</span><span class="o">)</span> <span class="k">new</span> <span class="nf">SimpleDateFormat</span><span class="o">(</span><span class="n">myFormat</span><span class="o">).</span><span class="na">parse</span><span class="o">((</span><span class="n">String</span><span class="o">)</span><span class="n">val</span><span class="o">);</span>
</span><span class="line">                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ParseException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                    <span class="k">throw</span> <span class="k">new</span> <span class="nf">JSONException</span><span class="o">(</span><span class="s">&quot;parse error&quot;</span><span class="o">);</span>
</span><span class="line">                <span class="o">}</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">            <span class="k">throw</span> <span class="k">new</span> <span class="nf">JSONException</span><span class="o">(</span><span class="s">&quot;parse error&quot;</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>User类</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">int</span> <span class="n">height</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@JSONField</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;com-google-com&quot;</span><span class="o">)</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@JSONField</span><span class="o">(</span><span class="n">format</span> <span class="o">=</span> <span class="s">&quot;yyyy-MM/dd HH:mm:ss&quot;</span><span class="o">)</span>
</span><span class="line">    <span class="kd">public</span> <span class="n">Date</span> <span class="n">birthday</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>测试下：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * @param args</span>
</span><span class="line"><span class="cm"> * @throws IOException</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">ParseException</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="n">String</span> <span class="n">json</span> <span class="o">=</span> <span class="s">&quot;{\&quot;name\&quot;:\&quot;22323\&quot;, \&quot;age\&quot;: 1234,&quot;</span> <span class="o">+</span>
</span><span class="line">            <span class="s">&quot; \&quot;birthday\&quot;: \&quot;2012-12/12 12:12:12\&quot;}&quot;</span><span class="o">;</span>
</span><span class="line">    <span class="n">Test</span> <span class="n">t</span> <span class="o">=</span> <span class="n">JSON</span><span class="o">.</span><span class="na">parseObject</span><span class="o">(</span><span class="n">json</span><span class="o">,</span> <span class="n">Test</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">mapping</span><span class="o">,</span>
</span><span class="line">            <span class="n">JSON</span><span class="o">.</span><span class="na">DEFAULT_PARSER_FEATURE</span><span class="o">,</span> <span class="k">new</span> <span class="n">Feature</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
</span><span class="line">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="na">name</span><span class="o">);</span>
</span><span class="line">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="na">height</span><span class="o">);</span>
</span><span class="line">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="na">birthday</span><span class="o">);</span>
</span><span class="line">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span>
</span><span class="line">            <span class="k">new</span> <span class="nf">SimpleDateFormat</span><span class="o">(</span><span class="s">&quot;yyyy-MM/dd HH:mm:ss&quot;</span><span class="o">).</span><span class="na">parse</span><span class="o">(</span><span class="s">&quot;2012-12/12 12:12:12&quot;</span><span class="o">));</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>总结：</strong></p>

<p>对于JSONField注解，好像只对序列号的格式有影响，反序列化不管这个，不知道为什么，
只能自己写个解析类了，不过这样就更灵活了，可以在里面写很多处理逻辑，
比如json字符串里面日期格式并不是标准格式的时候，就可以先转成标准格式再去解析了。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[快速排序和二分查找]]></title>
    <link href="http://cmback.github.io/blog/20150625/sort-search.html"/>
    <updated>2015-06-25T12:48:25+08:00</updated>
    <id>http://cmback.github.io/blog/20150625/sort-search</id>
    <content type="html"><![CDATA[<h3 id="section">快速排序算法和二分搜索算法：</h3>

<p>算法主要分为排序算法、搜索算法、图算法。图算法我用得不多，没有发言权，本文就不说了。</p>

<p>排序算法中最快的是快速排序算法，搜索算法中最快的是二分搜索算法。我也最喜欢这2 个算法。
因为它们是使用递归实现的，代码简洁清晰，效率又非常高。</p>

<p>根据我的理解，算法的本质就是数学。根据输入和设定的目标，采用有限的步骤实现输出。通常，使用计算机实现的算法，都会用到循环，这样才能发挥计算机高速运算的优势。</p>

<p>循环和递归是等效的，这已经被科学家所证明。数学上没有循环，只有递归的概念，因此使用递归代替循环表示算法有很多好处：</p>

<ol>
  <li>递归的代码要比循环简洁很多，也优雅很多。</li>
  <li>递归的代码可以用数学方式建模，可以从数学角度验证其正确性。</li>
</ol>

<p>很多函数式语言甚至没有循环的概念和关键字，强迫你使用递归来实现循环。如，ErLang 。
递归也有一些缺点，递归使用栈来保存函数地址和参数、返回值，而栈是有一定大小的，过多的递归调用可能会造成栈溢出。但是，递归算法会容易转变为循环。我更欣赏递归的简洁，除非真的出现栈溢出的问题，我是不会使用循环的。</p>

<p><br />
<strong>二分搜索算法</strong></p>

<p>理论：</p>

<p>二分搜索算法用于针对已排序的集合进行搜索。</p>

<p>它的原理是：</p>

<ol>
  <li>找到排序数组的中间元素，如果它匹配目标值，那么就返回它在数组中的索引。</li>
  <li>如果没有找到，那么判断中间值比目标值大还是小，
如果中间值比目标值大，那么就对第一个元素到middle-1 的元素递归这个过程。
如果中间值比目标值小，那么就对middle+1 到最后一个元素。</li>
  <li>如果结束的索引小于开始的索引，返回-1 ，表示没有找到。</li>
  <li>如果子集合有2 个元素，那么各自比较。因为Java 的整数除法会舍弃小数，如果数组只有2 个元素，那么middle 值一直都是第一个元素。</li>
</ol>

<p>经过上述的递归过程，最终将返回匹配元素的索引，或者是-1 ，表示找不到。<!--more--></p>

<p>二分搜索算法之所以速度快，是因为它每次可以把数组切分成两半，每次递归调用都能去除一半数据，而不用匹配每一个数据。下面是代码，逻辑清楚，代码简单。</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * @param array</span>
</span><span class="line"><span class="cm"> * @param start</span>
</span><span class="line"><span class="cm"> * @param end</span>
</span><span class="line"><span class="cm"> *            这是最后一个元素的索引，第一次调用应该是array.length - 1</span>
</span><span class="line"><span class="cm"> * @param value</span>
</span><span class="line"><span class="cm"> * @return</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">binarySearch</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">array</span><span class="o">,</span> <span class="kt">int</span> <span class="n">start</span><span class="o">,</span> <span class="kt">int</span> <span class="n">end</span><span class="o">,</span> <span class="kt">int</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">middle</span> <span class="o">=</span> <span class="o">(</span><span class="n">start</span> <span class="o">+</span> <span class="n">end</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">end</span> <span class="o">&lt;</span> <span class="n">start</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">end</span> <span class="o">==</span> <span class="o">(</span><span class="n">start</span> <span class="o">+</span> <span class="mi">1</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="n">start</span><span class="o">]</span> <span class="o">==</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">return</span> <span class="n">start</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="n">end</span><span class="o">]</span> <span class="o">==</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">return</span> <span class="n">end</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="n">middle</span><span class="o">]</span> <span class="o">==</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">middle</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">value</span> <span class="o">&gt;</span> <span class="n">array</span><span class="o">[</span><span class="n">middle</span><span class="o">])</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="nf">binarySearch</span><span class="o">(</span><span class="n">array</span><span class="o">,</span> <span class="n">middle</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">end</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">value</span> <span class="o">&lt;</span> <span class="n">array</span><span class="o">[</span><span class="n">middle</span><span class="o">])</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="nf">binarySearch</span><span class="o">(</span><span class="n">array</span><span class="o">,</span> <span class="n">start</span><span class="o">,</span> <span class="n">middle</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>上述代码稍加改变，就可以排序任意类型。如使用泛型，然后加上对Comparable 接口的实现即可。</p>

<p><br />
<strong>快速排序算法</strong></p>

<p>二分搜索算法确实非常快，但是它只能用于已排序数组。如果数组未排序呢，该怎么办呢？简单，先用快速排序算法进行排序，然后再用二分搜索进行搜索。</p>

<p>先排序再搜索，要比匹配每一个元素快得多。搜索引擎，数据库索引也都使用了对数据集合的排序技术，这样搜索数据才会快速。</p>

<p>最慢，也是最容易想到的排序算法是插入排序算法：</p>

<ol>
  <li>遍历数组，找出最小的元素，把它放到第一个元素。</li>
  <li>循环查找未排序的数组，直到整个数组排序。</li>
</ol>

<p>这需要2 个嵌套的循环，意味着它的效率是O(n^2);</p>

<p>之所以插入排序的效率如此之地，是因为要找出整个数组中最小的数据，需要遍历整个数组的元素。</p>

<p>而插入排序聪明就聪明在它不查找整个数组最小、次小… 的元素，而是每次仅仅把小于某个元素的值移到一边，通过迭代最终自动实现排序。这就大大节约了排序所需的计算步骤。</p>

<p><strong>快速排序算法理论：</strong></p>

<ol>
  <li>如果S 中的元素个数是0 或者1 ，那么返回。</li>
  <li>选取S 中的任一元素v ，称为中心点。</li>
  <li>将S 集合中的元素分为2 个部分：L={ 小于pivot 的元素+ pivot } 和R={ 大于或者等于pivot 的元素} 。</li>
  <li>返回L 和R 。</li>
</ol>

<p>我们使用Java 使用的是就地排序的方式，因此不需要返回值。
因为Java 是一种可以修改变量的语言，用函数式语言的术语来说，就是有“副作用”。我们利用这个副作用直接修改作为参数的Array ，不需要返回值</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * 快速排序，有副作用 从小到大</span>
</span><span class="line"><span class="cm"> *</span>
</span><span class="line"><span class="cm"> * @param array</span>
</span><span class="line"><span class="cm"> * @param start</span>
</span><span class="line"><span class="cm"> * @param end</span>
</span><span class="line"><span class="cm"> *            这是最后一个元素的索引，第一次调用应该是array.length - 1</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">quickSort</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">array</span><span class="o">,</span> <span class="kt">int</span> <span class="n">start</span><span class="o">,</span> <span class="kt">int</span> <span class="n">end</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="c1">// 有可能造成start&gt;end 因为递归调用时j+1 ，可能引起j 比end 还大1 。 </span>
</span><span class="line">            <span class="c1">// 另外如果数组是空的，或者输入错误也会出现这种情况</span>
</span><span class="line">    <span class="k">if</span> <span class="o">(</span><span class="n">end</span> <span class="o">&lt;=</span> <span class="n">start</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">        <span class="c1">// 取中间元素为中心点，然后移到最右边</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">sign</span> <span class="o">=</span> <span class="o">(</span><span class="n">start</span> <span class="o">+</span> <span class="n">end</span><span class="o">)</span> <span class="o">/</span> <span class="mi">2</span><span class="o">;</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">array</span><span class="o">[</span><span class="n">end</span><span class="o">];</span>
</span><span class="line">        <span class="n">array</span><span class="o">[</span><span class="n">end</span><span class="o">]</span> <span class="o">=</span> <span class="n">array</span><span class="o">[</span><span class="n">sign</span><span class="o">];</span>
</span><span class="line">        <span class="n">array</span><span class="o">[</span><span class="n">sign</span><span class="o">]</span> <span class="o">=</span> <span class="n">tmp</span><span class="o">;</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">start</span><span class="o">;</span>
</span><span class="line">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">start</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">end</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class="line">            <span class="c1">// 小于的元素和标记互换，等于的不能互换，否则会形成死循环</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">array</span><span class="o">[</span><span class="n">end</span><span class="o">])</span> <span class="o">{</span>
</span><span class="line">                <span class="n">tmp</span> <span class="o">=</span> <span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span><span class="line">                <span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">array</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
</span><span class="line">                <span class="n">array</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">tmp</span><span class="o">;</span>
</span><span class="line">                <span class="n">j</span> <span class="o">=</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="c1">// 把标记元素和第一个&gt;= 它的元素位置互换</span>
</span><span class="line">                    <span class="c1">// 这样数组就分成2 个部分，一个部分比中心值小，一个部分比中心值大。</span>
</span><span class="line">        <span class="n">tmp</span> <span class="o">=</span> <span class="n">array</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
</span><span class="line">        <span class="n">array</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">array</span><span class="o">[</span><span class="n">end</span><span class="o">];</span>
</span><span class="line">        <span class="n">array</span><span class="o">[</span><span class="n">end</span><span class="o">]</span> <span class="o">=</span> <span class="n">tmp</span><span class="o">;</span>
</span><span class="line">        <span class="n">quickSort</span><span class="o">(</span><span class="n">array</span><span class="o">,</span> <span class="n">start</span><span class="o">,</span> <span class="n">j</span><span class="o">);</span>
</span><span class="line">        <span class="n">quickSort</span><span class="o">(</span><span class="n">array</span><span class="o">,</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">end</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><br />
<strong>最后总结：</strong></p>

<ul>
  <li>Java 的Arrays 类也使用快速排序算法进行排序。但它的代码写得像天书一样。</li>
  <li>提高快速排序算法执行效率的主要方法是对中心点进行检测，希望选中的中心点有更大的概率是整个数组的中值。</li>
  <li>我的实现中简单的选择数组中间的值作为中心点，一般来说这样的选择效率还是不错的。</li>
  <li>注意上面的一项实现技术，我们使用把中心数据元素移到数组最后的方式实现了数组的就地比较。这是比较常用的技术，把数据移到数组的最前面或者最后面，方便比较数据。</li>
  <li>另外，我的Java 快速排序代码使用了“副作用”，而在纯函数式语言，如Haskell,ErLang 中是没有“副作用”的，也就是说变量不可以重新赋值。此时就需要返回值，每次都创建新的子数组。但函数式语言的数组处理功能很强，也会做很多性能优化，因此函数式语言实现快速排序代码更加简单，没有“副作用”，也更加数学化。</li>
  <li>JDK使用二分搜索和快速排序算法实现搜索和排序，足见上述两个算法的性能优势。</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用xmemcached客户端]]></title>
    <link href="http://cmback.github.io/blog/20150619/xmemecached.html"/>
    <updated>2015-06-19T16:36:41+08:00</updated>
    <id>http://cmback.github.io/blog/20150619/xmemecached</id>
    <content type="html"><![CDATA[<p>Xmemcached是基于java nio实现的高性能可扩展的memcached客户端。它的主要特点：</p>

<ol>
  <li>高性能，稳定可靠，已经在众多公司的众多项目里得到应用。</li>
  <li>功能完备：客户端分布式、权重、最新最完整的协议支持。</li>
  <li>可扩展，易于集成</li>
  <li>可动态增删memached节点</li>
  <li>客户端操作统计</li>
  <li>NIO连接池</li>
</ol>

<p>等等，更多信息请见wiki文档。废话不多讲，先上代码：<!--more--></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
<span class="line-number">114</span>
<span class="line-number">115</span>
<span class="line-number">116</span>
<span class="line-number">117</span>
<span class="line-number">118</span>
<span class="line-number">119</span>
<span class="line-number">120</span>
<span class="line-number">121</span>
<span class="line-number">122</span>
<span class="line-number">123</span>
<span class="line-number">124</span>
<span class="line-number">125</span>
<span class="line-number">126</span>
<span class="line-number">127</span>
<span class="line-number">128</span>
<span class="line-number">129</span>
<span class="line-number">130</span>
<span class="line-number">131</span>
<span class="line-number">132</span>
<span class="line-number">133</span>
<span class="line-number">134</span>
<span class="line-number">135</span>
<span class="line-number">136</span>
<span class="line-number">137</span>
<span class="line-number">138</span>
<span class="line-number">139</span>
<span class="line-number">140</span>
<span class="line-number">141</span>
<span class="line-number">142</span>
<span class="line-number">143</span>
<span class="line-number">144</span>
<span class="line-number">145</span>
<span class="line-number">146</span>
<span class="line-number">147</span>
<span class="line-number">148</span>
<span class="line-number">149</span>
<span class="line-number">150</span>
<span class="line-number">151</span>
<span class="line-number">152</span>
<span class="line-number">153</span>
<span class="line-number">154</span>
<span class="line-number">155</span>
<span class="line-number">156</span>
<span class="line-number">157</span>
<span class="line-number">158</span>
<span class="line-number">159</span>
<span class="line-number">160</span>
<span class="line-number">161</span>
<span class="line-number">162</span>
<span class="line-number">163</span>
<span class="line-number">164</span>
<span class="line-number">165</span>
<span class="line-number">166</span>
<span class="line-number">167</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kn">package</span> <span class="n">xmemcache</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">java.util.concurrent.TimeoutException</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="kn">import</span> <span class="nn">net.rubyeye.xmemcached.Counter</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">net.rubyeye.xmemcached.GetsResponse</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">net.rubyeye.xmemcached.MemcachedClient</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">net.rubyeye.xmemcached.MemcachedClientBuilder</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">net.rubyeye.xmemcached.XMemcachedClientBuilder</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">net.rubyeye.xmemcached.auth.AuthInfo</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">net.rubyeye.xmemcached.command.BinaryCommandFactory</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">net.rubyeye.xmemcached.exception.MemcachedException</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">net.rubyeye.xmemcached.transcoders.StringTranscoder</span><span class="o">;</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">net.rubyeye.xmemcached.utils.AddrUtil</span><span class="o">;</span>
</span><span class="line">
</span><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * Description of this file.</span>
</span><span class="line"><span class="cm"> *</span>
</span><span class="line"><span class="cm"> * @author XiongNeng</span>
</span><span class="line"><span class="cm"> * @version 1.0</span>
</span><span class="line"><span class="cm"> * @since 13-7-13</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SimpleCache</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">private</span> <span class="n">String</span> <span class="n">addresses</span> <span class="o">=</span> <span class="s">&quot;192.168.0.5:11211&quot;</span><span class="o">;</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test1</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class="line">        <span class="n">MemcachedClientBuilder</span> <span class="n">builder</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">XMemcachedClientBuilder</span><span class="o">(</span>
</span><span class="line">                <span class="n">AddrUtil</span><span class="o">.</span><span class="na">getAddresses</span><span class="o">(</span><span class="n">addresses</span><span class="o">));</span>
</span><span class="line">        <span class="c1">// AddrUtil.getAddresses(&quot;server1:11211 server2:11211&quot;)</span>
</span><span class="line">        <span class="c1">// 宕机报警</span>
</span><span class="line">        <span class="n">builder</span><span class="o">.</span><span class="na">setFailureMode</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class="line">        <span class="c1">// 使用二进制文件</span>
</span><span class="line">        <span class="n">builder</span><span class="o">.</span><span class="na">setCommandFactory</span><span class="o">(</span><span class="k">new</span> <span class="nf">BinaryCommandFactory</span><span class="o">());</span>
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 设置连接池大小，即客户端个数</span>
</span><span class="line"><span class="cm">         * In a high concurrent enviroment,you may want to pool memcached clients.</span>
</span><span class="line"><span class="cm">         * But a xmemcached client has to start a reactor thread and some thread pools,</span>
</span><span class="line"><span class="cm">         * if you create too many clients,the cost is very large.</span>
</span><span class="line"><span class="cm">         * Xmemcached supports connection pool instreadof client pool.</span>
</span><span class="line"><span class="cm">         * you can create more connections to one or more memcached servers,</span>
</span><span class="line"><span class="cm">         * and these connections share the same reactor and thread pools,</span>
</span><span class="line"><span class="cm">         * it will reduce the cost of system.</span>
</span><span class="line"><span class="cm">         *  默认的pool size是1。设置这一数值不一定能提高性能，请依据你的项目的测试结果为准。</span>
</span><span class="line"><span class="cm">         *  初步的测试表明只有在大并发下才有提升。</span>
</span><span class="line"><span class="cm">         *  设置连接池的一个不良后果就是，同一个memcached的连接之间的数据更新并非同步的</span>
</span><span class="line"><span class="cm">         *  因此你的应用需要自己保证数据更新的原子性（采用CAS或者数据之间毫无关联）。</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">builder</span><span class="o">.</span><span class="na">setConnectionPoolSize</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
</span><span class="line">        <span class="n">MemcachedClient</span> <span class="n">client</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class="line">        <span class="k">try</span> <span class="o">{</span>
</span><span class="line">            <span class="cm">/**</span>
</span><span class="line"><span class="cm">             * 第一个是存储的key名称，</span>
</span><span class="line"><span class="cm">             * 第二个是expire时间（单位秒），超过这个时间,memcached将这个数据替换出去，0表示永久存储（默认是一个月)</span>
</span><span class="line"><span class="cm">             * 第三个参数就是实际存储的数据</span>
</span><span class="line"><span class="cm">             */</span>
</span><span class="line">            <span class="n">client</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s">&quot;hello&quot;</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="s">&quot;Hello,xmemcached&quot;</span><span class="o">);</span>
</span><span class="line">            <span class="n">String</span> <span class="n">value</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;hello&quot;</span><span class="o">);</span>
</span><span class="line">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;hello=&quot;</span> <span class="o">+</span> <span class="n">value</span><span class="o">);</span>
</span><span class="line">            <span class="n">client</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="s">&quot;hello&quot;</span><span class="o">);</span>
</span><span class="line">            <span class="n">value</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;hello&quot;</span><span class="o">);</span>
</span><span class="line">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;hello=&quot;</span> <span class="o">+</span> <span class="n">value</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">            <span class="c1">// value=client.get(“hello”,3000);</span>
</span><span class="line">
</span><span class="line">            <span class="cm">/**</span>
</span><span class="line"><span class="cm">             * Memcached是通过cas协议实现原子更新，所谓原子更新就是compare and set，</span>
</span><span class="line"><span class="cm">             * 原理类似乐观锁，每次请求存储某个数据同时要附带一个cas值， memcached比对这个cas值与当前存储数据的cas值是否相等，</span>
</span><span class="line"><span class="cm">             * 如果相等就让新的数据覆盖老的数据，如果不相等就认为更新失败， 这在并发环境下特别有用</span>
</span><span class="line"><span class="cm">             */</span>
</span><span class="line">            <span class="n">GetsResponse</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">gets</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">);</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">result</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="n">client</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">12</span><span class="o">);</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">            <span class="n">result</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">gets</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">);</span>
</span><span class="line">            <span class="kt">long</span> <span class="n">cas</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">getCas</span><span class="o">();</span>
</span><span class="line">            <span class="c1">// 尝试将a的值更新为2</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(!</span><span class="n">client</span><span class="o">.</span><span class="na">cas</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="n">cas</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">                <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;cas error&quot;</span><span class="o">);</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">MemcachedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;MemcachedClient operation fail&quot;</span><span class="o">);</span>
</span><span class="line">            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class="line">        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">TimeoutException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;MemcachedClient operation timeout&quot;</span><span class="o">);</span>
</span><span class="line">            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class="line">        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="c1">// ignore</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">try</span> <span class="o">{</span>
</span><span class="line">            <span class="c1">// close memcached client</span>
</span><span class="line">            <span class="n">client</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</span><span class="line">        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Shutdown MemcachedClient fail&quot;</span><span class="o">);</span>
</span><span class="line">            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test2</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">TimeoutException</span><span class="o">,</span> <span class="n">InterruptedException</span><span class="o">,</span>
</span><span class="line">            <span class="n">MemcachedException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class="line">        <span class="n">MemcachedClientBuilder</span> <span class="n">builder</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">XMemcachedClientBuilder</span><span class="o">(</span>
</span><span class="line">                <span class="n">AddrUtil</span><span class="o">.</span><span class="na">getAddresses</span><span class="o">(</span><span class="n">addresses</span><span class="o">));</span>
</span><span class="line">        <span class="n">MemcachedClient</span> <span class="n">client</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class="line">        <span class="n">client</span><span class="o">.</span><span class="na">flushAll</span><span class="o">();</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(!</span><span class="n">client</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s">&quot;hello&quot;</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="s">&quot;world&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">            <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;set error&quot;</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">client</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;hello&quot;</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="s">&quot;dennis&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">            <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Add error,key is existed&quot;</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(!</span><span class="n">client</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="s">&quot;hello&quot;</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="s">&quot;dennis&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">            <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;replace error&quot;</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="n">client</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;hello&quot;</span><span class="o">,</span> <span class="s">&quot; good&quot;</span><span class="o">);</span>
</span><span class="line">        <span class="n">client</span><span class="o">.</span><span class="na">prepend</span><span class="o">(</span><span class="s">&quot;hello&quot;</span><span class="o">,</span> <span class="s">&quot;hello &quot;</span><span class="o">);</span>
</span><span class="line">        <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;hello&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="nf">StringTranscoder</span><span class="o">());</span>
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 而删除数据则是通过deleteWithNoReply方法，这个方法删除数据并且告诉memcached</span>
</span><span class="line"><span class="cm">         * 不用返回应答，因此这个方法不会等待应答直接返回，特别适合于批量处理</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">client</span><span class="o">.</span><span class="na">deleteWithNoReply</span><span class="o">(</span><span class="s">&quot;hello&quot;</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">incrDecr</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">TimeoutException</span><span class="o">,</span>
</span><span class="line">            <span class="n">InterruptedException</span><span class="o">,</span> <span class="n">MemcachedException</span> <span class="o">{</span>
</span><span class="line">        <span class="n">MemcachedClientBuilder</span> <span class="n">builder</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">XMemcachedClientBuilder</span><span class="o">(</span>
</span><span class="line">                <span class="n">AddrUtil</span><span class="o">.</span><span class="na">getAddresses</span><span class="o">(</span><span class="n">addresses</span><span class="o">));</span>
</span><span class="line">        <span class="n">MemcachedClient</span> <span class="n">client</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class="line">        <span class="cm">/**</span>
</span><span class="line"><span class="cm">         * 第一个参数指定递增的key名称， 第二个参数指定递增的幅度大小， 第三个参数指定当key不存在的情况下的初始值。</span>
</span><span class="line"><span class="cm">         * 两个参数的重载方法省略了第三个参数，默认指定为0。</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="k">assert</span> <span class="o">(</span><span class="mi">1</span> <span class="o">==</span> <span class="n">client</span><span class="o">.</span><span class="na">incr</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">1</span><span class="o">));</span>
</span><span class="line">        <span class="k">assert</span> <span class="o">(</span><span class="mi">6</span> <span class="o">==</span> <span class="n">client</span><span class="o">.</span><span class="na">incr</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">,</span> <span class="mi">5</span><span class="o">));</span>
</span><span class="line">        <span class="k">assert</span> <span class="o">(</span><span class="mi">10</span> <span class="o">==</span> <span class="n">client</span><span class="o">.</span><span class="na">incr</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">,</span> <span class="mi">4</span><span class="o">));</span>
</span><span class="line">        <span class="k">assert</span> <span class="o">(</span><span class="mi">9</span> <span class="o">==</span> <span class="n">client</span><span class="o">.</span><span class="na">decr</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">,</span> <span class="mi">1</span><span class="o">));</span>
</span><span class="line">        <span class="k">assert</span> <span class="o">(</span><span class="mi">7</span> <span class="o">==</span> <span class="n">client</span><span class="o">.</span><span class="na">decr</span><span class="o">(</span><span class="s">&quot;a&quot;</span><span class="o">,</span> <span class="mi">2</span><span class="o">));</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">counter</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class="line">        <span class="n">MemcachedClientBuilder</span> <span class="n">builder</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">XMemcachedClientBuilder</span><span class="o">(</span>
</span><span class="line">                <span class="n">AddrUtil</span><span class="o">.</span><span class="na">getAddresses</span><span class="o">(</span><span class="n">addresses</span><span class="o">));</span>
</span><span class="line">        <span class="n">MemcachedClient</span> <span class="n">client</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class="line">        <span class="n">Counter</span> <span class="n">counter</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">getCounter</span><span class="o">(</span><span class="s">&quot;counter&quot;</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class="line">        <span class="n">counter</span><span class="o">.</span><span class="na">incrementAndGet</span><span class="o">();</span>
</span><span class="line">        <span class="n">counter</span><span class="o">.</span><span class="na">decrementAndGet</span><span class="o">();</span>
</span><span class="line">        <span class="n">counter</span><span class="o">.</span><span class="na">addAndGet</span><span class="o">(-</span><span class="mi">10</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">auth</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class="line">        <span class="n">MemcachedClientBuilder</span> <span class="n">builder</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">XMemcachedClientBuilder</span><span class="o">(</span>
</span><span class="line">                <span class="n">AddrUtil</span><span class="o">.</span><span class="na">getAddresses</span><span class="o">(</span><span class="n">addresses</span><span class="o">));</span>
</span><span class="line">        <span class="n">builder</span><span class="o">.</span><span class="na">addAuthInfo</span><span class="o">(</span><span class="n">AddrUtil</span><span class="o">.</span><span class="na">getOneAddress</span><span class="o">(</span><span class="n">addresses</span><span class="o">),</span>
</span><span class="line">                <span class="n">AuthInfo</span><span class="o">.</span><span class="na">typical</span><span class="o">(</span><span class="s">&quot;cacheuser&quot;</span><span class="o">,</span> <span class="s">&quot;123456&quot;</span><span class="o">));</span>
</span><span class="line">        <span class="c1">// Must use binary protocol</span>
</span><span class="line">        <span class="n">builder</span><span class="o">.</span><span class="na">setCommandFactory</span><span class="o">(</span><span class="k">new</span> <span class="nf">BinaryCommandFactory</span><span class="o">());</span>
</span><span class="line">        <span class="n">MemcachedClient</span> <span class="n">client</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">nioPool</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class="line">        <span class="n">MemcachedClientBuilder</span> <span class="n">builder</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">XMemcachedClientBuilder</span><span class="o">(</span>
</span><span class="line">                <span class="n">AddrUtil</span><span class="o">.</span><span class="na">getAddresses</span><span class="o">(</span><span class="s">&quot;localhost:11211&quot;</span><span class="o">));</span>
</span><span class="line">        <span class="n">builder</span><span class="o">.</span><span class="na">setConnectionPoolSize</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python函数装饰器详解]]></title>
    <link href="http://cmback.github.io/blog/20150601/python-decorator.html"/>
    <updated>2015-06-01T10:06:22+08:00</updated>
    <id>http://cmback.github.io/blog/20150601/python-decorator</id>
    <content type="html"><![CDATA[<h3 id="section">装饰器简介</h3>
<p>python有着强大的表达式语法和函数特性，其中一个我的最爱便是装饰器。
在设计模式中，装饰器能够在不使用子类的情况下动态的修改函数、方法或类的功能。</p>

<p>当你需要扩展某个函数的功能却不想直接修改这个函数的时候，装饰器就可以派上用场了。
实现装饰器模式有很多种方法，但是python通过强大的语法支持来让这个变得相当容易。</p>

<p>在这篇文章中我将深入讲解Python的函数装饰器，并通过一系列的源码示例来彻底讲清楚这个东西。
所有例子都在Python2.7下运行通过，不过只需要稍作改变就可以运行在Python3上了，
甚至我猜测什么都不用改变都可以的，读者可以自己去试试。</p>

<p>本质上来讲，装饰器是以包装器形式工作的，其实就是在执行目标函数之前或之后加入自己的逻辑，
而不需要改变目标函数本身就可以增强它的功能，也就是说装饰了它。<!--more--></p>

<h3 id="section-1">你需要知道的函数</h3>
<p>在深入讨论之前，有一些基本的概念需要讲明清楚。
在Python中，函数是一等公民，它们就是对象，因此我们可以使用它来做很多事。</p>

<p>1.把函数赋值给某个变量：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">greet</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class="line">    <span class="k">return</span> <span class="s">&quot;hello &quot;</span><span class="o">+</span><span class="n">name</span>
</span><span class="line">
</span><span class="line"><span class="n">greet_someone</span> <span class="o">=</span> <span class="n">greet</span>
</span><span class="line"><span class="k">print</span> <span class="n">greet_someone</span><span class="p">(</span><span class="s">&quot;John&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># Outputs: hello John</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>2.在某个函数内部定义另外一个函数：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">greet</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">get_message</span><span class="p">():</span>
</span><span class="line">        <span class="k">return</span> <span class="s">&quot;Hello &quot;</span>
</span><span class="line">
</span><span class="line">    <span class="n">result</span> <span class="o">=</span> <span class="n">get_message</span><span class="p">()</span><span class="o">+</span><span class="n">name</span>
</span><span class="line">    <span class="k">return</span> <span class="n">result</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="n">greet</span><span class="p">(</span><span class="s">&quot;John&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># Outputs: Hello John</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>3.函数可以被当做参数传递给另外一个函数：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">greet</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class="line">   <span class="k">return</span> <span class="s">&quot;Hello &quot;</span> <span class="o">+</span> <span class="n">name</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">call_func</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class="line">    <span class="n">other_name</span> <span class="o">=</span> <span class="s">&quot;John&quot;</span>
</span><span class="line">    <span class="k">return</span> <span class="n">func</span><span class="p">(</span><span class="n">other_name</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="n">call_func</span><span class="p">(</span><span class="n">greet</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># Outputs: Hello John</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>4.函数返回值可以是其他函数：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">compose_greet_func</span><span class="p">():</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">get_message</span><span class="p">():</span>
</span><span class="line">        <span class="k">return</span> <span class="s">&quot;Hello there!&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="n">get_message</span>
</span><span class="line">
</span><span class="line"><span class="n">greet</span> <span class="o">=</span> <span class="n">compose_greet_func</span><span class="p">()</span>
</span><span class="line"><span class="k">print</span> <span class="n">greet</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="c"># Outputs: Hello there!</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>5.内部函数可以访问包含它的函数的局部变量：</p>

<p>其实就是我们所说的闭包，在构建装饰器的时候这是一个非常有用的模式。
另外还要注意，Python只允许读取外部变量而不允许修改。</p>

<p>观察一下下面的代码，
注意我们是如何通过修改上面实例代码来读取外部函数中的name参数值并返回一个新的函数的。</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">compose_greet_func</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">get_message</span><span class="p">():</span>
</span><span class="line">        <span class="k">return</span> <span class="s">&quot;Hello there &quot;</span><span class="o">+</span><span class="n">name</span><span class="o">+</span><span class="s">&quot;!&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="n">get_message</span>
</span><span class="line">
</span><span class="line"><span class="n">greet</span> <span class="o">=</span> <span class="n">compose_greet_func</span><span class="p">(</span><span class="s">&quot;John&quot;</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span> <span class="n">greet</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="c"># Outputs: Hello there John!</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-2">构造装饰器</h3>
<p>函数装饰器就是已存在函数的一个包装器。我们把上面的这些结合起来就能构建一个装饰器了。</p>

<p>下面例子中我们先构造一个函数来用p标签包装其他函数返回的一个字符串。</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">get_text</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class="line">   <span class="k">return</span> <span class="s">&quot;lorem ipsum, {0} dolor sit amet&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">p_decorate</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class="line">   <span class="k">def</span> <span class="nf">func_wrapper</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class="line">       <span class="k">return</span> <span class="s">&quot;&lt;p&gt;{0}&lt;/p&gt;&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">func</span><span class="p">(</span><span class="n">name</span><span class="p">))</span>
</span><span class="line">   <span class="k">return</span> <span class="n">func_wrapper</span>
</span><span class="line">
</span><span class="line"><span class="n">my_get_text</span> <span class="o">=</span> <span class="n">p_decorate</span><span class="p">(</span><span class="n">get_text</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="n">my_get_text</span><span class="p">(</span><span class="s">&quot;John&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># &lt;p&gt;Outputs lorem ipsum, John dolor sit amet&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这是我们的第一个装饰器——一个增强其他函数功能并返回新函数的函数。
为了让get_text函数被p_decorate装饰，我们只需要将get_text作为参数传给后者，
并将结果赋值给一个变量，然后就可以对这个变量函数调用就能实现效果了。</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">get_text</span> <span class="o">=</span> <span class="n">p_decorate</span><span class="p">(</span><span class="n">get_text</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="n">get_text</span><span class="p">(</span><span class="s">&quot;John&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># Outputs lorem ipsum, John dolor sit amet</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>主要原来的函数有一个name参数，那么我们调用的时候将这个参数传递给装饰器函数就行了。</p>

<h3 id="python">Python的装饰器语法</h3>
<p>Python通过一些语法糖让创建和使用装饰器变得相当简单。
我们并不需要使用语句<code>get_text = p_decorator(get_text)</code>来装饰get_text。
有一个快捷方式可以做到，它会在被装饰函数前面加一层装饰函数。装饰器的名字需要使用@前缀。</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">p_decorate</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class="line">   <span class="k">def</span> <span class="nf">func_wrapper</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class="line">       <span class="k">return</span> <span class="s">&quot;&lt;p&gt;{0}&lt;/p&gt;&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">func</span><span class="p">(</span><span class="n">name</span><span class="p">))</span>
</span><span class="line">   <span class="k">return</span> <span class="n">func_wrapper</span>
</span><span class="line">
</span><span class="line"><span class="nd">@p_decorate</span>
</span><span class="line"><span class="k">def</span> <span class="nf">get_text</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class="line">   <span class="k">return</span> <span class="s">&quot;lorem ipsum, {0} dolor sit amet&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="n">get_text</span><span class="p">(</span><span class="s">&quot;John&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># Outputs &lt;p&gt;lorem ipsum, John dolor sit amet&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>现在我们再考虑下利用2个其他的函数来装饰我们的get_text函数，在其输出结果上添加一个div和strong标签。</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">p_decorate</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class="line">   <span class="k">def</span> <span class="nf">func_wrapper</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class="line">       <span class="k">return</span> <span class="s">&quot;&lt;p&gt;{0}&lt;/p&gt;&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">func</span><span class="p">(</span><span class="n">name</span><span class="p">))</span>
</span><span class="line">   <span class="k">return</span> <span class="n">func_wrapper</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">strong_decorate</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">func_wrapper</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="s">&quot;&lt;strong&gt;{0}&lt;/strong&gt;&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">func</span><span class="p">(</span><span class="n">name</span><span class="p">))</span>
</span><span class="line">    <span class="k">return</span> <span class="n">func_wrapper</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">div_decorate</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">func_wrapper</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="s">&quot;&lt;div&gt;{0}&lt;/div&gt;&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">func</span><span class="p">(</span><span class="n">name</span><span class="p">))</span>
</span><span class="line">    <span class="k">return</span> <span class="n">func_wrapper</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>如果我们使用原来的语法，那么就得这么写：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">get_text</span> <span class="o">=</span> <span class="n">div_decorate</span><span class="p">(</span><span class="n">p_decorate</span><span class="p">(</span><span class="n">strong_decorate</span><span class="p">(</span><span class="n">get_text</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>但是在python中，你就可以这样来定义了：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="nd">@div_decorate</span>
</span><span class="line"><span class="nd">@p_decorate</span>
</span><span class="line"><span class="nd">@strong_decorate</span>
</span><span class="line"><span class="k">def</span> <span class="nf">get_text</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class="line">   <span class="k">return</span> <span class="s">&quot;lorem ipsum, {0} dolor sit amet&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="n">get_text</span><span class="p">(</span><span class="s">&quot;John&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># Outputs &lt;div&gt;&lt;p&gt;&lt;strong&gt;lorem ipsum, John dolor sit amet&lt;/strong&gt;&lt;/p&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>上面需要注意的是装饰器的顺序，如果顺序不同，输出结果也会不一样。</p>

<h3 id="section-3">装饰方法</h3>
<p>在python中，其实方法就是第一个参数为当前对象的引用的函数而已。
我们同样能够给方法构造装饰器，只需要将self参数放到包装函数中。</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">p_decorate</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class="line">   <span class="k">def</span> <span class="nf">func_wrapper</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">       <span class="k">return</span> <span class="s">&quot;&lt;p&gt;{0}&lt;/p&gt;&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">func</span><span class="p">(</span><span class="bp">self</span><span class="p">))</span>
</span><span class="line">   <span class="k">return</span> <span class="n">func_wrapper</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;John&quot;</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">family</span> <span class="o">=</span> <span class="s">&quot;Doe&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@p_decorate</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">get_fullname</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="o">+</span><span class="s">&quot; &quot;</span><span class="o">+</span><span class="bp">self</span><span class="o">.</span><span class="n">family</span>
</span><span class="line">
</span><span class="line"><span class="n">my_person</span> <span class="o">=</span> <span class="n">Person</span><span class="p">()</span>
</span><span class="line"><span class="k">print</span> <span class="n">my_person</span><span class="o">.</span><span class="n">get_fullname</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>一个更好的做法是改造我们的装饰器使他们可以作用于函数以及类方法。
可以将*args和**kwargs作为包装器的参数，然后它就能接受任意数量的位置参数和关键字参数了。</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">p_decorate</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class="line">   <span class="k">def</span> <span class="nf">func_wrapper</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class="line">       <span class="k">return</span> <span class="s">&quot;&lt;p&gt;{0}&lt;/p&gt;&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">))</span>
</span><span class="line">   <span class="k">return</span> <span class="n">func_wrapper</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;John&quot;</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">family</span> <span class="o">=</span> <span class="s">&quot;Doe&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="nd">@p_decorate</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">get_fullname</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="o">+</span><span class="s">&quot; &quot;</span><span class="o">+</span><span class="bp">self</span><span class="o">.</span><span class="n">family</span>
</span><span class="line">
</span><span class="line"><span class="n">my_person</span> <span class="o">=</span> <span class="n">Person</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="n">my_person</span><span class="o">.</span><span class="n">get_fullname</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-4">给装饰器传递参数</h3>
<p>回顾下上面的例子，你会发现例子中的装饰器太过冗余了。
3个装饰器(div_decorate,p_decorate, strong_decorate)拥有相同功能，只是使用了不同的标签包装而已。</p>

<p>我们可以做得更好，为什么不使用一种更加通用的方式，将标签作为参数传递进来呢？</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">tags</span><span class="p">(</span><span class="n">tag_name</span><span class="p">):</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">tags_decorator</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class="line">        <span class="k">def</span> <span class="nf">func_wrapper</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class="line">            <span class="k">return</span> <span class="s">&quot;&lt;{0}&gt;{1}&lt;/{0}&gt;&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">tag_name</span><span class="p">,</span> <span class="n">func</span><span class="p">(</span><span class="n">name</span><span class="p">))</span>
</span><span class="line">        <span class="k">return</span> <span class="n">func_wrapper</span>
</span><span class="line">    <span class="k">return</span> <span class="n">tags_decorator</span>
</span><span class="line">
</span><span class="line"><span class="nd">@tags</span><span class="p">(</span><span class="s">&quot;p&quot;</span><span class="p">)</span>
</span><span class="line"><span class="k">def</span> <span class="nf">get_text</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class="line">    <span class="k">return</span> <span class="s">&quot;Hello &quot;</span><span class="o">+</span><span class="n">name</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="n">get_text</span><span class="p">(</span><span class="s">&quot;John&quot;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># Outputs &lt;p&gt;Hello John&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-5">调试被装饰函数</h3>
<p>最后当我们调试被装饰函数时会发现它的名字、模块和文档字符串都发生了改变。</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">print</span> <span class="n">get_text</span><span class="o">.</span><span class="n">__name__</span>
</span><span class="line"><span class="c"># Outputs func_wrapper</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>我们期望的输出应该是get_text，get_text的__name__、<strong>doc</strong> 和 __module__已经被包装函数覆盖了。</p>

<h3 id="functools">使用functools来解决</h3>
<p>幸运的是python2.5版本以上有了一个functools包可以来解决这个问题。
只需要简单在包装函数上标注@wrap标签即可。</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">wraps</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">tags</span><span class="p">(</span><span class="n">tag_name</span><span class="p">):</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">tags_decorator</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
</span><span class="line">        <span class="nd">@wraps</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>
</span><span class="line">        <span class="k">def</span> <span class="nf">func_wrapper</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class="line">            <span class="k">return</span> <span class="s">&quot;&lt;{0}&gt;{1}&lt;/{0}&gt;&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">tag_name</span><span class="p">,</span> <span class="n">func</span><span class="p">(</span><span class="n">name</span><span class="p">))</span>
</span><span class="line">        <span class="k">return</span> <span class="n">func_wrapper</span>
</span><span class="line">    <span class="k">return</span> <span class="n">tags_decorator</span>
</span><span class="line">
</span><span class="line"><span class="nd">@tags</span><span class="p">(</span><span class="s">&quot;p&quot;</span><span class="p">)</span>
</span><span class="line"><span class="k">def</span> <span class="nf">get_text</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot;returns some text&quot;&quot;&quot;</span>
</span><span class="line">    <span class="k">return</span> <span class="s">&quot;Hello &quot;</span><span class="o">+</span><span class="n">name</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span> <span class="n">get_text</span><span class="o">.</span><span class="n">__name__</span> <span class="c"># get_text</span>
</span><span class="line"><span class="k">print</span> <span class="n">get_text</span><span class="o">.</span><span class="n">__doc__</span> <span class="c"># returns some text</span>
</span><span class="line"><span class="k">print</span> <span class="n">get_text</span><span class="o">.</span><span class="n">__module__</span> <span class="c"># __main__</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>从结果可以看出get_text函数的属性都恢复正常了。</p>

<h3 id="section-6">哪里使用装饰器</h3>
<p>这篇文章中的例子相对来讲是比较简单的。它能给你的程序带来很大的方便。
一般来讲，装饰器用在需要扩展某个函数行为而又不想改变这个函数本身内容的时候。</p>

<p>我建议你查阅一下Python Decorator库来获取更多非常有用的装饰器。</p>

<h3 id="section-7">更多阅读资源</h3>
<p>下面是一个值得去查看的关于装饰器的其他资源列表：</p>

<ul>
  <li><a href="https://wiki.python.org/moin/PythonDecorators#What_is_a_Decorator">什么是装饰器?</a></li>
  <li><a href="http://www.artima.com/weblogs/viewpost.jsp?thread=240808">Decorators I: Python装饰器入门</a></li>
  <li><a href="http://www.artima.com/weblogs/viewpost.jsp?thread=240845">Python Decorators II: 装饰器参数</a></li>
  <li><a href="http://www.artima.com/weblogs/viewpost.jsp?thread=241209">Python Decorators III: 一个基于装饰器的构建系统</a></li>
  <li><a href="http://www.amazon.com/gp/product/B006ZHJSIM/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B006ZHJSIM&amp;linkCode=as2&amp;tag=thcosh00-20">Python装饰器指南 Matt Harrison</a></li>
</ul>

<p>到此为止Python装饰器概率已经介绍完了。我希望你能从中受益，
如果你哈有任何的建议或问题，可以在评论中提出来。祝您编程快乐！</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[xpath入门笔记]]></title>
    <link href="http://cmback.github.io/blog/20150519/xpath-introduce.html"/>
    <updated>2015-05-19T14:01:07+08:00</updated>
    <id>http://cmback.github.io/blog/20150519/xpath-introduce</id>
    <content type="html"><![CDATA[<h3 id="wiki">Wiki</h3>

<p>XPath即为XML路径语言（XML Path Language），它是一种用来确定XML文档中某部分位置的语言。
XPath基于XML的树状结构，提供在数据结构树中找寻节点的能力。
起初XPath的提出的初衷是将其作为一个通用的、介于XPointer与XSL间的语法模型。
但是XPath很快的被开发者采用来当作小型查询语言。</p>

<p>W3C网址： <a href="http://www.w3schools.com/XPath/">http://www.w3schools.com/XPath/</a></p>

<h3 id="section">表示法</h3>

<p>最常见的XPath表达式是路径表达式（XPath这一名称的另一来源）。</p>

<p>路径表达式是从一个XML节点（当前的上下文节点）到另一个节点、或一组节点的书面步骤顺序。
这些步骤以“／”字符分开，每一步有三个构成成分：<!--more--></p>

<h3 id="section-1">轴描述</h3>

<p>节点测试（用于筛选节点位置和名称）</p>

<p>节点描述（用于筛选节点的属性和子节点特征）</p>

<p>一般情况下，我们使用简写后的语法。虽然完整的轴描述是一种更加贴近人类语言，
利用自然语言的单词和语法来书写的描述方式，但是相比之下也更加罗嗦。</p>

<h3 id="section-2">三种表示法</h3>

<ol>
  <li>最简单的XPath如下：</li>
</ol>

<p><code>/A/B/C</code></p>

<p>在这里选择所有符合规矩的C节点：C节点必须是B的子节点（B/C），
同时B节点必须是A的子节点（A/B），而A是这个XML文档的根节点（/A）。
此时的这种描述法类似于磁盘中文件的路径（URI），从盘符开始顺着一级一级的目录最终找到文件。</p>

<ol>
  <li>这里还有一个复杂一些的例子，包含了全部构成成分（请详细的看）：</li>
</ol>

<p><code>A//B/*[1]</code></p>

<p>此时选择的元素是：在B节点下的第一个节点（B/<em>[1]），不论节点的名称如何（</em>）；
而B节点必须出现在A节点内，不论和A节点之间相隔几层节点（//B）；
与此同时A节点还必须是当前节点的子节点（A，前边没有/）。</p>

<ol>
  <li>最后一个常用的例子，在所有节点下查找：</li>
</ol>

<p><code>//A/B/C/*[2]</code></p>

<h3 id="section-3">轴语法</h3>
<p>在未缩写语法里，两个上述范例可以写为：
`
/child::A/child::B/child::C
child::A/descendant-or-self::B/child::node()[1]
`
在XPath的每个步骤里，通过完整的轴描述（例如：child或descendant-or-self）进行明确的指定，
然后使用::，它的后面跟着节点测试的内容，例如上面范例所示的A以及node()。</p>

<h3 id="xpath">XPath轴</h3>
<p>轴可定义相对于当前节点的节点集。</p>
<table class="goodtable">
    <tr><td>ancestor</td><td>选取当前节点的所有先辈（父、祖父等）。</td></tr>
    <tr><td>ancestor-or-self</td><td>选取当前节点的所有先辈（父、祖父等）以及当前节点本身。</td></tr>
    <tr><td>attribute</td><td>选取当前节点的所有属性</td></tr>
    <tr><td>child</td><td>选取当前节点的所有子元素</td></tr>
    <tr><td>descendant</td><td>选取当前节点的所有后代元素（子、孙等）。</td></tr>
    <tr><td>descendant-or-self</td><td>选取当前节点的所有后代元素（子、孙等）以及当前节点本身。</td></tr>
    <tr><td>following</td><td>选取文档中当前节点的结束标签之后的所有节点。</td></tr>
    <tr><td>namespace</td><td>选取当前节点的所有命名空间节点。</td></tr>
    <tr><td>parent</td><td>选取当前节点的父节点。</td></tr>
    <tr><td>preceding</td><td>选取文档中当前节点的开始标签之前的所有节点。</td></tr>
    <tr><td>preceding-sibling</td><td>选取当前节点之前的所有同级节点。</td></tr>
    <tr><td>self</td><td>选取当前节点。</td></tr>
</table>

<p>几个实例讲解：</p>
<table class="goodtable">
    <tr><td>child::book</td><td>选取所有属于当前节点的子元素的 book 节点。</td></tr>
    <tr><td>attribute::lang</td><td>选取当前节点的 lang 属性。</td></tr>
    <tr><td>child::*</td><td>选取当前节点的所有子元素。</td></tr>
    <tr><td>attribute::*</td><td>选取当前节点的所有属性</td></tr>
    <tr><td>child::text()</td><td>选取当前节点的所有文本子节点</td></tr>
    <tr><td>child::node()</td><td>选取当前节点的所有子节点</td></tr>
    <tr><td>descendant::book</td><td>选取当前节点的所有book后代</td></tr>
    <tr><td>ancestor::book</td><td>选择当前节点的所有book先辈</td></tr>
    <tr><td>ancestor-or-self::book</td>选取当前节点的所有book先辈以及当前节点（如果此节点是 book 节点）<td></td></tr>
    <tr><td>child::*/child::price</td><td>选取当前节点的所有price孙节点。</td></tr>
</table>

<h3 id="xpath-">XPath 运算符</h3>
<p>下面列出了可用在 XPath 表达式中的运算符：</p>
<table class="goodtable">
    <tr><td>|</td><td>计算两个节点集</td><td>//book | //cd</td><td>返回所有拥有 book 和 cd 元素的节点集</td></tr>
    <tr><td>+</td><td>加法</td><td>6 + 4</td><td>10</td></tr>
    <tr><td>-</td><td>减法</td><td>6 – 4</td><td>2</td></tr>
    <tr><td>*</td><td>乘法</td><td>6 * 4</td><td>24</td></tr>
    <tr><td>div</td><td>除法</td><td>8 div 4</td><td>2</td></tr>
    <tr><td>=</td><td>等于</td><td>price=9.80</td><td>如果 price 是 9.80，则返回 true。如果 price 是 9.90，则返回 false。</td></tr>
    <tr><td>!=</td><td>不等于</td><td>price!=9.80</td><td>如果 price 是 9.90，则返回 true。如果 price 是 9.80，则返回 false。</td></tr>
    <tr><td>&lt;</td><td>小于</td><td>price&lt;9.80</td><td>如果 price 是 9.00，则返回 true。如果 price 是 9.90，则返回 false。</td></tr>
    <tr><td>&lt;=</td><td>小于或等于</td><td>price&lt;=9.80</td><td>如果 price 是 9.00，则返回 true。如果 price 是 9.90，则返回 false。</td></tr>
    <tr><td>&gt;</td><td>大于</td><td>price&gt;9.80</td><td>如果 price 是 9.90，则返回 true。如果 price 是 9.80，则返回 false。</td></tr>
    <tr><td>&gt;=</td><td>大于或等于</td><td>price&gt;=9.80</td><td>如果 price 是 9.90，则返回 true。如果 price 是 9.70，则返回 false。</td></tr>
    <tr><td>or</td><td>或</td><td>price=9.80 or price=9.70</td><td>如果 price 是 9.80，则返回 true。如果 price 是 9.50，则返回 false。</td></tr>
    <tr><td>and</td><td>与</td><td>price&gt;9.00 and price&lt;9.90</td><td>如果 price 是 9.80，则返回 true。如果 price 是 8.50，则返回 false。</td></tr>
</table>

<h3 id="xpath-1">Xpath函数</h3>

<p>有关数值的函数</p>

<pre><code>----------------------------------------------------------------------------------------------
|fn:number(arg)         |返回参数的数值。参数可以是布尔值、字符串或节点集。例子：number(‘100′)结果：100
|fn:abs(num)            |返回参数的绝对值。例子：abs(3.14)   结果：3.14例子：abs(-3.14)   结果：3.14
|fn:ceiling(num)        |返回大于 num 参数的最小整数。例子：ceiling(3.14)  结果：4
|fn:floor(num)          |返回不大于 num 参数的最大整数。例子：floor(3.14)  结果：3
|fn:round(num)          |把 num 参数舍入为最接近的整数。例子：round(3.14)  结果：3
----------------------------------------------------------------------------------------------
</code></pre>

<p>有关字符串的函数</p>

<pre><code>------------------------------------------------------------------------------------------------------------------------------------------------
|fn:string(arg)                         |返回参数的字符串值。参数可以是数字、逻辑值或节点集。例子：string(314) 结果：”314″
|fn:compare(comp1,comp2,collation)      |如果 comp1 小于 comp2，则返回 -1。类推例子：compare(‘ghi’, ‘ghi’) 结果：0
|fn:concat(string,string,…)             |返回字符串的拼接。例子：concat(‘XPath ‘,’is ‘,’FUN!’) 结果：’XPath is FUN!’
|fn:substring(string,start,len)         |返回从start位置开始的指定长度的子字符串。第一个字符的下标是 1。例子：substring(‘Beatles’,1,4) 结果：’Beat’
|fn:string-length(string)               |返回指定字符串的长度。如果没有 string 参数，则返回当前节点的字符串值的长度。例子：string-length(‘Beatles’) 结果：7
|fn:normalize-space(string)             |删除开头和结尾空白，并把内部所有空白序列替换为一个，然后返回结果。例子：normalize-space(‘ The XML ‘) 结果：’The XML’
|fn:upper-case(string)                  |把 string 参数转换为大写。例子：upper-case(‘The XML’) 结果：’THE XML’
|fn:lower-case(string)                  |把 string 参数转换为小写。例子：lower-case(‘The XML’) 结果：’the xml’
|fn:contains(string1,string2)           |如果 string1 包含 string2，则返回 true，否则返回 false。例子：contains(‘XML’,’XM’) 结果：true
|fn:starts-with(string1,string2)        |如果 string1 以 string2 开始，则返回 true，否则返回 false。例子：starts-with(‘XML’,’X’) 结果：true
|fn:ends-with(string1,string2)          |如果 string1 以 string2 结尾，则返回 true，否则返回 false。例子：ends-with(‘XML’,’X’) 结果：false
|fn:substring-before(string1,string2)   |返回 string2 在 string1 中出现之前的子字符串。例子：substring-before(’12/10′,’/’) 结果：’12’
|fn:substring-after(string1,string2)    |返回 string2 在 string1 中出现之后的子字符串。例子：substring-after(’12/10′,’/’) 结果：’10’
|fn:matches(string,pattern)             |如果 string 参数匹配指定的模式，则返回 true，否则返回 false。例子：matches(“Merano”, “ran”) 结果：true
------------------------------------------------------------------------------------------------------------------------------------------------
</code></pre>

<p>更多函数请参考： <a href="http://www.w3school.com.cn/xpath/xpath_functions.asp">http://www.w3school.com.cn/xpath/xpath_functions.asp</a></p>

<h3 id="xpath-2">我自己实际工作中使用过的XPath实例：</h3>

<pre><code>* //span/../.././span
* //bookstore/book[last()]
* /DocText/WithQuads/Page/Word
* record[field[@id='220' and @value='Red'] and field[@id='221' and @value='Large']]
* /Root//Person[contains(Blog,'cn') and contains(@ID,'01')]
* //tr[td[1] and td[2][contains(text(), "512M")]]
* //td/following-sibling::td[1]
* //td/preceding-sibling::td[1]
* //td[starts-with(text(), "%s") and contains(text(), "disk:%sMB")]/following-sibling::td[2][contains(text(), "%s")]
* //a/../following-sibling::td[8]/a[2]
</code></pre>

<p>看完前面部分，这些的含义应该很容易可以看懂了。恭喜你，基本的XPath已经没问题了！</p>

<h3 id="chromepsychoxpath">chrome插件PsychoXPath</h3>
<p>最后我还推荐一个chrome浏览器中很好用的xpath插件，名字叫PsychoXPath。\</p>

<p>插件地址：<a href="https://chrome.google.com/webstore/detail/psychoxpath/bpnigkcdmnofjkmojlopmelmhgpbndog">PsychoXPath</a></p>

<p>基本使用方法，以google的首页“Google 搜索”按钮为例：</p>

<p>高亮模式：</p>

<ol>
  <li>先按F12打开chrome浏览器的调试窗口，然后通过邮件审查元素找到“Google 搜索”按钮，查看对应的html代码。</li>
</ol>

<p><img src="http://yidaospace.qiniudn.com/x002.png" alt="" /></p>

<p>*. 然后右键选择PsychoXPath-&gt;Test XPath(Highlight)</p>

<p><img src="http://yidaospace.qiniudn.com/x006.png" alt="" /></p>

<p>*. 之后输入XPath路径</p>

<p><img src="http://yidaospace.qiniudn.com/x004.png" alt="" /></p>

<p>*. 结果如下，被找到的页面元素会被高亮显示：</p>

<p><img src="http://yidaospace.qiniudn.com/x005.png" alt="" /></p>

<p>*. 控制台模式：</p>

<p>还可以在控制台中调试xpath，这个跟上面同样道理。只是这次选择的是PsychoXPath-&gt;Test XPath(Console)模式就行了。</p>

<p>具体我就不再细说了，使用还是很容易的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS6.4安装rabbitmq-server]]></title>
    <link href="http://cmback.github.io/blog/20150426/rabbitmq-server.html"/>
    <updated>2015-04-26T10:55:13+08:00</updated>
    <id>http://cmback.github.io/blog/20150426/rabbitmq-server</id>
    <content type="html"><![CDATA[<h3 id="centos-64python">在 CentOS 6.4上安装python</h3>
<p>自己手动安装python2.7.5，不要动系统上面其他的版本</p>

<p><strong>1,先安装GCC，用如下命令yum install gcc gcc-c++</strong></p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">yum install zlib
</span><span class="line">yum install zlib-devel</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><strong>2,下载 <a href="https://www.python.org/ftp/python/2.7.5/Python-2.7.5.tgz">python-2.7.5.tar.gz</a> 文件，修改文件权限</strong></p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">chmode +x python-7.5.tar.gz</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><strong>3,解压tar文件</strong></p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">tar -xzvf python-2.7.5.tar.gz</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><strong>4,编辑Setup.dist</strong></p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cd python-2.7.5
</span><span class="line">vim Python-2.7.5/Modules/Setup.dist</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>找到<!--more--></p>

<pre><code>#SSL=/usr/local/ssl
#_ssl _ssl.c \
#       -DUSE_SSL -I$(SSL)/include -I$(SSL)/include/openssl \
#       -L$(SSL)/lib -lssl -lcrypto
......
#zlib zlibmodule.c -I$(prefix)/include -L$(exec_prefix)/lib -lz
</code></pre>

<p>把注释去掉后开始执行安装</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">./configure --prefix=/usr/local/python27 --with-zlib=/usr/include
</span><span class="line">make &amp;&amp; make install</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><strong>5、建立软连接，使系统默认的python指向python27</strong></p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">mv /usr/bin/python /usr/bin/python2.6.6.old
</span><span class="line">ln -s /usr/local/python27/bin/python2.7 /usr/bin/python</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>已经安装完成python的安装或升级的全部操作了，我们再来看一下现在的python的版本：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">python -V
</span><span class="line">Python 2.7.5</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>虽然现在python已经安装完成，但是使用yum命令会有问题——yum不能正常工作。</p>

<p>这是因为yum默认使用的python版本是2.6.6，到哪是现在的python版本是2.7.5，
故会出现上述问题，只需要该一下yum的默认python配置版本就行了：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">vi /usr/bin/yum</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>将文件头部的<code>#!/usr/bin/python</code> 改为<code>#!/usr/bin/python2.6</code></p>

<h3 id="centos-64erlang">在 CentOS 6.4上安装Erlang</h3>
<p>在本节中，我们将来学习如何在CentOS 6.4上安装erlang，具体的Erlang版本是R16B02。</p>

<p>在安装之前，需要先要安装一些其他的软件，否则在安装中间会出现一些由于没有其依赖的软件模块而失败。</p>

<p><strong>1、首先要先安装GCC GCC-C++ Openssl等以来模块：</strong></p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">yum -y install make gcc gcc-c++ kernel-devel m4 ncurses-devel openssl-devel</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><strong>2、再安装ncurses模块</strong></p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">yum -y install ncurses-devel
</span><span class="line">yum install ncurses-devel</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><strong>3、下载Erang源代码文件文件，并对其付权限和解压文件：</strong></p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">wget http://www.erlang.org/download/otp_src_R16B02.tar.gz
</span><span class="line">chmod +x otp_src_R16B02.tar.gz
</span><span class="line">tar -xzvf otp_src_R16B02.tar.gz
</span><span class="line">mv otp_src_R16B02 erlang_R16B #重命名解压厚的文件</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><strong>4、下面是安装erlang的重头戏，依次执行以下操作：</strong></p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cd erlang_R16B/
</span><span class="line">#不用java编译，故去掉java避免错误
</span><span class="line">./configure --prefix=/usr/local/erlang --with-ssl --enable-threads --enable-smp-support --enable-kernel-poll --enable-hipe --without-javac
</span><span class="line">make &amp;&amp; make install #编译后安装</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><strong>5、配置erlang环境：</strong></p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">vi /etc/profile
</span><span class="line">ERL_HOME=/usr/local/erlang
</span><span class="line">export PATH=$PATH:$ERL_HOME/bin</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>好了，现在erlang的已经配置好了，现在我们来测试一下是否安装成功,在控制台输入命令erl，
如果在erlang shell里出现下图所示就说明安装成功了：
此处省略截图了…</p>

<h3 id="centosrabbitmq-server-315">在CentOS上安装rabbitmq-server-3.1.5</h3>
<p>在本节中我们来看一下如何在CentOS上安装RabbitMQ。
我们使用的rabbitmq的版本是rabbitmq-server-3.1.5.tar.gz，CentOS的版本是CentOS 6.4。</p>

<p>在安装rabbitmq之前需要先安装python和erlang，
这两部分的安装过程请参看在CentOS 6.4上安装python和在 CentOS 6.4上安装Erlang，这里不再赘述。</p>

<p>安装rabbitmq的具体步骤如下：</p>

<p><strong>1、下载rabbitmq-server-3.1.5.tar.gz文件，并解压之：</strong></p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cd /usr/local
</span><span class="line">wget http://www.rabbitmq.com/releases/rabbitmq-server/v3.1.5/rabbitmq-server-3.1.5.tar.gz
</span><span class="line">chmod +x rabbitmq-server-3.1.5.tar.gz
</span><span class="line">tar -xzvf rabbitmq-server-3.1.5.tar.gz</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><strong>2、在编译rabbitmq源码之前先要安装其需要依赖包：</strong></p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">yum -y install xmlto</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>否则会编译不通过：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">/bin/sh: line 1: xmlto: command not found</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><strong>3、开始编译源代码：</strong></p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cd rabbitmq-server-3.1.5
</span><span class="line">make
</span><span class="line">#将rabbitmq编译到/opt/mq/rabbitmq目录
</span><span class="line">make install TARGET_DIR=/opt/mq/rabbitmq SBIN_DIR=/opt/mq/rabbitmq/sbin MAN_DIR=/opt/mq/rabbitmq/man</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><strong>4、安装web插件管理界面</strong></p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cd /opt/mq/rabbitmq/sbin
</span><span class="line">mkdir /etc/rabbitmq/
</span><span class="line">rabbitmq-plugins enable rabbitmq_management</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><strong>5、好了，到这里rabbitmq已经配置好了，可以启动了：</strong></p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">./rabbitmq-server start &amp;</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>我运行的时候报错了，ERROR: epmd error for host “springzoo”: timeout (timed out)</p>

<p>更改下/etc/hosts:</p>

<pre><code>127.0.0.1   localhost springzoo
::1         localhost springzoo
</code></pre>

<p>接下来我们查看下端口</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ps aux | grep rabbitmq #查看端口，默认就是5672
</span><span class="line">netstat -tnlp | grep 5672</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>应该是下面的结果</p>

<pre><code>tcp        0      0 0.0.0.0:15672               0.0.0.0:*                   LISTEN      30435/beam.smp
tcp        0      0 0.0.0.0:55672               0.0.0.0:*                   LISTEN      30435/beam.smp
tcp        0      0 :::5672                     :::*                        LISTEN      30435/beam.smp
</code></pre>

<p>如果看到下面的信息就表明已经启动成功了！
省略截图….</p>

<p>最好我们就可以在浏览器上输入http://127.0.0.1:15672/登录管理界面了</p>

<p>使用登录的名户名和密码默认都算guest，登录后的页面如下：</p>

<p>截图再次省略…</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用python开发RabbitMQ应用]]></title>
    <link href="http://cmback.github.io/blog/20150425/rabbitmq-python-client.html"/>
    <updated>2015-04-25T11:21:34+08:00</updated>
    <id>http://cmback.github.io/blog/20150425/rabbitmq-python-client</id>
    <content type="html"><![CDATA[<p>参考了RabbitMQ网站上提供的英文版本入门指南: <a href="http://www.rabbitmq.com/getstarted.html">http://www.rabbitmq.com/getstarted.html</a></p>

<p>测试环境：CentOS 6.2</p>

<p><strong>1，测试环境准备</strong></p>

<p>安装python（一般系统都自带了python）</p>

<p>安装RabbitMQ server可以参考前面的文章。</p>

<p>安装pika</p>

<p>使用pip安装的时候可能会报错：</p>

<p><code>importerror no module named pkg_resources</code></p>

<p>请用下面命令解决这个问题：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ curl https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py | python</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后还可能出现：</p>

<p><code>pkg_resources.distributionnotfound pip==1.4.1</code></p>

<p>这时候先把pip卸载掉，执行：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo yum remove python-pip</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>然后去下载最新的get-pip.py文件，执行<code>python get-pip.py</code>安装</p>

<p>在<code>/etc/profile</code>里面将<code>/usr/local/python27/bin</code>加入PATH最前面<!--more--></p>

<p>把rabbitmq server启动一下和准备好测试目录rabbitmq_app：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ /usr/local/rabbitmq/sbin/rabbitmq-server -detached
</span><span class="line">$ cd ~
</span><span class="line">$ mkdir -p test /rabbitmq_app
</span><span class="line">$ cd test /rabbitmq_app
</span><span class="line">$ mkdir tut1 tut2 tut3 tut4 tut5 tut6</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>2，实例一：来个hello world程序</strong></p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ cd tut1
</span><span class="line">$ vim send.py (代码如下)
</span><span class="line">$ vim receive.py (代码如下)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>首先是消息发送程序: send.py</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#!/usr/bin/env python</span>
</span><span class="line"><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">sys</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">pika</span>
</span><span class="line"><span class="n">connection</span> <span class="o">=</span> <span class="n">pika</span><span class="o">.</span><span class="n">BlockingConnection</span><span class="p">(</span><span class="n">pika</span><span class="o">.</span><span class="n">ConnectionParameters</span><span class="p">(</span><span class="s">&#39;localhost&#39;</span><span class="p">))</span>
</span><span class="line"><span class="n">channel</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="n">channel</span><span class="p">()</span>
</span><span class="line"><span class="n">channel</span><span class="o">.</span><span class="n">queue_declare</span><span class="p">(</span><span class="n">queue</span> <span class="o">=</span> <span class="s">&#39;hello&#39;</span><span class="p">)</span>
</span><span class="line"><span class="k">if</span> <span class="nb">len</span> <span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">2</span> <span class="p">:</span>
</span><span class="line">     <span class="k">print</span> <span class="s">&#39;message is empty!&#39;</span>
</span><span class="line">     <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class="line"><span class="n">message</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class="line"><span class="n">channel</span><span class="o">.</span><span class="n">basic_publish</span><span class="p">(</span><span class="n">exchange</span> <span class="o">=</span> <span class="s">&#39;&#39;</span><span class="p">,</span> <span class="n">routing_key</span><span class="o">=</span><span class="s">&#39;hello&#39;</span><span class="p">,</span> <span class="n">body</span> <span class="o">=</span> <span class="n">message</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span> <span class="s">&quot;[x] sent: &#39;&quot;</span> <span class="o">+</span> <span class="n">message</span> <span class="o">+</span> <span class="s">&quot;&#39;</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class="line"><span class="n">connection</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>跑一下send.py发送一个消息</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="err">$</span> <span class="n">python</span> <span class="n">send</span><span class="o">.</span><span class="n">py</span> <span class="err">‘</span><span class="n">Hello</span> <span class="n">World</span><span class="err">!’</span>
</span><span class="line"><span class="err">$</span> <span class="n">python</span> <span class="n">send</span><span class="o">.</span><span class="n">py</span> <span class="err">‘你好刀哥’</span>
</span><span class="line"><span class="err">$</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="n">rabbitmq</span><span class="o">/</span><span class="n">sbin</span><span class="o">/</span><span class="n">rabbitmqctl</span> <span class="n">list_queues</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>结果如下面：</p>

<pre><code>Listing queues …
hello 2
… done .
</code></pre>

<p>如果你也看到hello队列里面有一个消息的话，就证明可以发消息了。</p>

<p>然后写一个接收消息脚本：receive.py</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#!/usr/bin/env python</span>
</span><span class="line"><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">pika</span>
</span><span class="line"><span class="n">connection</span> <span class="o">=</span> <span class="n">pika</span><span class="o">.</span><span class="n">BlockingConnection</span><span class="p">(</span><span class="n">pika</span><span class="o">.</span><span class="n">ConnectionParameters</span><span class="p">(</span> <span class="s">&#39;localhost&#39;</span> <span class="p">))</span>
</span><span class="line"><span class="n">channel</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="n">channel</span><span class="p">()</span>
</span><span class="line"><span class="n">channel</span><span class="o">.</span><span class="n">queue_declare</span><span class="p">(</span><span class="n">queue</span> <span class="o">=</span> <span class="s">&#39;hello&#39;</span> <span class="p">)</span>
</span><span class="line"><span class="k">print</span> <span class="s">&#39;[*] Waiting for messages. To exit press CTRL+C&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">callback</span><span class="p">(</span><span class="n">ch</span><span class="p">,</span> <span class="n">method</span><span class="p">,</span> <span class="n">properties</span><span class="p">,</span> <span class="n">body</span><span class="p">):</span>
</span><span class="line">     <span class="k">print</span> <span class="n">body</span>
</span><span class="line">
</span><span class="line"><span class="n">channel</span><span class="o">.</span><span class="n">basic_consume</span><span class="p">(</span><span class="n">callback</span><span class="p">,</span> <span class="n">queue</span> <span class="o">=</span> <span class="s">&#39;hello&#39;</span> <span class="p">,</span> <span class="n">no_ack</span> <span class="o">=</span> <span class="bp">True</span> <span class="p">)</span>
</span><span class="line"><span class="n">channel</span><span class="o">.</span><span class="n">start_consuming</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>其中第12行的 no_ack=True 表示消费完了这个消息以后不主动把完成状态通知rabbitmq。</p>

<p>然后开另外一个shell，执行一下receive.py</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="err">$</span> <span class="n">python</span> <span class="n">receive</span><span class="o">.</span><span class="n">py</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>结果：</p>

<pre><code>[*] Waiting for messages. To exit press CTRL+C
Hello World!
你好刀哥
</code></pre>

<p><strong>3，实例二：工作队列（work queue / task queue）</strong></p>

<p>一般应用于把比较耗时的任务从主线任务分离出来。比如一个http页面请求，
里面需要发送带大附件的邮件、或者是要处理一张头像图片等。这类型工作队列的处理端一般有多个worker进程，
分担队列里面的任务。这就有点负载均衡的策略在里面了。
尽量做到每个进程的工作量比较平均，而且是完成了一个任务才接 第二个任务。看看我们的实现吧。</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="err">$</span> <span class="n">cd</span> <span class="n">tut2</span>
</span><span class="line"><span class="err">$</span> <span class="n">vim</span> <span class="n">manager</span><span class="o">.</span><span class="n">py</span> <span class="p">(</span><span class="err">代码如下</span><span class="p">)</span>
</span><span class="line"><span class="err">$</span> <span class="n">vim</span> <span class="n">worker</span><span class="o">.</span><span class="n">py</span> <span class="p">(</span><span class="err">代码如下</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>首先是消息发送程序: manager.py</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#!/usr/bin/env python</span>
</span><span class="line"><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">pika</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">sys</span>
</span><span class="line"><span class="n">parameters</span> <span class="o">=</span> <span class="n">pika</span><span class="o">.</span><span class="n">ConnectionParameters</span><span class="p">(</span><span class="n">host</span> <span class="o">=</span> <span class="s">&#39;localhost&#39;</span> <span class="p">)</span>
</span><span class="line"><span class="n">connection</span> <span class="o">=</span> <span class="n">pika</span><span class="o">.</span><span class="n">BlockingConnection</span><span class="p">(</span><span class="n">parameters</span><span class="p">)</span>
</span><span class="line"><span class="n">channel</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="n">channel</span><span class="p">()</span>
</span><span class="line"><span class="n">channel</span><span class="o">.</span><span class="n">queue_declare</span><span class="p">(</span><span class="n">queue</span> <span class="o">=</span> <span class="s">&#39;task_queue&#39;</span> <span class="p">,</span> <span class="n">durable</span> <span class="o">=</span> <span class="bp">True</span> <span class="p">)</span>
</span><span class="line"><span class="n">message</span> <span class="o">=</span> <span class="s">&#39; &#39;</span> <span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span> <span class="mi">1</span> <span class="p">:])</span> <span class="ow">or</span> <span class="s">&quot;Hello World!&quot;</span>
</span><span class="line"><span class="n">channel</span><span class="o">.</span><span class="n">basic_publish</span><span class="p">(</span><span class="n">exchange</span> <span class="o">=</span> <span class="s">&#39;&#39;</span><span class="p">,</span>
</span><span class="line">                       <span class="n">routing_key</span> <span class="o">=</span> <span class="s">&#39;task_queue&#39;</span> <span class="p">,</span>
</span><span class="line">                       <span class="n">body</span> <span class="o">=</span> <span class="n">message</span><span class="p">,</span>
</span><span class="line">                       <span class="n">properties</span> <span class="o">=</span> <span class="n">pika</span><span class="o">.</span><span class="n">BasicProperties</span><span class="p">(</span>
</span><span class="line">                          <span class="n">delivery_mode</span> <span class="o">=</span> <span class="mi">2</span> <span class="p">,</span> <span class="c"># make message persistent</span>
</span><span class="line">                       <span class="p">))</span>
</span><span class="line"><span class="k">print</span> <span class="s">&quot; [x] Sent </span><span class="si">%r</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">message</span><span class="p">,)</span>
</span><span class="line"><span class="n">connection</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>其中第8行的 durable=True 声明了队列需要持久化，第14行的 delivery_mode = 2 声明了队列的消息需要持久化。</p>

<p>然后写一个接收消息脚本：worker.py</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#!/usr/bin/env python</span>
</span><span class="line"><span class="c"># -*- coding: utf-8 -*-</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">pika</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">time</span>
</span><span class="line"><span class="n">connection</span> <span class="o">=</span> <span class="n">pika</span><span class="o">.</span><span class="n">BlockingConnection</span><span class="p">(</span><span class="n">pika</span><span class="o">.</span><span class="n">ConnectionParameters</span><span class="p">(</span>
</span><span class="line">         <span class="n">host</span> <span class="o">=</span> <span class="s">&#39;localhost&#39;</span> <span class="p">))</span>
</span><span class="line"><span class="n">channel</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="n">channel</span><span class="p">()</span>
</span><span class="line"><span class="n">channel</span><span class="o">.</span><span class="n">queue_declare</span><span class="p">(</span><span class="n">queue</span> <span class="o">=</span> <span class="s">&#39;task_queue&#39;</span> <span class="p">,</span> <span class="n">durable</span> <span class="o">=</span> <span class="bp">True</span> <span class="p">)</span>
</span><span class="line"><span class="k">print</span> <span class="s">&#39; [*] Waiting for messages. To exit press CTRL+C&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">callback</span><span class="p">(</span><span class="n">ch</span><span class="p">,</span> <span class="n">method</span><span class="p">,</span> <span class="n">properties</span><span class="p">,</span> <span class="n">body</span><span class="p">):</span>
</span><span class="line">     <span class="k">print</span> <span class="s">&quot; [x] Received </span><span class="si">%r</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">body</span><span class="p">,)</span>
</span><span class="line">     <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span> <span class="n">body</span><span class="o">.</span><span class="n">count</span><span class="p">(</span> <span class="s">&#39;.&#39;</span> <span class="p">)</span> <span class="p">)</span>
</span><span class="line">     <span class="k">print</span> <span class="s">&quot; [x] Done&quot;</span>
</span><span class="line">     <span class="n">ch</span><span class="o">.</span><span class="n">basic_ack</span><span class="p">(</span><span class="n">delivery_tag</span> <span class="o">=</span> <span class="n">method</span><span class="o">.</span><span class="n">delivery_tag</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">channel</span><span class="o">.</span><span class="n">basic_qos</span><span class="p">(</span><span class="n">prefetch_count</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">)</span>
</span><span class="line"><span class="n">channel</span><span class="o">.</span><span class="n">basic_consume</span><span class="p">(</span><span class="n">callback</span><span class="p">,</span>
</span><span class="line">                       <span class="n">queue</span> <span class="o">=</span> <span class="s">&#39;task_queue&#39;</span> <span class="p">)</span>
</span><span class="line"><span class="n">channel</span><span class="o">.</span><span class="n">start_consuming</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>其中第15行的 basic_ack 是执行完任务通知rabbitmq，
第17行的basic_qos是告诉rabbitmq只有当worker完成了任务以后才分派1条新的消息，实现公平分派。</p>

<p>测试方法，开3个bash，2个跑worker，1个跑manager：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="err">$</span> <span class="n">python</span> <span class="n">manager</span><span class="o">.</span><span class="n">py</span> <span class="n">task1</span><span class="o">.</span>
</span><span class="line"><span class="err">$</span> <span class="n">python</span> <span class="n">manager</span><span class="o">.</span><span class="n">py</span> <span class="n">task2</span><span class="o">..</span>
</span><span class="line"><span class="err">$</span> <span class="n">python</span> <span class="n">manager</span><span class="o">.</span><span class="n">py</span> <span class="n">task3</span><span class="err">…</span>
</span><span class="line"><span class="err">$</span> <span class="n">python</span> <span class="n">manager</span><span class="o">.</span><span class="n">py</span> <span class="n">task4</span><span class="err">…</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>点号数量决定worker工作的时间( 其实是睡觉时间，呵呵 time.sleep(body.count(‘.’)) )。
而在worker那边，可以看到每个worker都处理了两个任务。
这种分配机制就是所谓的循环调度（Round-robin dispatching）</p>

<p><strong>4，实例三：发布和订阅</strong></p>

<p>发布订阅模式，简单来说就像是广播，一个消息发布出来以后，所有订阅者都能听到，
至于接收到这个信息以后大家做什么就看具体个人了。</p>

<p>啊！怎么忽然冒出个X，是什么玩意！这个X就是所谓的exchange，简单来说就是消息的管家，
由他决定接收到的信息是放特定的队列，还是所有队列，还是直接丢弃。</p>

<p>其实在前两个实例里面，已经用到了exchange （channel.basic_publish(exchange=”,…），
这个exchange的名字为空，外号无名（人若无名，便可专心练剑~）。他会把你的消息都转达给routing_key指明的队列。
当我们声明了exchange以后，我们需要为queue和exchange建立联系，这时候，就要用到绑定（binding）了。</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="err">$</span> <span class="n">cd</span> <span class="n">tut3</span>
</span><span class="line"><span class="err">$</span> <span class="n">vim</span> <span class="n">emitlog</span><span class="o">.</span><span class="n">py</span> <span class="p">(</span><span class="err">代码如下</span><span class="p">)</span>
</span><span class="line"><span class="err">$</span> <span class="n">vim</span> <span class="n">recelog</span><span class="o">.</span><span class="n">py</span> <span class="p">(</span><span class="err">代码如下</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>日志生产者</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>emitlog.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#!/usr/bin/env python</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">pika</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">sys</span>
</span><span class="line">
</span><span class="line"><span class="n">connection</span> <span class="o">=</span> <span class="n">pika</span><span class="o">.</span><span class="n">BlockingConnection</span><span class="p">(</span><span class="n">pika</span><span class="o">.</span><span class="n">ConnectionParameters</span><span class="p">(</span>
</span><span class="line">         <span class="n">host</span> <span class="o">=</span> <span class="s">&#39;localhost&#39;</span> <span class="p">))</span>
</span><span class="line"><span class="n">channel</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="n">channel</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="n">channel</span><span class="o">.</span><span class="n">exchange_declare</span><span class="p">(</span><span class="n">exchange</span> <span class="o">=</span> <span class="s">&#39;logs&#39;</span> <span class="p">,</span>
</span><span class="line">                          <span class="nb">type</span> <span class="o">=</span> <span class="s">&#39;fanout&#39;</span> <span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="n">message</span> <span class="o">=</span> <span class="s">&#39; &#39;</span> <span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span> <span class="mi">1</span> <span class="p">:])</span> <span class="ow">or</span> <span class="s">&quot;info: Hello World!&quot;</span>
</span><span class="line"><span class="n">channel</span><span class="o">.</span><span class="n">basic_publish</span><span class="p">(</span><span class="n">exchange</span> <span class="o">=</span> <span class="s">&#39;logs&#39;</span> <span class="p">,</span>
</span><span class="line">                       <span class="n">routing_key</span> <span class="o">=</span> <span class="s">&#39;&#39;</span><span class="p">,</span>
</span><span class="line">                       <span class="n">body</span> <span class="o">=</span> <span class="n">message</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span> <span class="s">&quot; [x] Sent </span><span class="si">%r</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">message</span><span class="p">,)</span>
</span><span class="line"><span class="n">connection</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>然后是日志消费者</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>recelog.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#!/usr/bin/env python</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">pika</span>
</span><span class="line">
</span><span class="line"><span class="n">connection</span> <span class="o">=</span> <span class="n">pika</span><span class="o">.</span><span class="n">BlockingConnection</span><span class="p">(</span><span class="n">pika</span><span class="o">.</span><span class="n">ConnectionParameters</span><span class="p">(</span>
</span><span class="line">         <span class="n">host</span> <span class="o">=</span> <span class="s">&#39;localhost&#39;</span> <span class="p">))</span>
</span><span class="line"><span class="n">channel</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="n">channel</span><span class="p">()</span>
</span><span class="line"><span class="n">channel</span><span class="o">.</span><span class="n">exchange_declare</span><span class="p">(</span><span class="n">exchange</span> <span class="o">=</span> <span class="s">&#39;logs&#39;</span> <span class="p">,</span>
</span><span class="line">                          <span class="nb">type</span> <span class="o">=</span> <span class="s">&#39;fanout&#39;</span> <span class="p">)</span>
</span><span class="line"><span class="n">result</span> <span class="o">=</span> <span class="n">channel</span><span class="o">.</span><span class="n">queue_declare</span><span class="p">(</span><span class="n">exclusive</span> <span class="o">=</span> <span class="bp">True</span> <span class="p">)</span>
</span><span class="line"><span class="n">queue_name</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="n">method</span><span class="o">.</span><span class="n">queue</span>
</span><span class="line"><span class="n">channel</span><span class="o">.</span><span class="n">queue_bind</span><span class="p">(</span><span class="n">exchange</span> <span class="o">=</span> <span class="s">&#39;logs&#39;</span> <span class="p">,</span>
</span><span class="line">                    <span class="n">queue</span> <span class="o">=</span> <span class="n">queue_name</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span> <span class="s">&#39; [*] Waiting for logs. To exit press CTRL+C&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">callback</span><span class="p">(</span><span class="n">ch</span><span class="p">,</span> <span class="n">method</span><span class="p">,</span> <span class="n">properties</span><span class="p">,</span> <span class="n">body</span><span class="p">):</span>
</span><span class="line">     <span class="k">print</span> <span class="s">&quot; [x] </span><span class="si">%r</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">body</span><span class="p">,)</span>
</span><span class="line">
</span><span class="line"><span class="n">channel</span><span class="o">.</span><span class="n">basic_consume</span><span class="p">(</span><span class="n">callback</span><span class="p">,</span>
</span><span class="line">                       <span class="n">queue</span> <span class="o">=</span> <span class="n">queue_name</span><span class="p">,</span>
</span><span class="line">                       <span class="n">no_ack</span> <span class="o">=</span> <span class="bp">True</span> <span class="p">)</span>
</span><span class="line"><span class="n">channel</span><span class="o">.</span><span class="n">start_consuming</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>测试：</p>

<p>和前一个实例差不多。开3个bash，2个跑recelog，1个跑emitlog。
查看recelog是否都收到emitlog发送的消息。代码里面用 了一个fanout(意思是成扇形展开)类型的exchange，
只要和exchange绑定的queue都能收到一份消息的 copy，routing_key会被忽略掉。</p>

<p><strong>5，路由模式 （选择接收信息）</strong></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>recelog.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="err">$</span> <span class="n">cd</span> <span class="n">tut4</span>
</span><span class="line"><span class="err">$</span> <span class="n">vim</span> <span class="n">emitlog</span><span class="o">.</span><span class="n">py</span> <span class="p">(</span><span class="err">代码如下</span><span class="p">)</span>
</span><span class="line"><span class="err">$</span> <span class="n">vim</span> <span class="n">recelog</span><span class="o">.</span><span class="n">py</span> <span class="p">(</span><span class="err">代码如下</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>生产者</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>emitlog.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#!/usr/bin/env python</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">pika</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">sys</span>
</span><span class="line">
</span><span class="line"><span class="n">connection</span> <span class="o">=</span> <span class="n">pika</span><span class="o">.</span><span class="n">BlockingConnection</span><span class="p">(</span><span class="n">pika</span><span class="o">.</span><span class="n">ConnectionParameters</span><span class="p">(</span>
</span><span class="line">         <span class="n">host</span> <span class="o">=</span> <span class="s">&#39;localhost&#39;</span> <span class="p">))</span>
</span><span class="line"><span class="n">channel</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="n">channel</span><span class="p">()</span>
</span><span class="line"><span class="n">channel</span><span class="o">.</span><span class="n">exchange_declare</span><span class="p">(</span><span class="n">exchange</span> <span class="o">=</span> <span class="s">&#39;direct_logs&#39;</span> <span class="p">,</span>
</span><span class="line">                          <span class="nb">type</span> <span class="o">=</span> <span class="s">&#39;direct&#39;</span> <span class="p">)</span>
</span><span class="line"><span class="n">severity</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span> <span class="mi">1</span> <span class="p">]</span> <span class="k">if</span> <span class="nb">len</span> <span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="k">else</span> <span class="s">&#39;info&#39;</span>
</span><span class="line"><span class="n">message</span> <span class="o">=</span> <span class="s">&#39; &#39;</span> <span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span> <span class="mi">2</span> <span class="p">:])</span> <span class="ow">or</span> <span class="s">&#39;Hello World!&#39;</span>
</span><span class="line"><span class="n">channel</span><span class="o">.</span><span class="n">basic_publish</span><span class="p">(</span><span class="n">exchange</span> <span class="o">=</span> <span class="s">&#39;direct_logs&#39;</span> <span class="p">,</span>
</span><span class="line">                       <span class="n">routing_key</span> <span class="o">=</span> <span class="n">severity</span><span class="p">,</span>
</span><span class="line">                       <span class="n">body</span> <span class="o">=</span> <span class="n">message</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span> <span class="s">&quot; [x] Sent </span><span class="si">%r</span><span class="s">:</span><span class="si">%r</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">severity</span><span class="p">,</span> <span class="n">message</span><span class="p">)</span>
</span><span class="line"><span class="n">connection</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>这里声明exchange时类型定义为direct（直接匹配），就是说只有当一个信息的routing_key和队列的binding_key一 致时，
信息才会被放入到这个队列。消息发布给exchange时必须带上routing_key。其实在消息生产端，队列这个概念是透明的。</p>

<p>消费者</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>recelog.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c">#!/usr/bin/env python</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">pika</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">sys</span>
</span><span class="line">
</span><span class="line"><span class="n">connection</span> <span class="o">=</span> <span class="n">pika</span><span class="o">.</span><span class="n">BlockingConnection</span><span class="p">(</span><span class="n">pika</span><span class="o">.</span><span class="n">ConnectionParameters</span><span class="p">(</span>
</span><span class="line">         <span class="n">host</span> <span class="o">=</span> <span class="s">&#39;localhost&#39;</span> <span class="p">))</span>
</span><span class="line"><span class="n">channel</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="n">channel</span><span class="p">()</span>
</span><span class="line">
</span><span class="line"><span class="n">channel</span><span class="o">.</span><span class="n">exchange_declare</span><span class="p">(</span><span class="n">exchange</span> <span class="o">=</span> <span class="s">&#39;direct_logs&#39;</span> <span class="p">,</span>
</span><span class="line">                          <span class="nb">type</span> <span class="o">=</span> <span class="s">&#39;direct&#39;</span> <span class="p">)</span>
</span><span class="line"><span class="n">result</span> <span class="o">=</span> <span class="n">channel</span><span class="o">.</span><span class="n">queue_declare</span><span class="p">(</span><span class="n">exclusive</span> <span class="o">=</span> <span class="bp">True</span> <span class="p">)</span>
</span><span class="line"><span class="n">queue_name</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="n">method</span><span class="o">.</span><span class="n">queue</span>
</span><span class="line"><span class="n">severities</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span> <span class="mi">1</span> <span class="p">:]</span>
</span><span class="line"><span class="k">if</span> <span class="ow">not</span> <span class="n">severities</span><span class="p">:</span>
</span><span class="line">     <span class="k">print</span> <span class="o">&gt;&gt;</span> <span class="n">sys</span><span class="o">.</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;Usage: </span><span class="si">%s</span><span class="s"> [info] [warning] [error]&quot;</span> <span class="o">%</span> \
</span><span class="line">                          <span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span> <span class="mi">0</span> <span class="p">],)</span>
</span><span class="line">     <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span> <span class="mi">1</span> <span class="p">)</span>
</span><span class="line"><span class="k">for</span> <span class="n">severity</span> <span class="ow">in</span> <span class="n">severities</span><span class="p">:</span>
</span><span class="line">     <span class="n">channel</span><span class="o">.</span><span class="n">queue_bind</span><span class="p">(</span><span class="n">exchange</span> <span class="o">=</span> <span class="s">&#39;direct_logs&#39;</span> <span class="p">,</span>
</span><span class="line">                        <span class="n">queue</span> <span class="o">=</span> <span class="n">queue_name</span><span class="p">,</span>
</span><span class="line">                        <span class="n">routing_key</span> <span class="o">=</span> <span class="n">severity</span><span class="p">)</span>
</span><span class="line"><span class="k">print</span> <span class="s">&#39; [*] Waiting for logs. To exit press CTRL+C&#39;</span>
</span><span class="line"><span class="k">def</span> <span class="nf">callback</span><span class="p">(</span><span class="n">ch</span><span class="p">,</span> <span class="n">method</span><span class="p">,</span> <span class="n">properties</span><span class="p">,</span> <span class="n">body</span><span class="p">):</span>
</span><span class="line">     <span class="k">print</span> <span class="s">&quot; [x] </span><span class="si">%r</span><span class="s">:</span><span class="si">%r</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">method</span><span class="o">.</span><span class="n">routing_key</span><span class="p">,</span> <span class="n">body</span><span class="p">,)</span>
</span><span class="line"><span class="n">channel</span><span class="o">.</span><span class="n">basic_consume</span><span class="p">(</span><span class="n">callback</span><span class="p">,</span>
</span><span class="line">                       <span class="n">queue</span> <span class="o">=</span> <span class="n">queue_name</span><span class="p">,</span>
</span><span class="line">                       <span class="n">no_ack</span> <span class="o">=</span> <span class="bp">True</span> <span class="p">)</span>
</span><span class="line"><span class="n">channel</span><span class="o">.</span><span class="n">start_consuming</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这里首先定义exchange，和消息发送端是一样的。然后定义队列，队列是自动命名，
并且只要进程终止，队列就会终止。然后把队列和 exchange绑定，绑定时的routing_key是用户输入的，
如果输入多个key，就做多次的绑定。注意这里的队列还是一个。如果你需要建立两个 队列，就得跑两次这个python脚本。</p>

<p><strong>6，topic和rpc</strong></p>

<p>官方tutorial还有两个高级一点的实例，topic和rpc，这里就不作说明了，留着大家学学英文吧 :)</p>

<p>RabbitMQ提供了很多消息队列客户端代码，比如python，java，c等等，大家可以根据产品或项目的实际情况选择。关键是原理必须搞懂。</p>

<p><strong>其他资源：</strong></p>

<p>中文入门篇：<a href="http://adamlu.net/dev/2011/09/rabbitmq-get-started/">http://adamlu.net/dev/2011/09/rabbitmq-get-started/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[归并排序中对小数组采用插入排序]]></title>
    <link href="http://cmback.github.io/blog/20150424/merge-sort.html"/>
    <updated>2015-04-24T10:47:35+08:00</updated>
    <id>http://cmback.github.io/blog/20150424/merge-sort</id>
    <content type="html"><![CDATA[<p>纯归并排序的复杂度为O(nlgn)，而纯插入排序的时间复杂度为O(n^2)。数据量很大的时候采用归并排序。</p>

<p>但是在n较小的时候插入排序可能运行的会更快点。因此在归并排序中当子问题变得足够小时，
采用插入排序来使得递归的叶子变粗可以加快排序速度。那么这个足够小到底怎么去衡量呢？ 请看下面：</p>

<p>这么几个我不证明了，比较简单：</p>

<ol>
  <li>插入排序最坏情况下可以在O(nk)时间内排序每个长度为k的n/k个子列表
*. 在最坏情况下可在O(nlg(n/k))的时间内合并这些子表
*. 修订后的算法的最坏情况运行时间复杂度是O(nk + nlg(n/k))</li>
</ol>

<p>那么，O(nk+nlg(n/k))=O(nlgn).只能最大是k=O(lgn).等式左边中第一项是高阶项。
k如果大于lgn,则比归并排序复杂度大了。
左边可以写成nk+nlgn-nlgk，k等于lgn时，就是2nlgn-nlglgn.忽略恒定系数，则与归并排序是一样的。
最后结论： k &lt; lg(n)的时候，使用插入排序。<!--more--></p>

<p>首先是插入排序的实现，这个比较简单：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">insertSort</span><span class="p">(</span><span class="n">seq</span><span class="p">):</span>
</span><span class="line">    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">seq</span><span class="p">)):</span>
</span><span class="line">        <span class="n">key</span> <span class="o">=</span> <span class="n">seq</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span><span class="line">        <span class="c"># insert arrays[j] into the sorted seq[0...j-1]</span>
</span><span class="line">        <span class="n">i</span> <span class="o">=</span> <span class="n">j</span> <span class="o">-</span> <span class="mi">1</span>
</span><span class="line">        <span class="k">while</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">seq</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">key</span><span class="p">:</span>
</span><span class="line">            <span class="n">seq</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">seq</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class="line">            <span class="n">i</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class="line">        <span class="n">seq</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">key</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>然后是利用了插入排序的归并排序算法：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="n">log</span>
</span><span class="line">
</span><span class="line"><span class="n">__author__</span> <span class="o">=</span> <span class="s">&#39;Xiong Neng&#39;</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">mergeSort</span><span class="p">(</span><span class="n">seq</span><span class="p">):</span>
</span><span class="line">    <span class="n">mergeSortRange</span><span class="p">(</span><span class="n">seq</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">log</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">seq</span><span class="p">))</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">mergeOrderedSeq</span><span class="p">(</span><span class="n">seq</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">middle</span><span class="p">,</span> <span class="n">right</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">    seq: 待排序序列</span>
</span><span class="line"><span class="sd">    left &lt;= middle &lt;= right</span>
</span><span class="line"><span class="sd">    子数组seq[left..middle]和seq[middle+1..right]都是排好序的</span>
</span><span class="line"><span class="sd">    该排序的时间复杂度为O(n)</span>
</span><span class="line"><span class="sd">    &quot;&quot;&quot;</span>
</span><span class="line">    <span class="n">tempSeq</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class="line">    <span class="n">i</span> <span class="o">=</span> <span class="n">left</span>
</span><span class="line">    <span class="n">j</span> <span class="o">=</span> <span class="n">middle</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class="line">    <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">middle</span> <span class="ow">and</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="p">:</span>
</span><span class="line">        <span class="k">if</span> <span class="n">seq</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">seq</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
</span><span class="line">            <span class="n">tempSeq</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">seq</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class="line">            <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="n">tempSeq</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">seq</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
</span><span class="line">            <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class="line">    <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">middle</span><span class="p">:</span>
</span><span class="line">        <span class="n">tempSeq</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">seq</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">middle</span> <span class="o">+</span> <span class="mi">1</span><span class="p">])</span>
</span><span class="line">    <span class="k">else</span><span class="p">:</span>
</span><span class="line">        <span class="n">tempSeq</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">seq</span><span class="p">[</span><span class="n">j</span><span class="p">:</span><span class="n">right</span> <span class="o">+</span> <span class="mi">1</span><span class="p">])</span>
</span><span class="line">    <span class="n">seq</span><span class="p">[</span><span class="n">left</span><span class="p">:</span><span class="n">right</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">tempSeq</span><span class="p">[:]</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">mergeSortRange</span><span class="p">(</span><span class="n">seq</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">end</span><span class="p">,</span> <span class="n">threshold</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot;</span>
</span><span class="line"><span class="sd">    归并排序一个序列的子序列</span>
</span><span class="line"><span class="sd">    start: 子序列的start下标</span>
</span><span class="line"><span class="sd">    end: 子序列的end下标</span>
</span><span class="line"><span class="sd">    threshold: 待排序长度低于这个值，就采用插入排序</span>
</span><span class="line"><span class="sd">    &quot;&quot;&quot;</span>
</span><span class="line">    <span class="k">if</span> <span class="n">end</span> <span class="o">-</span> <span class="n">start</span> <span class="o">&lt;</span> <span class="n">threshold</span><span class="p">:</span>
</span><span class="line">        <span class="n">tempSeq</span> <span class="o">=</span> <span class="n">seq</span><span class="p">[</span><span class="n">start</span><span class="p">:</span> <span class="n">end</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span>
</span><span class="line">        <span class="n">insertSort</span><span class="p">(</span><span class="n">tempSeq</span><span class="p">)</span>
</span><span class="line">        <span class="n">seq</span><span class="p">[</span><span class="n">start</span><span class="p">:</span> <span class="n">end</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">tempSeq</span><span class="p">[:]</span>
</span><span class="line">    <span class="k">elif</span> <span class="n">start</span> <span class="o">&lt;</span> <span class="n">end</span><span class="p">:</span>  <span class="c"># 如果start &gt;= end就终止递归调用</span>
</span><span class="line">        <span class="n">middle</span> <span class="o">=</span> <span class="p">(</span><span class="n">start</span> <span class="o">+</span> <span class="n">end</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class="line">        <span class="n">mergeSortRange</span><span class="p">(</span><span class="n">seq</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">middle</span><span class="p">,</span> <span class="n">threshold</span><span class="p">)</span>  <span class="c"># 排好左边的一半</span>
</span><span class="line">        <span class="n">mergeSortRange</span><span class="p">(</span><span class="n">seq</span><span class="p">,</span> <span class="n">middle</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">end</span><span class="p">,</span> <span class="n">threshold</span><span class="p">)</span>  <span class="c"># 再排好右边的一半</span>
</span><span class="line">        <span class="n">mergeOrderedSeq</span><span class="p">(</span><span class="n">seq</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">middle</span><span class="p">,</span> <span class="n">end</span><span class="p">)</span>  <span class="c"># 最后合并排序结果</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class="line">    <span class="n">test</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">8</span><span class="p">]</span>
</span><span class="line">    <span class="n">mergeSort</span><span class="p">(</span><span class="n">test</span><span class="p">)</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="n">test</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>比较清楚，应该不需要再多解释了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[redis入门与安装]]></title>
    <link href="http://cmback.github.io/blog/20150417/redis-install.html"/>
    <updated>2015-04-17T16:44:16+08:00</updated>
    <id>http://cmback.github.io/blog/20150417/redis-install</id>
    <content type="html"><![CDATA[<h2 id="redis">一 Redis介绍</h2>

<p>Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。从2010年3月15日起，Redis的开发工作由VMware主持。</p>

<p>Redis能运行在大多数POSIX(Linux, *BSD, OS X 和Solaris等)系统上，官方没有支持Windows的版本。目前最新的版本是2.2.11，这个版本主要是修复了一个2.2.7版本中遍历方式优化带来的一个bug。</p>

<p>和普通的Key-Value结构不同，Redis的Key支持灵活的数据结构，除了strings，还有hashes、lists、 sets 和sorted sets等结构。正是这些灵活的数据结构，丰富了Redis的应用场景，能满足更多业务上的灵活存储需求。</p>

<p>Redis的数据都保存在内存中，而且底层实现上是自己写了epoll event loop部分，而没有采用开源的libevent等通用框架，所以读写效率很高。
为了实现数据的持久化，Redis支持定期刷新(可通过配置实现)或写日志的方式来保存数据到磁盘。</p>

<p><strong>1. 数据类型</strong></p>

<p>作为Key-value型数据库，Redis也提供了键(Key)和键值(Value)的映射关系。但是，除了常规的数值或字符串，Redis的键值还可以是以下形式之一：</p>

<ul>
  <li>Lists (列表)</li>
  <li>Sets (集合)</li>
  <li>Sorted sets (有序集合)</li>
  <li>Hashes (哈希表)<!--more--></li>
</ul>

<p>键值的数据类型决定了该键值支持的操作。Redis支持诸如列表、集合或有序集合的交集、并集、查集等高级原子操作;同时，如果键值的类型是普通数字，Redis则提供自增等原子操作。</p>

<p><strong>2. 持久化</strong></p>

<p>通常，Redis将数据存储于内存中，或被配置为使用虚拟内存。通过两种方式可以实现数据持久化：使用截图的方式，
将内存中的数据不断写入磁盘;或使用类似MySQL的日志方式，记录每次更新的日志。前者性能较高，但是可能会引起一定程度的数据丢失;后者相反。</p>

<p><strong>3. 主从同步</strong></p>

<p>Redis支持将数据同步到多台从库上，这种特性对提高读取性能非常有益。</p>

<p><strong>4. 性能</strong></p>

<p>相比需要依赖磁盘记录每个更新的数据库，基于内存的特性无疑给Redis带来了非常优秀的性能。读写操作之间有显著的性能差异。</p>

<p><strong>5. 提供API的语言</strong></p>

<p>很多…</p>

<p><strong>6. 适用场景</strong></p>

<p>毫无疑问，Redis开创了一种新的数据存储思路，使用Redis，我们不用在面对功能单调的数据库时，把精力放在如何把大象放进冰箱这样的问题上，
而是利用Redis灵活多变的数据结构和数据操作，为不同的大象构建不同的冰箱。希望你喜欢这个比喻。</p>

<p>下面是Redis适用的一些场景:</p>

<p>(1)、取最新N个数据的操作</p>

<p>比如典型的取你网站的最新文章，通过下面方式，我们可以将最新的5000条评论的ID放在Redis的List集合中，并将超出集合部分从数据库获取。
使用LPUSH latest.comments命令，向list集合中插入数据。
插入完成后再用LTRIM latest.comments 0 5000命令使其永远只保存最近5000个ID，然后我们在客户端获取某一页评论时可以用下面的逻辑：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">FUNCTION get_latest_comments(start,num_items):
</span><span class="line">    id_list = redis.lrange("latest.comments",start,start+num_items-1)
</span><span class="line">    IF id_list.length &lt; num_items
</span><span class="line">        id_list = SQL_DB("SELECT ... ORDER BY time LIMIT ...")
</span><span class="line">    END
</span><span class="line">    RETURN id_list
</span><span class="line">END</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果你还有不同的筛选维度，比如某个分类的最新N条，那么你可以再建一个按此分类的List，只存ID的话，Redis是非常高效的。</p>

<p>(2)、排行榜应用，取TOP N操作</p>

<p>这个需求与上面需求的不同之处在于，前面操作以时间为权重，这个是以某个条件为权重，比如按顶的次数排序，这时候就需要我们的sorted set出马了，
将你要排序的值设置成sorted set的score，将具体的数据设置成相应的value，每次只需要执行一条ZADD命令即可。</p>

<p>(3)、需要精准设定过期时间的应用</p>

<p>比如你可以把上面说到的sorted set的score值设置成过期时间的时间戳，那么就可以简单地通过过期时间排序，定时清除过期数据了，不仅是清除Redis中的过期数据，
你完全可以把Redis里这个过期时间当成是对数据库中数据的索引，用Redis来找出哪些数据需要过期删除，然后再精准地从数据库中删除相应的记录。</p>

<p>(4)、计数器应用</p>

<p>Redis的命令都是原子性的，你可以轻松地利用INCR，DECR命令来构建计数器系统。</p>

<p>(5)、Uniq操作，获取某段时间所有数据排重值</p>

<p>这个使用Redis的set数据结构最合适了，只需要不断地将数据往set中扔就行了，set意为集合，所以会自动排重。</p>

<p>(6)、实时系统，反垃圾系统</p>

<p>通过上面说到的set功能，你可以知道一个终端用户是否进行了某个操作，可以找到其操作的集合并进行分析统计对比等。没有做不到，只有想不到。</p>

<p>(7)、Pub/Sub构建实时消息系统</p>

<p>Redis的Pub/Sub系统可以构建实时的消息系统，比如很多用Pub/Sub构建的实时聊天系统的例子。</p>

<p>(8)、构建队列系统</p>

<p>使用list可以构建队列系统，使用sorted set甚至可以构建有优先级的队列系统。</p>

<p>(9)、缓存</p>

<p>这个不必说了，性能优于Memcached，数据结构更多样化。</p>

<h2 id="section">二、安装及使用</h2>

<p><strong>步骤一: 下载Redis</strong></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">wget http://redis.googlecode.com/files/redis-2.6.14.tar.gz
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>步骤二: 编译源程序并且测试一下</strong></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">mkdir env
</span><span class="line">tar -zxvf redis-2.6.14.tar.gz -C env/
</span><span class="line"><span class="nb">cd </span>redis-2.6.14/
</span><span class="line">make
</span><span class="line">yum install tcl
</span><span class="line">make <span class="nb">test</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>最后测试结果为：
	\o/ All tests passed without errors!
	Cleanup: may take some time… OK
那么，恭喜你，成功安装了。
安装完成后，会在src目录下生成几个可执行文件：</p>

<pre><code>redis-server：Redis服务器的daemon启动程序
redis-cli：Redis命令行操作工具。当然，你也可以用telnet根据其纯文本协议来操作
redis-benchmark：Redis性能测试工具，测试Redis在你的系统及你的配置下的读写性能
</code></pre>

<p><strong>步骤三： 生产环境下的Redis的安装与启动</strong></p>

<p>1，新建目录/usr/local/redis/，将上面make后的文件夹复制到这个下面，同时将redis的bin目录加入的PATH中</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">vi /etc/profile
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>添加export PATH=$PATH:/usr/local/resin/src，然后执行</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">source</span> /etc/profile
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>2，新建/etc/redis/，用来存放redis的配置文件</p>

<p>3，新建/var/redis/端口号/，用来存放每个redis实例的持久化文件</p>

<p>4，修改配置文件，首先将配置文件模板复制到/etc/redis 目录中，以端口号命名，比如6379.conf，然后至少修改以下四个配置项：
	daemonize yes  以redis守护进程模式运行
	pidfile /var/run/redis_端口号.pid  设置redis的PID文件位置
	port  端口号  设置redis实例监听的端口号
	dir  /var/redis/端口号  设置持久化文件存放的位置
5，配置初始化脚本</p>

<p>首先将初始化脚本$REDIS_HOME/utils/目录中的redis_init_script复制到/etc/init.d/目录中，修改名字为redis_端口号，其中端口号表示要让redis监听的端口号，
客户端通过该端口号连接redis，然后修改脚本的REDISPORT变量值为同样的端口号。同时修改EXEC和CLIEXEC的执行路径变量</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">cp utils/redis_init_script /etc/init.d/redis_6379
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>打开redis_6379，修改如下：
    REDISPORT=6379
    EXEC=/usr/local/redis/src/redis-server
    CLIEXEC=/usr/local/redis/src/redis-cli
6，执行/etc/init.d/redis_端口号 start  启动</p>

<p>7，执行/etc/init.d/redis_端口号 stop  停止，或者是用  $ redis-cli SHUTDOWN，
使用kill redis进程PID也可以正常结束redis，但不要用kill -9，谢谢。</p>

<p>8，配置redis服务随系统启动而启动</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">vi /etc/init.d/redis_6379
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>头部三行：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c">#!/bin/sh</span>
</span><span class="line"><span class="c">#chkconfig: 2345 80 90</span>
</span><span class="line"><span class="c">#description:redis_6379</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>然后使用chkconfig命令：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">chkconfig --add redis_6379
</span><span class="line">chkconfig redis_6379 on
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>步骤四: 客户端连接验证</strong></p>

<p>新打开一个Session输入：src/redis-cli，如果出现下面提示，那么您就可以开始Redis之旅了</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">src/redis-cli
</span><span class="line">redis 127.0.0.1:6379 &gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><strong>步骤五: 查看Redis日志</strong></p>

<p>查看服务器端session，即可对Redis的运行状况进行查看或分析了
以上的几个步骤就OK了!!这样一个简单的Redis数据库就可以畅通无阻地运行起来了。</p>

<p><strong>步骤六 停止Redis实例</strong></p>

<p>客户端来停止服务，如可以用shutdown来停止Redis实例, 具体如下:</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">src/redis-cli shutdown
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="redis-1">三、配置Redis</h2>
<p>使用配置文件启动：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">src/redis-server redis.conf
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>主要配置项：</p>

<p>Redis支持很多的参数，但都有默认值。</p>

<pre><code>●daemonize:
默认情况下，redis不是在后台运行的，如果需要在后台运行，把该项的值更改为yes。
●pidfile
当Redis在后台运行的时候，Redis默认会把pid文件放在/var/run/redis.pid，
你可以配置到其他地址。当运行多个redis服务时，需要指定不同的pid文件和端口。
●bind
指定Redis只接收来自于该IP地址的请求，如果不进行设置，那么将处理所有请求，在生产环境中最好设置该项。
●port
监听端口，默认为6379。
●timeout
设置客户端连接时的超时时间，单位为秒。当客户端在这段时间内没有发出任何指令，那么关闭该连接。
●loglevel
log等级分为4级，debug, verbose, notice, 和warning。生产环境下一般开启notice。
●logfile
配置log文件地址，默认使用标准输出，即打印在命令行终端的窗口上。
●databases
设置数据库的个数，可以使用SELECT 命令来切换数据库。默认使用的数据库是0。
●save
设置Redis进行数据库镜像的频率。
	if(在60秒之内有10000个keys发生变化时){
	    进行镜像备份
	}else if(在300秒之内有10个keys发生了变化){
	    进行镜像备份
	}else if(在900秒之内有1个keys发生了变化){
	    进行镜像备份
	}
●rdbcompression
在进行镜像备份时，是否进行压缩。
●dbfilename
镜像备份文件的文件名。
●dir
数据库镜像备份的文件放置的路径。这里的路径跟文件名要分开配置是因为Redis在进行备份时，
先会将当前数据库的状态写入到一个临时文件中，等备份完成时，
再把该该临时文件替换为上面所指定的文件，而这里的临时文件和上面所配置的备份文件都会放在这个指定的路径当中。
●slaveof
设置该数据库为其他数据库的从数据库。
●masterauth
当主数据库连接需要密码验证时，在这里指定。
●requirepass
设置客户端连接后进行任何其他指定前需要使用的密码。警告：因为redis速度相当快，所以在一台比较好的服务器下，
一个外部的用户可以在一秒钟进行150K次的密码尝试，这意味着你需要指定非常非常强大的密码来防止暴力破解。
●maxclients
限制同时连接的客户数量。当连接数超过这个值时，redis将不再接收其他连接请求，客户端尝试连接时将收到error信息。
●maxmemory
设置redis能够使用的最大内存。当内存满了的时候，如果还接收到set命令，redis将先尝试剔除设置过expire信息的key，
而不管该key的过期时间还没有到达。在删除时，将按照过期时间进行删除，
最早将要被过期的key将最先被删除。如果带有expire信息的key都删光了，
那么将返回错误。这样，redis将不再接收写请求，只接收get请求。
maxmemory的设置比较适合于把redis当作于类似memcached的缓存来使用。
●appendonly
默认情况下，redis会在后台异步的把数据库镜像备份到磁盘，但是该备份是非常耗时的，
而且备份也不能很频繁，如果发生诸如拉闸限电、拔插头等状况，
那么将造成比较大范围的数据丢失。所以redis提供了另外一种更加高效的数据库备份及灾难恢复方式。开启append only模式之后，
redis会把所接收到的每一次写操作请求都追加到appendonly.aof文件中，当redis重新启动时，会从该文件恢复出之前的状态。
但是这样会造成appendonly.aof文件过大，所以redis还支持了BGREWRITEAOF指令，对appendonly.aof进行重新整理。
所以我认为推荐生产环境下的做法为关闭镜像，开启appendonly.aof，同时可以选择在访问较少的时间每天对appendonly.aof进行重写一次。
●appendfsync
设置对appendonly.aof文件进行同步的频率。always表示每次有写操作都进行同步，everysec表示对写操作进行累积，
每秒同步一次。这个需要根据实际业务场景进行配置。
●activerehashing
开启之后，redis将在每100毫秒时使用1毫秒的CPU时间来对redis的hash表进行重新hash，可以降低内存的使用。当你的使用场景中，
有非常严格的实时性需要，不能够接受Redis时不时的对请求有2毫秒的延迟的话，把这项配置为no。
如果没有这么严格的实时性要求，可以设置为yes，以便能够尽可能快的释放内存。
</code></pre>

<h2 id="redis-2">四、操作Redis</h2>
<p>1、插入数据</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">redis 127.0.0.1:6379&gt; <span class="nb">set </span>name wwl <span class="c">#设置一个key-value对</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>2、查询数据</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">redis 127.0.0.1:6379&gt; get name <span class="c">#取出key所对应的value</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>3、删除键值</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">redis 127.0.0.1:6379&gt; del name <span class="c">#删除这个key以及对应的value</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>4、验证键是否存在</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">redis 127.0.0.1:6379&gt; exists name <span class="c">#其中0，代表此key不存在;1代表存在</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<hr />

<h2 id="faq">FAQ</h2>

<ol>
  <li>redis的java客户端是Jedis，地址：<a href="https://github.com/xetorthio/jedis">https://github.com/xetorthio/jedis</a></li>
  <li>用redis做像memcache的缓存如何设计？</li>
</ol>

<p>想利用redis作为缓存，将查询结果缓存起来，像memcache的效果。
但是jedis(java客户端)的参数只接收String或者byte[]参数，那么Object如何设计存储呢？</p>

<p>我先找的做法是将结果拼接成字符串存储，取出来再将字符串分割，但是这样简单的内容可以，大的对象就太麻烦了。
如果将Object序列化、反序列化的性能如何保证呢？Memcache的客户端是怎么做的来存取Object的呢？</p>

<p><strong>最佳答案：</strong></p>

<p>memcache存取对象是序列化和反序列化。redis可以在客户端自行实现。</p>

<p>如果非要存储对象，这部分工作必然要做，区别只在在哪里做，有无经过验证的第三方代码，自己开发必然是一部分工作量，这个东西开发的质量不高，会导致CPU过高的。
我在项目中使用memcache不会缓存对象，而是存储json字符串。因为频繁的序列化和反序列化会占用cpu，所以我们这样使用可以降低memcache服务对CPU的要求。
一般部署memcache的主机都是内存比较空闲的主机，而把解析json这部分工作移到应用内部，应用所在主机的CPU配置必然是高的。这样可以有效的利用主机资源。</p>

<p>解析json字符串的工具，选择fastjson，地址：<a href="https://github.com/alibaba/fastjson">https://github.com/alibaba/fastjson</a></p>

<p><strong>还有一个选择：</strong></p>

<p>I want to persist my objects in Redis. How can I do it?</p>

<p>You should definitely check JOhm! And of course, you can always serialize it and store it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux上安装memcached]]></title>
    <link href="http://cmback.github.io/blog/20150416/memcached-install.html"/>
    <updated>2015-04-16T15:52:35+08:00</updated>
    <id>http://cmback.github.io/blog/20150416/memcached-install</id>
    <content type="html"><![CDATA[<p><strong>一 准备安装文件</strong></p>

<p>下载memcached与libevent的安装文件：</p>

<p>memcached下载地址：<a href="http://memcached.googlecode.com/files/memcached-1.4.15.tar.gz">memcached-1.4.15.tar.gz</a></p>

<p>libevent下载地址：<a href="https://github.com/downloads/libevent/libevent/libevent-2.0.21-stable.tar.gz">libevent-2.0.21-stable.tar.gz</a></p>

<p><strong>二 具体安装步骤</strong></p>

<ol>
  <li>由于memcached依赖于libevent，因此需要安装libevent。由于linux系统可能默认已经安装libevent，执行命令：</li>
</ol>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rpm -qa|grep libevent </span></code></pre></td></tr></table></div></figure></notextile></div>
<ol>
  <li>查看系统是否带有该安装软件，如果有执行命令:</li>
</ol>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># 由于系统自带的版本旧，忽略依赖删除
</span><span class="line">rpm -e libevent-1.4.13-4.el6.x86_64 –nodeps</span></code></pre></td></tr></table></div></figure></notextile></div>
<ol>
  <li>安装libevent命令：<!--more--></li>
</ol>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">tar zxvf libevent-2.0.21-stable.tar.gz
</span><span class="line">cd libevent-2.0.21-stable
</span><span class="line">./configure --prefix=/usr/local/libevent
</span><span class="line">make
</span><span class="line">make install</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>至此libevent安装完毕；</p>

<ol>
  <li>安装memcached命令：</li>
</ol>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">tar zxvf memcached-1.4.2.tar.gz
</span><span class="line">cd memcached-memcached-1.4.2
</span><span class="line">./configure --prefix=/usr/local/memcached --with-libevent=
</span><span class="line">/usr/local/libevent/
</span><span class="line">make
</span><span class="line">make install</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>至此memcached安装完毕；</p>

<ol>
  <li>可能存在的错误以及解决方案</li>
</ol>

<p>如果出现客户端连接不上memcached的情况，请将防火墙关闭或将防火墙中的memcached端口（11211端口）打开。</p>

<ol>
  <li>启动memcached</li>
</ol>

<p>打开一个终端，输入以下命令：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">/usr/local/memcached/bin/memcached -d -m 256 -u root -p 11211 -c 1024 –P /tmp/memcached.pid</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>启动参数说明：</p>

<pre><code>-d 选项是启动一个守护进程。
-u root 表示启动memcached的用户为root。
-m 是分配给Memcache使用的内存数量，单位是MB，默认64MB。
-M return error on memory exhausted (rather than removing items)。
-u 是运行Memcache的用户，如果当前为root 的话，需要使用此参数指定用户。
-p 是设置Memcache的TCP监听的端口，最好是1024以上的端口。
-c 选项是最大运行的并发连接数，默认是1024。
-P 是设置保存Memcache的pid文件。
</code></pre>

<p>另外还有个更详细的参数说明：</p>

<pre><code>memcached 1.4.2
-p &lt;num监听的TCP端口(默认: 11211)
-U &lt;num监听的UDP端口(默认: 11211, 0表示不监听)
-s &lt;file用于监听的UNIX套接字路径（禁用网络支持）
-a &lt;maskUNIX套接字访问掩码，八进制数字（默认：0700）
-l &lt;ip_addr监听的IP地址。（默认：INADDR_ANY，所有地址）
-d 作为守护进程来运行。
-r 最大核心文件限制。
-u &lt;username设定进程所属用户。（只有root用户可以使用这个参数）
-m &lt;num单个数据项的最大可用内存，以MB为单位。（默认：64MB）
-M 内存用光时报错。（不会删除数据）
-c &lt;num最大并发连接数。（默认：1024）
-k 锁定所有内存页。注意你可以锁定的内存上限。
试图分配更多内存会失败的，所以留意启动守护进程时所用的用户可分配的内存上限。
（不是前面的 -u &lt;username参数；在sh下，使用命令"ulimit -S -l NUM_KB"来设置。）
-v 提示信息（在事件循环中打印错误/警告信息。）
-vv 详细信息（还打印客户端命令/响应）
-vvv 超详细信息（还打印内部状态的变化）
-h 打印这个帮助信息并退出。
-i 打印memcached和libevent的许可。
-P &lt;file保存进程ID到指定文件，只有在使用 -d 选项的时候才有意义。
-f &lt;factor块大小增长因子。（默认：1.25）
-n &lt;bytes分配给key+value+flags的最小空间（默认：48）
-L 尝试使用大内存页（如果可用的话）。提高内存页尺寸可以减少"页表缓冲（TLB）"丢失次数，提高运行效率。
为了从操作系统获得大内存页，memcached会把全部数据项分配到一个大区块。
-D &lt;char使用 &lt;char作为前缀和ID的分隔符。
这个用于按前缀获得状态报告。默认是":"（冒号）。
如果指定了这个参数，则状态收集会自动开启；如果没指定，则需要用命令"stats detail on"来开启。
-t &lt;num使用的线程数（默认：4）
-R 每个连接可处理的最大请求数。
-C 禁用CAS。
-b 设置后台日志队列的长度（默认：1024）
-B 绑定协议 - 可能值：ascii,binary,auto（默认）
-I 重写每个数据页尺寸。调整数据项最大尺寸。
</code></pre>

<p>也可以启动多个守护进程，但是端口不能重复</p>

<p>查看memcached启动命令：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ps aux|grep memcached</span></code></pre></td></tr></table></div></figure></notextile></div>
<ol>
  <li>停止memcached</li>
</ol>

<p>打开一个终端，输入以下命令：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">ps -ef | grep memcached或者上面的ps命令也行，第二个字段为PID，比如10068</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>输入一下命令终止memcached服务：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">kill -9 10068</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[回溯法解决八皇后问题]]></title>
    <link href="http://cmback.github.io/blog/20150415/eight-queens.html"/>
    <updated>2015-04-15T17:11:42+08:00</updated>
    <id>http://cmback.github.io/blog/20150415/eight-queens</id>
    <content type="html"><![CDATA[<p>八皇后问题是一个以国际象棋为背景的问题：如何能够在8×8的国际象棋棋盘上放置八个皇后，
使得任何一个皇后都无法直接吃掉其他的皇后？为了达到此目的，任两个皇后都不能处于同一条横行、纵行或斜线上。
八皇后问题可以推广为更一般的n皇后摆放问题：这时棋盘的大小变为n×n，
而皇后个数也变成n。当且仅当n = 1或n ≥ 4时问题有解 — 摘自<a href="http://zh.wikipedia.org/wiki/%E5%85%AB%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98">八皇后问题wiki</a></p>

<p>利用回溯法解决这个问题：<!--more--></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># coding: utf-8</span>
</span><span class="line"><span class="n">__author__</span> <span class="o">=</span> <span class="s">&#39;Administrator&#39;</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="c"># 冲突函数</span>
</span><span class="line"><span class="c"># 如果下一个皇后和正在考虑的前一个皇后的水平距离为0，</span>
</span><span class="line"><span class="c"># 或者等于垂直距离（在一条对角线上），返回True</span>
</span><span class="line"><span class="k">def</span> <span class="nf">conflict</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">nextX</span><span class="p">):</span>
</span><span class="line">    <span class="n">nextY</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">state</span><span class="p">)</span>
</span><span class="line">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">nextY</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="nb">abs</span><span class="p">(</span><span class="n">state</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">nextX</span><span class="p">)</span> <span class="ow">in</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">nextY</span> <span class="o">-</span> <span class="n">i</span><span class="p">):</span>
</span><span class="line">            <span class="k">return</span> <span class="bp">True</span>
</span><span class="line">    <span class="k">return</span> <span class="bp">False</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="c"># num：皇后的总数</span>
</span><span class="line"><span class="c"># state：已经注册了的每行的皇后的位置列表（X坐标）</span>
</span><span class="line"><span class="k">def</span> <span class="nf">queens</span><span class="p">(</span><span class="n">num</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span> <span class="n">state</span><span class="o">=</span><span class="p">()):</span>
</span><span class="line">    <span class="k">print</span><span class="p">(</span><span class="n">state</span><span class="p">)</span>
</span><span class="line">    <span class="n">find</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class="line">    <span class="k">for</span> <span class="n">pos</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
</span><span class="line">        <span class="k">if</span> <span class="ow">not</span> <span class="n">conflict</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">pos</span><span class="p">):</span>
</span><span class="line">            <span class="n">find</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class="line">            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">state</span><span class="p">)</span> <span class="o">==</span> <span class="n">num</span> <span class="o">-</span> <span class="mi">1</span><span class="p">:</span>
</span><span class="line">                <span class="c"># 如果state大小已经是num-1了，那么yield最后一个位置</span>
</span><span class="line">                <span class="k">yield</span> <span class="p">(</span><span class="n">pos</span><span class="p">,)</span>
</span><span class="line">            <span class="k">else</span><span class="p">:</span>
</span><span class="line">                <span class="k">for</span> <span class="n">result</span> <span class="ow">in</span> <span class="n">queens</span><span class="p">(</span><span class="n">num</span><span class="p">,</span> <span class="n">state</span> <span class="o">+</span> <span class="p">(</span><span class="n">pos</span><span class="p">,)):</span>
</span><span class="line">                    <span class="k">yield</span> <span class="p">(</span><span class="n">pos</span><span class="p">,)</span> <span class="o">+</span> <span class="n">result</span>
</span><span class="line">    <span class="k">if</span> <span class="ow">not</span> <span class="n">find</span><span class="p">:</span>
</span><span class="line">        <span class="k">print</span><span class="p">(</span><span class="s">&quot;HO, NO...&quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">state</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="k">print</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">queens</span><span class="p">(</span><span class="mi">4</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>回溯法原理：</strong></p>

<p>打个比方，想象一下你要出席一个很重要的会议，但你不知道在哪儿开会，在你面前有两扇门，开会地点就在其中一扇门后面，于是有人挑了左边的进入，然后又发现两扇门，后来再选了左边的门，结果却错了，于是回溯到刚才的两扇门那里，并选择右边的门，结果还是错的，于是再次回溯，直到回到开始点，在那里选择了右边的门。</p>

<p>比较难理解的是这两行代码：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">for</span> <span class="n">result</span> <span class="ow">in</span> <span class="n">queens</span><span class="p">(</span><span class="n">num</span><span class="p">,</span> <span class="n">state</span> <span class="o">+</span> <span class="p">(</span><span class="n">pos</span><span class="p">,)):</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>递归的调用queens生成器，将state + (pos)当做参数传给queens，state是已经存在的合法状态列表，而pos是对要操作的该行进行遍历的位置参数，请注意state + (pos) 并没有将它赋值给state，是因为如果后面的返回没有合法值的话可以回溯到前面的状态，也就是说这次迭代里面我并没有说pos是合法状态，只是可能是合法状态，那么当往下的迭代无合法值，一级一级的跳出的时候，每次跳到一级，这个state都是合法的状态。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">yield</span> <span class="p">(</span><span class="n">pos</span><span class="p">,)</span> <span class="o">+</span> <span class="n">result</span><span class="err">：</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>这行的意思是我将当前状态pos作为前缀再加上一直到到底的迭代位置序列，也就是正序排列位置。就好比是这样的调用：(0+(1+(2+(3+(…..)))))，这样够清楚了吧。^_^</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用递归算法并行化解决谜题框架]]></title>
    <link href="http://cmback.github.io/blog/20150414/concurrent-recursive.html"/>
    <updated>2015-04-14T15:41:16+08:00</updated>
    <id>http://cmback.github.io/blog/20150414/concurrent-recursive</id>
    <content type="html"><![CDATA[<p>我们将谜题定义为：包含一个初始位置，一个目标位置，以及用于判断是否是有效移动的规则集。</p>

<p>规则集包含两部分：计算从指定位置开始的所有合法移动，以及每次移动的结果位置。</p>

<p>下面先给出表示谜题的抽象类，其中的类型参数P和M表示位置类和移动类。根据这个接口，我们可以写一个简单的串行求解程序，该程序将在谜题空间Puzzle Space中查找，直到找到一个解答或者找遍了整个空间都没有发现答案。注：一个移动M代表一步</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="cm">/** 表示 搬箱子 之类谜题的抽象类*/</span>
</span><span class="line"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Puzzle</span><span class="o">&lt;</span><span class="n">P</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class="line">    <span class="n">P</span> <span class="nf">initialPosition</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">    <span class="kt">boolean</span> <span class="nf">isGoal</span><span class="o">(</span><span class="n">P</span> <span class="n">position</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">Set</span><span class="o">&lt;</span><span class="n">M</span><span class="o">&gt;</span> <span class="nf">legalMoves</span><span class="o">(</span><span class="n">P</span> <span class="n">position</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">    <span class="n">P</span> <span class="nf">move</span><span class="o">(</span><span class="n">P</span> <span class="n">position</span><span class="o">,</span> <span class="n">M</span> <span class="n">move</span><span class="o">);</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>下面的PuzzleNode代表通过一系列的移动到达的一个位置，其中保存了到达该位置的移动以及前一个Node。只要沿着PuzzleNode链接逐步回溯，就可以重新构建出达到当前位置的移动序列。<!--more--></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="cm">/** 用于谜题解决框架的链接节点 */</span>
</span><span class="line"><span class="nd">@Immutable</span>
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PuzzleNode</span><span class="o">&lt;</span><span class="n">P</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">final</span> <span class="n">P</span> <span class="n">pos</span><span class="o">;</span>
</span><span class="line">    <span class="kd">final</span> <span class="n">M</span> <span class="n">move</span><span class="o">;</span>
</span><span class="line">    <span class="kd">final</span> <span class="n">PuzzleNode</span><span class="o">&lt;</span><span class="n">P</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="n">prev</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="nf">PuzzleNode</span><span class="o">(</span><span class="n">P</span> <span class="n">pos</span><span class="o">,</span> <span class="n">M</span> <span class="n">move</span><span class="o">,</span> <span class="n">PuzzleNode</span><span class="o">&lt;</span><span class="n">P</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="n">prev</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">pos</span> <span class="o">=</span> <span class="n">pos</span><span class="o">;</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">move</span> <span class="o">=</span> <span class="n">move</span><span class="o">;</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">prev</span> <span class="o">=</span> <span class="n">prev</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">List</span><span class="o">&lt;</span><span class="n">M</span><span class="o">&gt;</span> <span class="nf">asMoveList</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="n">List</span><span class="o">&lt;</span><span class="n">M</span><span class="o">&gt;</span> <span class="n">solution</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">M</span><span class="o">&gt;();</span>
</span><span class="line">        <span class="k">for</span> <span class="o">(</span><span class="n">PuzzleNode</span><span class="o">&lt;</span><span class="n">P</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="n">n</span> <span class="o">=</span> <span class="k">this</span><span class="o">;</span> <span class="n">n</span><span class="o">.</span><span class="na">move</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span> <span class="n">n</span> <span class="o">=</span> <span class="n">n</span><span class="o">.</span><span class="na">prev</span><span class="o">)</span>
</span><span class="line">            <span class="n">solution</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">n</span><span class="o">.</span><span class="na">move</span><span class="o">);</span>
</span><span class="line">        <span class="k">return</span> <span class="n">solution</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>下面的SequentialPuzzleSolver给出了谜题框架的串行解决方案，它在谜题空间中执行深度优先搜索，当找到解答方案，不一定是最短的解决方案，结束搜索。</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="cm">/** 串行的谜题解答器*/</span>
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SequentialPuzzleSolver</span><span class="o">&lt;</span><span class="n">P</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Puzzle</span><span class="o">&lt;</span><span class="n">P</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="n">puzzle</span><span class="o">;</span>
</span><span class="line">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">P</span><span class="o">&gt;</span> <span class="n">seen</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">P</span><span class="o">&gt;();</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="nf">SequentialPuzzleSolver</span><span class="o">(</span><span class="n">Puzzle</span><span class="o">&lt;</span><span class="n">P</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="n">puzzle</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">puzzle</span> <span class="o">=</span> <span class="n">puzzle</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">M</span><span class="o">&gt;</span> <span class="nf">solve</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="n">P</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">puzzle</span><span class="o">.</span><span class="na">initialPosition</span><span class="o">();</span>
</span><span class="line">        <span class="k">return</span> <span class="nf">search</span><span class="o">(</span><span class="k">new</span> <span class="n">PuzzleNode</span><span class="o">&lt;</span><span class="n">P</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;(</span><span class="n">pos</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">));</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">M</span><span class="o">&gt;</span> <span class="nf">search</span><span class="o">(</span><span class="n">PuzzleNode</span><span class="o">&lt;</span><span class="n">P</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(!</span><span class="n">seen</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">pos</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">            <span class="n">seen</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">pos</span><span class="o">);</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">puzzle</span><span class="o">.</span><span class="na">isGoal</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">pos</span><span class="o">))</span>
</span><span class="line">                <span class="k">return</span> <span class="n">node</span><span class="o">.</span><span class="na">asMoveList</span><span class="o">();</span>
</span><span class="line">            <span class="k">for</span> <span class="o">(</span><span class="n">M</span> <span class="n">move</span> <span class="o">:</span> <span class="n">puzzle</span><span class="o">.</span><span class="na">legalMoves</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">pos</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">                <span class="n">P</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">puzzle</span><span class="o">.</span><span class="na">move</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">pos</span><span class="o">,</span> <span class="n">move</span><span class="o">);</span>
</span><span class="line">                <span class="n">PuzzleNode</span><span class="o">&lt;</span><span class="n">P</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="n">child</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PuzzleNode</span><span class="o">&lt;</span><span class="n">P</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;(</span><span class="n">pos</span><span class="o">,</span> <span class="n">move</span><span class="o">,</span> <span class="n">node</span><span class="o">);</span>
</span><span class="line">                <span class="n">List</span><span class="o">&lt;</span><span class="n">M</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">search</span><span class="o">(</span><span class="n">child</span><span class="o">);</span>
</span><span class="line">                <span class="k">if</span> <span class="o">(</span><span class="n">result</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class="line">                    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>接下来我们给出并行解决方案，ConcurrentPuzzleSolver中使用了一个内部类SolverTask，这个类扩展了PuzzleNode并实现了Runnable。大多数工作都是在run中完成的：首先计算下一步肯能到达的所有位置，并去掉已经到达的位置，然后判断（这个任务或者其他某个任务）是否已经成功完成，最后将尚未搜索过的位置提交给Executor。</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ConcurrentPuzzleSolver</span><span class="o">&lt;</span><span class="n">P</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Puzzle</span><span class="o">&lt;</span><span class="n">P</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="n">puzzle</span><span class="o">;</span>
</span><span class="line">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ExecutorService</span> <span class="n">exec</span><span class="o">;</span>
</span><span class="line">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ConcurrentMap</span><span class="o">&lt;</span><span class="n">P</span><span class="o">,</span> <span class="n">Boolean</span><span class="o">&gt;</span> <span class="n">seen</span><span class="o">;</span>
</span><span class="line">    <span class="kd">protected</span> <span class="kd">final</span> <span class="n">ValueLatch</span><span class="o">&lt;</span><span class="n">PuzzleNode</span><span class="o">&lt;</span><span class="n">P</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;&gt;</span> <span class="n">solution</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ValueLatch</span><span class="o">&lt;</span><span class="n">PuzzleNode</span><span class="o">&lt;</span><span class="n">P</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;&gt;();</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="nf">ConcurrentPuzzleSolver</span><span class="o">(</span><span class="n">Puzzle</span><span class="o">&lt;</span><span class="n">P</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="n">puzzle</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">puzzle</span> <span class="o">=</span> <span class="n">puzzle</span><span class="o">;</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">exec</span> <span class="o">=</span> <span class="n">initThreadPool</span><span class="o">();</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">seen</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConcurrentHashMap</span><span class="o">&lt;</span><span class="n">P</span><span class="o">,</span> <span class="n">Boolean</span><span class="o">&gt;();</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">exec</span> <span class="k">instanceof</span> <span class="n">ThreadPoolExecutor</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">ThreadPoolExecutor</span> <span class="n">tpe</span> <span class="o">=</span> <span class="o">(</span><span class="n">ThreadPoolExecutor</span><span class="o">)</span> <span class="n">exec</span><span class="o">;</span>
</span><span class="line">            <span class="n">tpe</span><span class="o">.</span><span class="na">setRejectedExecutionHandler</span><span class="o">(</span><span class="k">new</span> <span class="n">ThreadPoolExecutor</span><span class="o">.</span><span class="na">DiscardPolicy</span><span class="o">());</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="n">ExecutorService</span> <span class="nf">initThreadPool</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newCachedThreadPool</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">M</span><span class="o">&gt;</span> <span class="nf">solve</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span><span class="line">        <span class="k">try</span> <span class="o">{</span>
</span><span class="line">            <span class="n">P</span> <span class="n">p</span> <span class="o">=</span> <span class="n">puzzle</span><span class="o">.</span><span class="na">initialPosition</span><span class="o">();</span>
</span><span class="line">            <span class="n">exec</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">newTask</span><span class="o">(</span><span class="n">p</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">));</span>
</span><span class="line">            <span class="c1">// block until solution found</span>
</span><span class="line">            <span class="n">PuzzleNode</span><span class="o">&lt;</span><span class="n">P</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="n">solnPuzzleNode</span> <span class="o">=</span> <span class="n">solution</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
</span><span class="line">            <span class="k">return</span> <span class="o">(</span><span class="n">solnPuzzleNode</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">?</span> <span class="kc">null</span> <span class="o">:</span> <span class="n">solnPuzzleNode</span><span class="o">.</span><span class="na">asMoveList</span><span class="o">();</span>
</span><span class="line">        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class="line">            <span class="n">exec</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">protected</span> <span class="n">Runnable</span> <span class="nf">newTask</span><span class="o">(</span><span class="n">P</span> <span class="n">p</span><span class="o">,</span> <span class="n">M</span> <span class="n">m</span><span class="o">,</span> <span class="n">PuzzleNode</span><span class="o">&lt;</span><span class="n">P</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="k">new</span> <span class="nf">SolverTask</span><span class="o">(</span><span class="n">p</span><span class="o">,</span> <span class="n">m</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">protected</span> <span class="kd">class</span> <span class="nc">SolverTask</span> <span class="kd">extends</span> <span class="n">PuzzleNode</span><span class="o">&lt;</span><span class="n">P</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
</span><span class="line">        <span class="n">SolverTask</span><span class="o">(</span><span class="n">P</span> <span class="n">pos</span><span class="o">,</span> <span class="n">M</span> <span class="n">move</span><span class="o">,</span> <span class="n">PuzzleNode</span><span class="o">&lt;</span><span class="n">P</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="n">prev</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="kd">super</span><span class="o">(</span><span class="n">pos</span><span class="o">,</span> <span class="n">move</span><span class="o">,</span> <span class="n">prev</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">solution</span><span class="o">.</span><span class="na">isSet</span><span class="o">()</span> <span class="o">||</span> <span class="n">seen</span><span class="o">.</span><span class="na">putIfAbsent</span><span class="o">(</span><span class="n">pos</span><span class="o">,</span> <span class="kc">true</span><span class="o">)</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class="line">                <span class="k">return</span><span class="o">;</span> <span class="c1">// already solved or seen this position</span>
</span><span class="line">            <span class="k">if</span> <span class="o">(</span><span class="n">puzzle</span><span class="o">.</span><span class="na">isGoal</span><span class="o">(</span><span class="n">pos</span><span class="o">))</span>
</span><span class="line">                <span class="n">solution</span><span class="o">.</span><span class="na">setValue</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class="line">            <span class="k">else</span>
</span><span class="line">                <span class="nf">for</span> <span class="o">(</span><span class="n">M</span> <span class="n">m</span> <span class="o">:</span> <span class="n">puzzle</span><span class="o">.</span><span class="na">legalMoves</span><span class="o">(</span><span class="n">pos</span><span class="o">))</span>
</span><span class="line">                    <span class="n">exec</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">newTask</span><span class="o">(</span><span class="n">puzzle</span><span class="o">.</span><span class="na">move</span><span class="o">(</span><span class="n">pos</span><span class="o">,</span> <span class="n">m</span><span class="o">),</span> <span class="n">m</span><span class="o">,</span> <span class="k">this</span><span class="o">));</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="nd">@ThreadSafe</span>
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ValueLatch</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class="line">    <span class="nd">@GuardedBy</span><span class="o">(</span><span class="s">&quot;this&quot;</span><span class="o">)</span>
</span><span class="line">    <span class="kd">private</span> <span class="n">T</span> <span class="n">value</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">CountDownLatch</span> <span class="n">done</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">CountDownLatch</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isSet</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="o">(</span><span class="n">done</span><span class="o">.</span><span class="na">getCount</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">setValue</span><span class="o">(</span><span class="n">T</span> <span class="n">newValue</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(!</span><span class="n">isSet</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">            <span class="n">value</span> <span class="o">=</span> <span class="n">newValue</span><span class="o">;</span>
</span><span class="line">            <span class="n">done</span><span class="o">.</span><span class="na">countDown</span><span class="o">();</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="n">T</span> <span class="nf">getValue</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>
</span><span class="line">        <span class="n">done</span><span class="o">.</span><span class="na">await</span><span class="o">();</span>
</span><span class="line">        <span class="kd">synchronized</span> <span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="k">return</span> <span class="n">value</span><span class="o">;</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>比较串行和并行算法可知：并发方法引入了一种新形式的限制并去掉了一种原有的限制，新的限制在这个问题域中更合适。串行版本的程序执行深度优先搜索，因此搜索过程将受限于栈的大小。并发版本程序执行广度优先搜索，因此不会受到栈大小的限制。</p>

<p>第一个找到解答的线程还会关闭Executor，从而阻止接受显得任务。要避免处理RejectedExecutionException（等待队列满员或者是Executor关闭后提交的任务），需要将拒绝执行处理器设置为DiscardPolicy 。</p>

<p>如果不存在解答，那么ConcurrentPuzzleSolver就会永远的等待下去，getSolution一直阻塞下去。
通过记录活动任务数量，当该值为零时将解答设置为null，如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PuzzleSolver</span><span class="o">&lt;</span><span class="n">P</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="n">ConcurrentPuzzleSolver</span><span class="o">&lt;</span><span class="n">P</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class="line">    <span class="n">PuzzleSolver</span><span class="o">(</span><span class="n">Puzzle</span><span class="o">&lt;</span><span class="n">P</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="n">puzzle</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="kd">super</span><span class="o">(</span><span class="n">puzzle</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kd">final</span> <span class="n">AtomicInteger</span> <span class="n">taskCount</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">AtomicInteger</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">    <span class="kd">protected</span> <span class="n">Runnable</span> <span class="nf">newTask</span><span class="o">(</span><span class="n">P</span> <span class="n">p</span><span class="o">,</span> <span class="n">M</span> <span class="n">m</span><span class="o">,</span> <span class="n">PuzzleNode</span><span class="o">&lt;</span><span class="n">P</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="k">new</span> <span class="nf">CountingSolverTask</span><span class="o">(</span><span class="n">p</span><span class="o">,</span> <span class="n">m</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">class</span> <span class="nc">CountingSolverTask</span> <span class="kd">extends</span> <span class="n">SolverTask</span> <span class="o">{</span>
</span><span class="line">        <span class="n">CountingSolverTask</span><span class="o">(</span><span class="n">P</span> <span class="n">pos</span><span class="o">,</span> <span class="n">M</span> <span class="n">move</span><span class="o">,</span> <span class="n">PuzzleNode</span><span class="o">&lt;</span><span class="n">P</span><span class="o">,</span> <span class="n">M</span><span class="o">&gt;</span> <span class="n">prev</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="kd">super</span><span class="o">(</span><span class="n">pos</span><span class="o">,</span> <span class="n">move</span><span class="o">,</span> <span class="n">prev</span><span class="o">);</span>
</span><span class="line">            <span class="n">taskCount</span><span class="o">.</span><span class="na">incrementAndGet</span><span class="o">();</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">            <span class="k">try</span> <span class="o">{</span>
</span><span class="line">                <span class="kd">super</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
</span><span class="line">            <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class="line">                <span class="k">if</span> <span class="o">(</span><span class="n">taskCount</span><span class="o">.</span><span class="na">decrementAndGet</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
</span><span class="line">                    <span class="n">solution</span><span class="o">.</span><span class="na">setValue</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>另外，还可以将ValueLatch设置为限时的，将getValue使用await的限时版实现，那么就可以指定多少时间内搜索结果，搜不到就超时中断。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[centos6更新yum源]]></title>
    <link href="http://cmback.github.io/blog/20150413/centos-yum.html"/>
    <updated>2015-04-13T19:02:42+08:00</updated>
    <id>http://cmback.github.io/blog/20150413/centos-yum</id>
    <content type="html"><![CDATA[<h4 id="section">先备份</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo<span class="o">{</span>,.bak<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="centos-baserepo">修改CentOS-Base.repo</h4>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># CentOS-Base.repo</span>
</span><span class="line"><span class="c">#</span>
</span><span class="line"><span class="c"># The mirror system uses the connecting IP address of the client and the</span>
</span><span class="line"><span class="c"># update status of each mirror to pick mirrors that are updated to and</span>
</span><span class="line"><span class="c"># geographically close to the client. You should use this for CentOS updates</span>
</span><span class="line"><span class="c"># unless you are manually picking other mirrors.</span>
</span><span class="line"><span class="c">#</span>
</span><span class="line"><span class="c"># If the mirrorlist= does not work for you, as a fall back you can try the </span>
</span><span class="line"><span class="c"># remarked out baseurl= line instead.</span>
</span><span class="line"><span class="c">#</span>
</span><span class="line"><span class="c">#</span>
</span><span class="line">
</span><span class="line"><span class="o">[</span>base<span class="o">]</span>
</span><span class="line"><span class="nv">name</span><span class="o">=</span>CentOS-<span class="nv">$releasever</span> - Base
</span><span class="line"><span class="c">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=os</span>
</span><span class="line"><span class="nv">baseurl</span><span class="o">=</span>http://mirrors.163.com/centos/<span class="nv">$releasever</span>/os/<span class="nv">$basearch</span>/
</span><span class="line"><span class="nv">gpgcheck</span><span class="o">=</span>1
</span><span class="line"><span class="nv">gpgkey</span><span class="o">=</span>file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6
</span><span class="line">
</span><span class="line"><span class="c">#released updates </span>
</span><span class="line"><span class="o">[</span>updates<span class="o">]</span>
</span><span class="line"><span class="nv">name</span><span class="o">=</span>CentOS-<span class="nv">$releasever</span> - Updates
</span><span class="line"><span class="c">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=updates</span>
</span><span class="line"><span class="nv">baseurl</span><span class="o">=</span>http://mirrors.163.com/centos/<span class="nv">$releasever</span>/updates/<span class="nv">$basearch</span>/
</span><span class="line"><span class="nv">gpgcheck</span><span class="o">=</span>1
</span><span class="line"><span class="nv">gpgkey</span><span class="o">=</span>file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6
</span><span class="line">
</span><span class="line"><span class="c">#additional packages that may be useful</span>
</span><span class="line"><span class="o">[</span>extras<span class="o">]</span>
</span><span class="line"><span class="nv">name</span><span class="o">=</span>CentOS-<span class="nv">$releasever</span> - Extras
</span><span class="line"><span class="c">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=extras</span>
</span><span class="line"><span class="nv">baseurl</span><span class="o">=</span>http://mirrors.163.com/centos/<span class="nv">$releasever</span>/extras/<span class="nv">$basearch</span>/
</span><span class="line"><span class="nv">gpgcheck</span><span class="o">=</span>1
</span><span class="line"><span class="nv">gpgkey</span><span class="o">=</span>file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6
</span><span class="line">
</span><span class="line"><span class="c">#additional packages that extend functionality of existing packages</span>
</span><span class="line"><span class="o">[</span>centosplus<span class="o">]</span>
</span><span class="line"><span class="nv">name</span><span class="o">=</span>CentOS-<span class="nv">$releasever</span> - Plus
</span><span class="line"><span class="c">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=centosplus</span>
</span><span class="line"><span class="nv">baseurl</span><span class="o">=</span>http://mirrors.163.com/centos/<span class="nv">$releasever</span>/centosplus/<span class="nv">$basearch</span>/
</span><span class="line"><span class="nv">gpgcheck</span><span class="o">=</span>1
</span><span class="line"><span class="nv">enabled</span><span class="o">=</span>0
</span><span class="line"><span class="nv">gpgkey</span><span class="o">=</span>file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6
</span><span class="line">
</span><span class="line"><span class="c">#contrib - packages by Centos Users</span>
</span><span class="line"><span class="o">[</span>contrib<span class="o">]</span>
</span><span class="line"><span class="nv">name</span><span class="o">=</span>CentOS-<span class="nv">$releasever</span> - Contrib
</span><span class="line"><span class="c">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=contrib</span>
</span><span class="line"><span class="nv">baseurl</span><span class="o">=</span>http://mirrors.163.com/centos/<span class="nv">$releasever</span>/contrib/<span class="nv">$basearch</span>/
</span><span class="line"><span class="nv">gpgcheck</span><span class="o">=</span>1
</span><span class="line"><span class="nv">enabled</span><span class="o">=</span>0
</span><span class="line"><span class="nv">gpgkey</span><span class="o">=</span>file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>接下来我们来更新下yum：<!--more--></p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">yum clean all
</span><span class="line">yum makecache  <span class="c"># 将服务器上的软件包信息缓存到本地,以提高搜索安装软件的速度</span>
</span><span class="line">yum install vim*  <span class="c"># 测试域名是否可用</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="rpmforge">附：增加RPMforge源</h4>
<ul>
  <li>download the rpmforge package：
<a href="http://packages.sw.be/rpmforge-release/rpmforge-release-0.5.2-2.el6.rf.i686.rpm">http://packages.sw.be/rpmforge-release/rpmforge-release-0.5.2-2.el6.rf.i686.rpm</a></li>
  <li>Install DAG’s GPG key</li>
</ul>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">sudo rpm --import http://apt.sw.be/RPM-GPG-KEY.dag.txt
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>如果上面出现错误，确认下：</p>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">sudo rpm -K rpmforge-release-0.5.2-2.el6.rf.*.rpm
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>然后安装rpm</li>
</ul>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">sudo rpm -i rpmforge-release-0.5.2-2.el6.rf.*.rpm
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>试试看：</li>
</ul>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">sudo yum install htop
</span></code></pre></td></tr></table></div></figure></notextile></div>
<ul>
  <li>开始更新系统：</li>
</ul>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">sudo yum update
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
</feed>
